projections$inflatedCost[projections$overallRank >= 34 & projections$overallRank <= 66] <- ceiling(projections$avgCost[projections$overallRank >= 34 & projections$overallRank <= 66] * (leagueCap/defaultCap) * 1.0)
projections$inflatedCost[projections$overallRank >= 67] <- ceiling(projections$avgCost[projections$overallRank >= 67] * (leagueCap/defaultCap) * 0.9)
projections$inflatedCost[is.na(projections$inflatedCost)==TRUE] <- 1
projections$inflatedCost[projections$inflatedCost==0] <- 1
load(paste(getwd(),"/Data/FantasyPros-Projections-2013.RData", sep=""))
projections_fp
projections_fp
head(projections_fp)
avgcost_fp <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
###Fantasy Pros
avgcost_fp$name <- str_sub(avgcost_fp[,c("Player (pos, team, bye)")], end=str_locate(avgcost_fp[,c("Player (pos, team, bye)")], ',')[,1]-1)
avgcost_fp$avgCost_fp <- as.numeric(sub("\\$","", avgcost_fp$Ave))
avgcost_fp <- avgcost_fp[,c("name","avgCost_fp")]
avgcost_fp$projectedCost_fp <- ceiling(avgcost_fp$avgCost_fp * (leagueCap/defaultCap))
#Rename Players
avgcost_fp[grep("Beanie", avgcost_fp[,c("name")]),"name"] <- "Beanie Wells"
avgcost_fp[grep("Ty Hilton", avgcost_fp[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost_fp[grep("Robert Housler", avgcost_fp[,c("name")]),"name"] <- "Rob Housler"
avgcost_fp[grep("Reuben Randle", avgcost_fp[,c("name")]),"name"] <- "Rueben Randle"
avgcost_fp[grep("Joseph Morgan", avgcost_fp[,c("name")]),"name"] <- "Joe Morgan"
avgcost_fp[grep("Christopher Ivory", avgcost_fp[,c("name")]),"name"] <- "Chris Ivory"
#Merge
projections <- merge(projections_fp, avgcost_fp, by="name", all.x=TRUE)
projections
#Avg & Projected Cost
avgcost_fp <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
###Fantasy Pros
avgcost_fp$name <- str_sub(avgcost_fp[,c("Player (pos, team, bye)")], end=str_locate(avgcost_fp[,c("Player (pos, team, bye)")], ',')[,1]-1)
avgcost_fp$avgCost_fp <- as.numeric(sub("\\$","", avgcost_fp$Ave))
avgcost_fp <- avgcost_fp[,c("name","avgCost_fp")]
#Rename Players
avgcost_fp[grep("Beanie", avgcost_fp[,c("name")]),"name"] <- "Beanie Wells"
avgcost_fp[grep("Ty Hilton", avgcost_fp[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost_fp[grep("Robert Housler", avgcost_fp[,c("name")]),"name"] <- "Rob Housler"
avgcost_fp[grep("Reuben Randle", avgcost_fp[,c("name")]),"name"] <- "Rueben Randle"
avgcost_fp[grep("Joseph Morgan", avgcost_fp[,c("name")]),"name"] <- "Joe Morgan"
avgcost_fp[grep("Christopher Ivory", avgcost_fp[,c("name")]),"name"] <- "Chris Ivory"
#Merge
projections <- merge(projections_fp, avgcost_fp, by="name", all.x=TRUE)
projections
projections$avgCost_fp[is.na(projections$avgCost_fp)==TRUE] <- 1
projections$overallRank <- rank(-projections$projections, ties.method="min")
projections <- projections[order(projections$overallRank),]
#Remove duplicate cases
projections[duplicated(projections$name),]
names(projections)
#Libraries
library("stringr")
library("XML")
#Download FantasyPros
source(paste(getwd(),"/R Scripts/FantasyPros.R", sep=""))
#Load data
load(paste(getwd(),"/Data/FantasyPros-Projections-2013.RData", sep=""))
#Avg & Projected Cost
avgcost_fp <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
###Fantasy Pros
avgcost_fp$name <- str_sub(avgcost_fp[,c("Player (pos, team, bye)")], end=str_locate(avgcost_fp[,c("Player (pos, team, bye)")], ',')[,1]-1)
avgcost_fp$avgCost_fp <- as.numeric(sub("\\$","", avgcost_fp$Ave))
avgcost_fp <- avgcost_fp[,c("name","avgCost_fp")]
#Rename Players
avgcost_fp[grep("Beanie", avgcost_fp[,c("name")]),"name"] <- "Beanie Wells"
avgcost_fp[grep("Ty Hilton", avgcost_fp[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost_fp[grep("Robert Housler", avgcost_fp[,c("name")]),"name"] <- "Rob Housler"
avgcost_fp[grep("Reuben Randle", avgcost_fp[,c("name")]),"name"] <- "Rueben Randle"
avgcost_fp[grep("Joseph Morgan", avgcost_fp[,c("name")]),"name"] <- "Joe Morgan"
avgcost_fp[grep("Christopher Ivory", avgcost_fp[,c("name")]),"name"] <- "Chris Ivory"
#Merge
projections <- merge(projections_fp, avgcost_fp, by="name", all.x=TRUE)
projections$avgCost_fp[is.na(projections$avgCost_fp)==TRUE] <- 1
projections$overallRank <- rank(-projections$pts_fp, ties.method="min")
projections <- projections[order(projections$overallRank),]
getwd()
source(paste(getwd(),"/R Scripts/FantasyPros.R", sep=""))
source(paste(getwd(),"/R Scripts/FantasyPros Projections.R", sep=""))
load(paste(getwd(),"/Data/FantasyPros-Projections-2013.RData", sep=""))
#Avg & Projected Cost
avgcost_fp <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
###Fantasy Pros
avgcost_fp$name <- str_sub(avgcost_fp[,c("Player (pos, team, bye)")], end=str_locate(avgcost_fp[,c("Player (pos, team, bye)")], ',')[,1]-1)
avgcost_fp$avgCost_fp <- as.numeric(sub("\\$","", avgcost_fp$Ave))
avgcost_fp <- avgcost_fp[,c("name","avgCost_fp")]
#Rename Players
avgcost_fp[grep("Beanie", avgcost_fp[,c("name")]),"name"] <- "Beanie Wells"
avgcost_fp[grep("Ty Hilton", avgcost_fp[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost_fp[grep("Robert Housler", avgcost_fp[,c("name")]),"name"] <- "Rob Housler"
avgcost_fp[grep("Reuben Randle", avgcost_fp[,c("name")]),"name"] <- "Rueben Randle"
avgcost_fp[grep("Joseph Morgan", avgcost_fp[,c("name")]),"name"] <- "Joe Morgan"
avgcost_fp[grep("Christopher Ivory", avgcost_fp[,c("name")]),"name"] <- "Chris Ivory"
#Merge
projections <- merge(projections_fp, avgcost_fp, by="name", all.x=TRUE)
projections$avgCost_fp[is.na(projections$avgCost_fp)==TRUE] <- 1
projections$overallRank <- rank(-projections$pts_fp, ties.method="min")
projections <- projections[order(projections$overallRank),]
projections[duplicated(projections$name),]
projections[duplicated(projections$name),"name"]
projections[projections$name %in% projections[duplicated(projections$name),"name"],]
projections$cost[projections$overallRank <= 33] <- ceiling(projections$avgCost_fp[projections$overallRank <= 33] * 1.1)
projections$cost[projections$overallRank >= 34 & projections$overallRank <= 66] <- ceiling(projections$avgCost[projections$overallRank >= 34 & projections$overallRank <= 66] * 1.0)
projections$cost[projections$overallRank >= 67] <- ceiling(projections$avgCost_fp[projections$overallRank >= 67] * 0.9)
projections$cost[is.na(projections$cost)==TRUE] <- 1
projections$cost[projections$cost==0] <- 1
projections$cost
projections$avgcost_fp
avgcost_fp
projections$avgCost_fp
projections$cost
names(projections)
#Load data
load(paste(getwd(),"/Data/FantasyPros-Projections-2013.RData", sep=""))
#Avg & Projected Cost
avgcost_fp <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
###Fantasy Pros
avgcost_fp$name <- str_sub(avgcost_fp[,c("Player (pos, team, bye)")], end=str_locate(avgcost_fp[,c("Player (pos, team, bye)")], ',')[,1]-1)
avgcost_fp$cost <- as.numeric(sub("\\$","", avgcost_fp$Ave))
avgcost_fp <- avgcost_fp[,c("name","cost")]
#Rename Players
avgcost_fp[grep("Beanie", avgcost_fp[,c("name")]),"name"] <- "Beanie Wells"
avgcost_fp[grep("Ty Hilton", avgcost_fp[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost_fp[grep("Robert Housler", avgcost_fp[,c("name")]),"name"] <- "Rob Housler"
avgcost_fp[grep("Reuben Randle", avgcost_fp[,c("name")]),"name"] <- "Rueben Randle"
avgcost_fp[grep("Joseph Morgan", avgcost_fp[,c("name")]),"name"] <- "Joe Morgan"
avgcost_fp[grep("Christopher Ivory", avgcost_fp[,c("name")]),"name"] <- "Chris Ivory"
#Merge
projections <- merge(projections_fp, avgcost_fp, by="name", all.x=TRUE)
projections$cost[is.na(projections$cost)==TRUE] <- 1
projections$cost
avgcost_fp
avgcost_fp <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
avgcost_fp
###Fantasy Pros
avgcost_fp$name <- str_sub(avgcost_fp[,c("Player (pos, team, bye)")], end=str_locate(avgcost_fp[,c("Player (pos, team, bye)")], ',')[,1]-1)
avgcost_fp$cost <- as.numeric(sub("\\$","", avgcost_fp$Ave))
avgcost_fp <- avgcost_fp[,c("name","cost")]
#Rename Players
avgcost_fp[grep("Beanie", avgcost_fp[,c("name")]),"name"] <- "Beanie Wells"
avgcost_fp[grep("Ty Hilton", avgcost_fp[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost_fp[grep("Robert Housler", avgcost_fp[,c("name")]),"name"] <- "Rob Housler"
avgcost_fp[grep("Reuben Randle", avgcost_fp[,c("name")]),"name"] <- "Rueben Randle"
avgcost_fp[grep("Joseph Morgan", avgcost_fp[,c("name")]),"name"] <- "Joe Morgan"
avgcost_fp[grep("Christopher Ivory", avgcost_fp[,c("name")]),"name"] <- "Chris Ivory"
#Merge
projections <- merge(projections_fp, avgcost_fp, by="name", all.x=TRUE)
projections$cost[is.na(projections$cost)==TRUE] <- 0
projections$cost
projections$overallRank <- rank(-projections$pts_fp, ties.method="min")
projections <- projections[order(projections$overallRank),]
projections
projections[duplicated(projections$name),"name"]
projections[projections$name %in% projections[duplicated(projections$name),"name"],]
projections$team <- projections$team_fp
names(projections)
shinyData1 <- projections[,c("name","pos","team","passYds","passTds","passInt","rushYds","rushTds","recYds","recTds","twoPts","fumbles","points")]
#Modify variable names
projections$team <- projections$team_fp
projections$passYds <- projections$passYds_fp
projections$passTds <- projections$passTds_fp
projections$passInt <- projections$passInt_fp
projections$rushYds <- projections$rushYds_fp
projections$rushTds <- projections$rushTds_fp
projections$recYds <- projections$recYds_fp
projections$recTds <- projections$recTds_fp
projections$twoPts <- projections$twoPts_fp
projections$fumbles <- projections$fumbles_fp
projections$points <- projections$pts_fp
shinyData1 <- projections[,c("name","pos","team","passYds","passTds","passInt","rushYds","rushTds","recYds","recTds","twoPts","fumbles","points")]
shinyData1
names(projections)
source(paste(getwd(),"/R Scripts/FantasyPros Projections.R", sep=""))
#Libraries
library("stringr")
library("XML")
#Download FantasyPros
source(paste(getwd(),"/R Scripts/FantasyPros Projections.R", sep=""), echo=TRUE)
source(paste(getwd(),"/R Scripts/Risk.R", sep=""), echo=TRUE)
projections
riskData <- projections[,c("name","risk")]
riskData
riskData <- projections[,c("name","risk")]
projections <- merge(projections_fp, riskData], by="name", all.x=TRUE)
projections <- merge(projections_fp, riskData, by="name", all.x=TRUE)
projections
projections <- merge(projections, avgcost, by="name", all.x=TRUE)
#Avg & Projected Cost
avgcost <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
###Fantasy Pros
avgcost$name <- str_sub(avgcost[,c("Player (pos, team, bye)")], end=str_locate(avgcost[,c("Player (pos, team, bye)")], ',')[,1]-1)
avgcost$cost <- as.numeric(sub("\\$","", avgcost$Ave))
avgcost <- avgcost[,c("name","cost")]
#Rename Players
avgcost[grep("Beanie", avgcost[,c("name")]),"name"] <- "Beanie Wells"
avgcost[grep("Ty Hilton", avgcost[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost[grep("Robert Housler", avgcost[,c("name")]),"name"] <- "Rob Housler"
avgcost[grep("Reuben Randle", avgcost[,c("name")]),"name"] <- "Rueben Randle"
avgcost[grep("Joseph Morgan", avgcost[,c("name")]),"name"] <- "Joe Morgan"
avgcost[grep("Christopher Ivory", avgcost[,c("name")]),"name"] <- "Chris Ivory"
projections <- merge(projections_fp, riskData, by="name", all.x=TRUE)
projections <- merge(projections, avgcost, by="name", all.x=TRUE)
projections$cost[is.na(projections$cost)==TRUE] <- 0
projections$cost
projections[duplicated(projections$name),"name"]
projections[projections$name %in% projections[duplicated(projections$name),"name"],]
#Modify variable names
projections$team <- projections$team_fp
projections$passYds <- projections$passYds_fp
projections$passTds <- projections$passTds_fp
projections$passInt <- projections$passInt_fp
projections$rushYds <- projections$rushYds_fp
projections$rushTds <- projections$rushTds_fp
projections$recYds <- projections$recYds_fp
projections$recTds <- projections$recTds_fp
projections$twoPts <- projections$twoPts_fp
projections$fumbles <- projections$fumbles_fp
projections$points <- projections$pts_fp
names(projections)
shinyData1 <- projections[,c("name","pos","team","passYds","passTds","passInt","rushYds","rushTds","recYds","recTds","twoPts","fumbles","points","cost","risk")]
shinyData1
shinyData2 <- na.omit(projections[,c("name","pos","points","risk","cost")])
shinyData2
shinyData <- shinyData1[shinyData1$name %in% shinyData2$name,]
shinyData
shinyData$positionRank[shinyData$pos=="QB"] <- rank(-shinyData$points[shinyData$pos=="QB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="RB"] <- rank(-shinyData$points[shinyData$pos=="RB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="WR"] <- rank(-shinyData$points[shinyData$pos=="WR"], ties.method="min")
shinyData$positionRank[shinyData$pos=="TE"] <- rank(-shinyData$points[shinyData$pos=="TE"], ties.method="min")
shinyData$overallRank <- rank(-shinyData$points, ties.method="min")
shinyData <- shinyData[order(-shinyData$points),]
row.names(shinyData) <- 1:dim(shinyData)[1]
shinyData
shinyData <- shinyData[,c("name","pos","team","overallRank","positionRank","passYds","passTds","passInt","rushYds","rushTds","recYds","recTds","twoPts","fumbles","points","cost","risk")]
shinyData
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/Shiny.R', echo=TRUE)
write.csv(shinyData, file=paste(getwd(),"/shinyapp/shinyData.csv", sep=""), row.names=FALSE)
read.csv("./shinyData.csv")
getwd()
setwd("./shinyapp")
read.csv("./shinyData.csv")
load_or_install("shiny")
runApp()
runApp()
install.packages('httpuv', repos=c(RStudio='http://rstudio.org/_packages', CRAN='http://cran.rstudio.com'))
install.packages('devtools')  # if you don't already have devtools installed
install.packages("httpuv", repos = c(RStudio = "http://rstudio.org/_packages",
install.packages('httpuv', repos=c(RStudio='http://rstudio.org/_packages', CRAN='http://cran.rstudio.com'))
install.packages('devtools')  # if you don't already have devtools installed
devtools::install_github('shiny', 'rstudio')
runApp("~/shinyapp")
library("shiny")
runApp("~/shinyapp")
setwd("./shinyapp")
getwd()
getwd()
getwd()
library("shiny")
runApp("~/shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
shinyData
shinyData <- read.csv("./shinyData.csv")
getwd()
shinyData <- read.csv("~/shinyData.csv")
shinyData <- read.csv(paste(getwd(),"/shinyapp/shinyData.csv", sep=""), echo=TRUE)
shinyData <- read.csv(paste(getwd(),"/shinyapp/shinyData.csv", sep=""))
shinyData
load(paste(getwd(),"/Data/FantasyPros-Projections-2013.RData", sep=""))
projections_fp
names(projections_fp)
#Load libraries
library("XML")
library("stringr")
library("ggplot2")
library("plyr")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Download fantasy football projections from FantasyPros.com
qb_fp <- readHTMLTable("http://www.fantasypros.com/nfl/projections/qb.php", stringsAsFactors = FALSE)$data
rb_fp <- readHTMLTable("http://www.fantasypros.com/nfl/projections/rb.php", stringsAsFactors = FALSE)$data
wr_fp <- readHTMLTable("http://www.fantasypros.com/nfl/projections/wr.php", stringsAsFactors = FALSE)$data
te_fp <- readHTMLTable("http://www.fantasypros.com/nfl/projections/te.php", stringsAsFactors = FALSE)$data
#Add variable names for each object
names(qb_fp) <- c("player_fp","passAtt_fp","passComp_fp","passYds_fp","passTds_fp","passInt_fp","rushAtt_fp","rushYds_fp","rushTds_fp","fumbles_fp","pts_fp")
names(rb_fp) <- c("player_fp","rushAtt_fp","rushYds_fp","rushTds_fp","rec_fp","recYds_fp","recTds_fp","fumbles_fp","pts_fp")
names(wr_fp) <- c("player_fp","rushAtt_fp","rushYds_fp","rushTds_fp","rec_fp","recYds_fp","recTds_fp","fumbles_fp","pts_fp")
names(te_fp) <- c("player_fp","rec_fp","recYds_fp","recTds_fp","fumbles_fp","pts_fp")
#Add variable for player position
qb_fp$pos <- as.factor("QB")
rb_fp$pos <- as.factor("RB")
wr_fp$pos <- as.factor("WR")
te_fp$pos <- as.factor("TE")
#Merge players across positions
projections_fp <- merge(qb_fp,rb_fp, all=TRUE)
projections_fp <- merge(projections_fp,wr_fp, all=TRUE)
projections_fp <- merge(projections_fp,te_fp, all=TRUE)
names(projections_fp)
#Convert variables from character strings to numeric
projections_fp$passAtt_fp <- as.numeric(projections_fp$passAtt_fp)
projections_fp$passComp_fp <- as.numeric(projections_fp$passComp_fp)
projections_fp$passYds_fp <- as.numeric(gsub(",", "", projections_fp$passYds_fp, fixed = TRUE))
projections_fp$passTds_fp <- as.numeric(projections_fp$passTds_fp)
projections_fp$passInt_fp <- as.numeric(projections_fp$passInt_fp)
projections_fp$rushAtt_fp <- as.numeric(projections_fp$rushAtt_fp)
projections_fp$rushYds_fp <- as.numeric(gsub(",", "", projections_fp$rushYds_fp, fixed = TRUE))
projections_fp$rushTds_fp <- as.numeric(projections_fp$rushTds_fp)
projections_fp$rec_fp <- as.numeric(projections_fp$rec_fp)
projections_fp$recYds_fp <- as.numeric(gsub(",", "", projections_fp$recYds_fp, fixed = TRUE))
projections_fp$recTds_fp <- as.numeric(projections_fp$recTds_fp)
projections_fp$fumbles_fp <- as.numeric(projections_fp$fumbles_fp)
projections_fp$pts_fp <- as.numeric(projections_fp$pts_fp)
projections_fp$rec_fp
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/FantasyPros Projections.R', echo=TRUE)
projections_fp$rec_fp
load(paste(getwd(),"/Data/FantasyPros-Projections-2013.RData", sep=""))
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/Shiny.R', echo=TRUE)
shinyData
names(shinyData)
runApp()
runApp("~/shinyapp")
setwd("./shinyapp")
runApp()
numQBs <- 1
numRBs <- 2
numWRs <- 2
numTEs <- 1
numWRTEs <- 0
numWRRBs <- 0
numWRRBTEs <- 1
numQBWRRBTEs <- 0
### Calculations
#Default inputs
leagueCap <- 200
numTotalPlayers <- 20
passYdsMultiplier <- 25
passTdsMultiplier <- 4
passIntMultiplier <- -2
rushYdsMultiplier <- 10
rushTdsMultiplier <- 6
recMultiplier <- 0
recYdsMultiplier <- 10
recTdsMultiplier <- 6
twoPtsMultiplier <- 2
fumbleMulitplier <- -2
maxRisk <- 5
numQBs <- 1
numRBs <- 2
numWRs <- 2
numTEs <- 1
numWRTEs <- 0
numWRRBs <- 0
numWRRBTEs <- 1
numQBWRRBTEs <- 0
shinyData$projectedCost
shinyData$projectedCost[shinyData$overallRank <= 33] <- ceiling(shinyData$avgCost[shinyData$overallRank <= 33] * (leagueCap/200) * 1.1)
shinyData$projectedCost[shinyData$overallRank >= 34 & shinyData$overallRank <= 66] <- ceiling(shinyData$avgCost[shinyData$overallRank >= 34 & shinyData$overallRank <= 66] * (leagueCap/200) * 1.0)
shinyData$projectedCost[shinyData$overallRank >= 67] <- ceiling(shinyData$avgCost[shinyData$overallRank >= 67] * (leagueCap/200) * 0.9)
shinyData$projectedCost
shinyData$projectedCost[shinyData$overallRank <= 33]
shinyData$overallRank
shinyData$projectedCost[shinyData$overallRank <= 33] <- ceiling(shinyData$cost[shinyData$overallRank <= 33] * (leagueCap/200) * 1.1)
shinyData$projectedCost[shinyData$overallRank >= 34 & shinyData$overallRank <= 66] <- ceiling(shinyData$cost[shinyData$overallRank >= 34 & shinyData$overallRank <= 66] * (leagueCap/200) * 1.0)
shinyData$projectedCost[shinyData$overallRank >= 67] <- ceiling(shinyData$cost[shinyData$overallRank >= 67] * (leagueCap/200) * 0.9)
shinyData$projectedCost
shinyData$projectedCost[is.na(shinyData$projectedCost)==TRUE] <- 1
shinyData$projectedCost[shinyData$projectedCost==0] <- 1
shinyData$projectedCost
minQBs <- numQBs
maxQBs <- numQBs + numQBWRRBTEs
minRBs <- numRBs
maxRBs <- numRBs + numWRRBs + numWRRBTEs + numQBWRRBTEs
minWRs <- numWRs
maxWRs <- numWRs + numWRTEs + numWRRBs + numWRRBTEs + numQBWRRBTEs
minTEs <- numTEs
maxTEs <- numTEs + numWRTEs + numWRRBTEs + numQBWRRBTEs
numStarters <- numQBs + numRBs + numWRs + numTEs + numWRRBs + numWRTEs + numWRRBTEs + numQBWRRBTEs
minQBs
maxQBs
minRBs
maxRBs
minWRs
maxWRs
minTEs
maxTEs
numStarters
maxAvailable <- leagueCap - (numTotalPlayers - numStarters)
maxAvailable
shinyData$passYdsPts <- shinyData$passYds*passYdsMultiplier
shinyData$passYdsPts
shinyData$passYdsPts <- shinyData$passYds*passYdsMultiplier
shinyData$passTdsPts <- shinyData$passTds*passTdsMultiplier
shinyData$passIntPts <- shinyData$passInt*passIntMultiplier
shinyData$rushYdsPts <- shinyData$rushYds*rushYdsMultiplier
shinyData$rushTdsPts <- shinyData$rushTds*rushTdsMultiplier
shinyData$recPts <- shinyData$rec*recMultiplier
shinyData$recYdsPts <- shinyData$recYds*recYdsMultiplier
shinyData$recTdsPts <- shinyData$recTds*recTdsMultiplier
shinyData$twoPtsPts <- shinyData$twoPts*twoPtsMultiplier
shinyData$fumblesPts <- shinyData$fumbles*fumbleMulitplier
shinyData$passYdsPts
shinyData$passTdsPts
'shinyData$passIntPts'
shinyData$passIntPts
shinyData$rushYdsPts
shinyData$rushTdsPts
rushYdsMultiplier
shinyData$rushYds
rushYdsMultiplier <- 1/rushYdsMultiplier
recYdsMultiplier <- 1/recYdsMultiplier
shinyData$passYdsPts <- shinyData$passYds*passYdsMultiplier
shinyData$passTdsPts <- shinyData$passTds*passTdsMultiplier
shinyData$passIntPts <- shinyData$passInt*passIntMultiplier
shinyData$rushYdsPts <- shinyData$rushYds*rushYdsMultiplier
shinyData$rushTdsPts <- shinyData$rushTds*rushTdsMultiplier
shinyData$recPts <- shinyData$rec*recMultiplier
shinyData$recYdsPts <- shinyData$recYds*recYdsMultiplier
shinyData$recTdsPts <- shinyData$recTds*recTdsMultiplier
shinyData$twoPtsPts <- shinyData$twoPts*twoPtsMultiplier
shinyData$fumblesPts <- shinyData$fumbles*fumbleMulitplier
shinyData$rushYdsPts
shinyData$rushTdsPts
shinyData$recPts
shinyData$recYdsPts
shinyData$recTdsPts
shinyData$twoPtsPts
shinyData$fumblesPts
shinyData$passYdsPts <- shinyData$passYds*passYdsMultiplier
shinyData$passTdsPts <- shinyData$passTds*passTdsMultiplier
shinyData$passIntPts <- shinyData$passInt*passIntMultiplier
shinyData$rushYdsPts <- shinyData$rushYds*rushYdsMultiplier
shinyData$rushTdsPts <- shinyData$rushTds*rushTdsMultiplier
shinyData$recPts <- shinyData$rec*recMultiplier
shinyData$recYdsPts <- shinyData$recYds*recYdsMultiplier
shinyData$recTdsPts <- shinyData$recTds*recTdsMultiplier
shinyData$twoPtsPts <- shinyData$twoPts*twoPtsMultiplier
shinyData$fumblesPts <- shinyData$fumbles*fumbleMulitplier
shinyData$projectedPts <- rowSums(projections[,c("passYdsPts","passTdsPts","passIntPts","rushYdsPts","rushTdsPts","recPts","recYdsPts","recTdsPts","twoPtsPts","fumblesPts")], na.rm=T)
shinyData$projectedPts <- rowSums(shinyData[,c("passYdsPts","passTdsPts","passIntPts","rushYdsPts","rushTdsPts","recPts","recYdsPts","recTdsPts","twoPtsPts","fumblesPts")], na.rm=T)
shinyData$projectedPts
shinyData$passYdsPts
rushYdsMultiplier <- 1/rushYdsMultiplier
rushYdsMultiplier
passYdsMultiplier <- 25
passTdsMultiplier <- 4
passIntMultiplier <- -2
rushYdsMultiplier <- 10
rushTdsMultiplier <- 6
recMultiplier <- 0
recYdsMultiplier <- 10
recTdsMultiplier <- 6
twoPtsMultiplier <- 2
fumbleMulitplier <- -2
passYdsMultiplier <- 1/passYdsMultiplier
rushYdsMultiplier <- 1/rushYdsMultiplier
recYdsMultiplier <- 1/recYdsMultiplier
shinyData$passYdsPts <- shinyData$passYds*passYdsMultiplier
shinyData$passTdsPts <- shinyData$passTds*passTdsMultiplier
shinyData$passIntPts <- shinyData$passInt*passIntMultiplier
shinyData$rushYdsPts <- shinyData$rushYds*rushYdsMultiplier
shinyData$rushTdsPts <- shinyData$rushTds*rushTdsMultiplier
shinyData$recPts <- shinyData$rec*recMultiplier
shinyData$recYdsPts <- shinyData$recYds*recYdsMultiplier
shinyData$recTdsPts <- shinyData$recTds*recTdsMultiplier
shinyData$twoPtsPts <- shinyData$twoPts*twoPtsMultiplier
shinyData$fumblesPts <- shinyData$fumbles*fumbleMulitplier
shinyData$projectedPts <- rowSums(shinyData[,c("passYdsPts","passTdsPts","passIntPts","rushYdsPts","rushTdsPts","recPts","recYdsPts","recTdsPts","twoPtsPts","fumblesPts")], na.rm=T)
shinyData$projectedPts
num.players <- length(shinyData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(shinyData$pos == "QB"),
as.numeric(shinyData$pos == "QB"),
as.numeric(shinyData$pos == "RB"),
as.numeric(shinyData$pos == "RB"),
as.numeric(shinyData$pos == "WR"),
as.numeric(shinyData$pos == "WR"),
as.numeric(shinyData$pos == "TE"),
as.numeric(shinyData$pos == "TE"),
diag(shinyData$risk),                 # player's risk
shinyData$projectedCost,              # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c(">=",
"<=",
">=",
"<=",
">=",
"<=",
">=",
"<=",
rep("<=", num.players),
"<=",
"==")
b <- c(minQBs,
maxQBs,
minRBs,
maxRBs,
minWRs,
maxWRs,
minTEs,
maxTEs,
rep(maxRisk, num.players),
maxAvailable,
numStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol
Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
str(shinyData)
sol <- Rglpk_solve_LP(obj = shinyData$projectedPts, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol
sol$playerInfo <- as.data.frame(merge(shinyData[shinyData$name %in% shinyData[sol$solution == 1,"name"],c("name","pos","team")], shinyData[sol$solution == 1,c("name","projections","risk","cost")], by="name"))
sol$playerInfo <- as.data.frame(merge(shinyData[shinyData$name %in% shinyData[sol$solution == 1,"name"],c("name","pos","team")], shinyData[sol$solution == 1,c("name","projectedPts","risk","projectedCost")], by="name"))
sol$playerInfo
shinyData$projectedCost * sol$solution
sol$totalCost <- sum(shinyData$projectedCost * sol$solution)
sol$players <- shinyData$name[sol$solution == 1]
sol
