projections_cbs <- merge(projections_cbs,te_cbs, all=TRUE)
#Convert variables from character strings to numeric
projections_cbs$fumbles_cbs <- as.numeric(projections_cbs$fumbles_cbs)
projections_cbs$pts_cbs <- as.numeric(projections_cbs$pts_cbs)
projections_cbs$rec_cbs <- as.numeric(projections_cbs$rec_cbs)
projections_cbs$recYds_cbs <- as.numeric(projections_cbs$recYds_cbs)
projections_cbs$recYdsPerRec_cbs <- as.numeric(projections_cbs$recYdsPerRec_cbs)
projections_cbs$recTds_cbs <- as.numeric(projections_cbs$recTds_cbs)
projections_cbs$rushAtt_cbs <- as.numeric(projections_cbs$rushAtt_cbs)
projections_cbs$rushYds_cbs <- as.numeric(projections_cbs$rushYds_cbs)
projections_cbs$rushYdsPerAtt_cbs <- as.numeric(projections_cbs$rushYdsPerAtt_cbs)
projections_cbs$rushTds_cbs <- as.numeric(projections_cbs$rushTds_cbs)
projections_cbs$passAtt_cbs <- as.numeric(projections_cbs$passAtt_cbs)
projections_cbs$passComp_cbs <- as.numeric(projections_cbs$passComp_cbs)
projections_cbs$passYds_cbs <- as.numeric(projections_cbs$passYds_cbs)
projections_cbs$passTds_cbs <- as.numeric(projections_cbs$passTds_cbs)
projections_cbs$passInt_cbs <- as.numeric(projections_cbs$passInt_cbs)
projections_cbs$passCompPct_cbs <- as.numeric(projections_cbs$passCompPct_cbs)
projections_cbs$passYdsPerAtt_cbs <- as.numeric(projections_cbs$passYdsPerAtt_cbs)
#Player names
projections_cbs$name <- str_sub(projections_cbs$player, end=str_locate(string=projections_cbs$player, ',')[,1]-1)
#Player teams
projections_cbs$team_cbs <- str_trim(str_sub(projections_cbs$player, start= -3))
#Calculate overall rank
projections_cbs$overallRank_cbs <- rank(-projections_cbs$pts_cbs, ties.method="min")
#Order variables in data set
projections_cbs <- projections_cbs[,c("name","pos","team_cbs","positionRank_cbs","overallRank_cbs",
"passAtt_cbs","passComp_cbs","passYds_cbs","passTds_cbs","passInt_cbs","passCompPct_cbs","passYdsPerAtt_cbs",
"rushAtt_cbs","rushYds_cbs","rushYdsPerAtt_cbs","rushTds_cbs",
"rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")]
#Order players by overall rank
projections_cbs <- projections_cbs[order(projections_cbs$overallRank_cbs),]
row.names(projections_cbs) <- 1:dim(projections_cbs)[1]
#Density Plot
ggplot(projections_cbs, aes(x=pts_cbs), fill=pos) + geom_density(fill="red", alpha=.3) + xlab("Player's Projected Points") + opts(title = "Density Plot of CBS Projected Points from 2012")
ggsave(paste(getwd(),"/Figures/CBS projections 2012.jpg", sep=""))
install.packages(c("Amelia", "bitops", "boot", "car", "caTools", "class", "cluster", "coda", "colorspace", "corrgram", "corrplot", "Deducer", "dichromat", "digest", "effects", "evaluate", "fields", "foreign", "formatR", "gclus", "gdata", "ggplot2", "gplots", "gsubfn", "gtable", "gtools", "Hmisc", "iplots", "JavaGD", "JGR", "KernSmooth", "knitr", "ltm", "MASS", "Matrix", "mgcv", "mitools", "MplusAutomation", "msm", "multcomp", "munsell", "mvtnorm", "nlme", "nnet", "parser", "plyr", "proto", "psych", "quantmod", "RcppArmadillo", "reshape2", "robustbase", "rpart", "scales", "seriation", "sfsmisc", "slam", "snow", "spam", "spatial", "stringr", "survival", "TSP", "verification", "xtable", "xts", "zoo"))
detach("package:compiler", unload=TRUE)
detach("package:corrplot", unload=TRUE)
detach("package:datasets", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:grid", unload=TRUE)
detach("package:Hmisc", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:mitools", unload=TRUE)
detach("package:mix", unload=TRUE)
detach("package:nlme", unload=TRUE)
detach("package:plyr", unload=TRUE)
detach("package:psych", unload=TRUE)
detach("package:RColorBrewer", unload=TRUE)
detach("package:reshape", unload=TRUE)
detach("package:reshape2", unload=TRUE)
detach("package:splines", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:survival", unload=TRUE)
detach("package:utils", unload=TRUE)
detach("package:xtable", unload=TRUE)
install.packages("ggplot2")
library("stats", lib.loc="C:/Program Files/R/R-2.15.0/library")
install.packages("ggplot2")
library("utils", lib.loc="C:/Program Files/R/R-2.15.0/library")
detach("package:stats", unload=TRUE)
install.packages("ggplot2")
install.packages("Hmisc")
install.packages("cluster")
library("XML")
library("stringr")
#Download fantasy football projections from cbssports.com
qb_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[7]$'NULL'
rb1_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season", stringsAsFactors = FALSE)[7]$'NULL'
rb2_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season?&start_row=51", stringsAsFactors = FALSE)[7]$'NULL'
wr1_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/WR/season", stringsAsFactors = FALSE)[7]$'NULL'
wr2_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/WR/season?&start_row=51", stringsAsFactors = FALSE)[7]$'NULL'
te_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/TE/season", stringsAsFactors = FALSE)[7]$'NULL'
#Add variable names for each object
names(qb_cbs) <- c("player_cbs","passAtt_cbs","passComp_cbs","passYds_cbs","passTds_cbs","passInt_cbs","passCompPct_cbs","passYdsPerAtt_cbs","rushAtt_cbs","rushYds_cbs","rushYdsPerAtt_cbs","rushTds_cbs","fumbles_cbs","pts_cbs")
names(rb1_cbs) <- names(rb2_cbs) <- c("player_cbs","rushAtt_cbs","rushYds_cbs","rushYdsPerAtt_cbs","rushTds_cbs","rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")
names(wr1_cbs) <- names(wr2_cbs) <- c("player_cbs","rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")
names(te_cbs) <- c("player_cbs","rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")
#Trim dimensions
qb_cbs <- qb_cbs[4:(dim(qb_cbs)[1]-1),]
rb1_cbs <- rb1_cbs[4:(dim(rb1_cbs)[1]-1),]
rb2_cbs <- rb2_cbs[2:(dim(rb2_cbs)[1]-1),]
wr1_cbs <- wr1_cbs[4:(dim(wr1_cbs)[1]-1),]
wr2_cbs <- wr2_cbs[2:(dim(wr2_cbs)[1]-1),]
te_cbs <- te_cbs[4:(dim(te_cbs)[1]-1),]
#Merge within position
rb_cbs <- rbind(rb1_cbs,rb2_cbs)
wr_cbs <- rbind(wr1_cbs,wr2_cbs)
#Add variable for player position
qb_cbs$pos <- as.factor("QB")
rb_cbs$pos <- as.factor("RB")
wr_cbs$pos <- as.factor("WR")
te_cbs$pos <- as.factor("TE")
#Calculate position rank
qb_cbs$positionRank_cbs <- 1:dim(qb_cbs)[1]
rb_cbs$positionRank_cbs <- 1:dim(rb_cbs)[1]
wr_cbs$positionRank_cbs <- 1:dim(wr_cbs)[1]
te_cbs$positionRank_cbs <- 1:dim(te_cbs)[1]
#Merge across positions
projections_cbs <- merge(qb_cbs,rb_cbs, all=TRUE)
projections_cbs <- merge(projections_cbs,wr_cbs, all=TRUE)
projections_cbs <- merge(projections_cbs,te_cbs, all=TRUE)
#Convert variables from character strings to numeric
projections_cbs$fumbles_cbs <- as.numeric(projections_cbs$fumbles_cbs)
projections_cbs$pts_cbs <- as.numeric(projections_cbs$pts_cbs)
projections_cbs$rec_cbs <- as.numeric(projections_cbs$rec_cbs)
projections_cbs$recYds_cbs <- as.numeric(projections_cbs$recYds_cbs)
projections_cbs$recYdsPerRec_cbs <- as.numeric(projections_cbs$recYdsPerRec_cbs)
projections_cbs$recTds_cbs <- as.numeric(projections_cbs$recTds_cbs)
projections_cbs$rushAtt_cbs <- as.numeric(projections_cbs$rushAtt_cbs)
projections_cbs$rushYds_cbs <- as.numeric(projections_cbs$rushYds_cbs)
projections_cbs$rushYdsPerAtt_cbs <- as.numeric(projections_cbs$rushYdsPerAtt_cbs)
projections_cbs$rushTds_cbs <- as.numeric(projections_cbs$rushTds_cbs)
projections_cbs$passAtt_cbs <- as.numeric(projections_cbs$passAtt_cbs)
projections_cbs$passComp_cbs <- as.numeric(projections_cbs$passComp_cbs)
projections_cbs$passYds_cbs <- as.numeric(projections_cbs$passYds_cbs)
projections_cbs$passTds_cbs <- as.numeric(projections_cbs$passTds_cbs)
projections_cbs$passInt_cbs <- as.numeric(projections_cbs$passInt_cbs)
projections_cbs$passCompPct_cbs <- as.numeric(projections_cbs$passCompPct_cbs)
projections_cbs$passYdsPerAtt_cbs <- as.numeric(projections_cbs$passYdsPerAtt_cbs)
#Player names
projections_cbs$name <- str_sub(projections_cbs$player, end=str_locate(string=projections_cbs$player, ',')[,1]-1)
#Player teams
projections_cbs$team_cbs <- str_trim(str_sub(projections_cbs$player, start= -3))
#Calculate overall rank
projections_cbs$overallRank_cbs <- rank(-projections_cbs$pts_cbs, ties.method="min")
#Order variables in data set
projections_cbs <- projections_cbs[,c("name","pos","team_cbs","positionRank_cbs","overallRank_cbs",
"passAtt_cbs","passComp_cbs","passYds_cbs","passTds_cbs","passInt_cbs","passCompPct_cbs","passYdsPerAtt_cbs",
"rushAtt_cbs","rushYds_cbs","rushYdsPerAtt_cbs","rushTds_cbs",
"rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")]
#Order players by overall rank
projections_cbs <- projections_cbs[order(projections_cbs$overallRank_cbs),]
row.names(projections_cbs) <- 1:dim(projections_cbs)[1]
ggplot(projections_cbs, aes(x=pts_cbs), fill=pos) + geom_density(fill="red", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of CBS Projected Points from 2012") #opts(title = "Density Plot of CBS Projected Points from 2012")
library("XML")
install.packages("XML")
install.packages("stringr")
install.packages("ggplot2")
library("XML")
library("stringr")
library("ggplot2")
#Download fantasy football projections from ESPN.com
qb_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=0", stringsAsFactors = FALSE)$playertable_0
rb1_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2", stringsAsFactors = FALSE)$playertable_0
rb2_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2&startIndex=40", stringsAsFactors = FALSE)$playertable_0
rb3_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2&startIndex=80", stringsAsFactors = FALSE)$playertable_0
wr1_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4", stringsAsFactors = FALSE)$playertable_0
wr2_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4&startIndex=40", stringsAsFactors = FALSE)$playertable_0
wr3_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4&startIndex=80", stringsAsFactors = FALSE)$playertable_0
te_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=6", stringsAsFactors = FALSE)$playertable_0
#Add variable names for each object
fileList <- c("qb_espn","rb1_espn","rb2_espn","rb3_espn","wr1_espn","wr2_espn","wr3_espn","te_espn")
for(i in 1:length(fileList)){
assign(fileList[i],get(fileList[i])[2:dim(get(fileList[i]))[1],])
t <- get(fileList[i])
names(t) <-  c("positionRank_espn","player_espn","passCompAtt_espn","passYds_espn","passTds_espn","passInt_espn","rush_espn","rushYds_espn","rushTds_espn","rec_espn","recYds_espn","recTds_espn","pts_espn")
assign(fileList[i], t)
}
#Merge players within position
rb_espn <- rbind(rb1_espn,rb2_espn,rb3_espn)
wr_espn <- rbind(wr1_espn,wr2_espn,wr3_espn)
#Add variable for player position
qb_espn$pos <- as.factor("QB")
rb_espn$pos <- as.factor("RB")
wr_espn$pos <- as.factor("WR")
te_espn$pos <- as.factor("TE")
#Merge players across positions
projections_espn <- rbind(qb_espn,rb_espn,wr_espn,te_espn)
#Separate pass completions from attempts
projections_espn$passComp_espn <- as.numeric(str_sub(string=projections_espn$passCompAtt_espn, end=str_locate(string=projections_espn$passCompAtt_espn, '/')[,1]-1))
projections_espn$passAtt_espn <- as.numeric(str_sub(string=projections_espn$passCompAtt_espn, start=str_locate(string=projections_espn$passCompAtt_espn, '/')[,1]+1))
#Convert variables from character strings to numeric
projections_espn$positionRank_espn <- as.numeric(projections_espn$positionRank_espn)
projections_espn$passYds_espn <- as.numeric(projections_espn$passYds_espn)
projections_espn$passTds_espn <- as.numeric(projections_espn$passTds_espn)
projections_espn$passInt_espn <- as.numeric(projections_espn$passInt_espn)
projections_espn$rush_espn <- as.numeric(projections_espn$rush_espn)
projections_espn$rushYds_espn <- as.numeric(projections_espn$rushYds_espn)
projections_espn$rushTds_espn <- as.numeric(projections_espn$rushTds_espn)
projections_espn$rec_espn <- as.numeric(projections_espn$rec_espn)
projections_espn$recYds_espn <- as.numeric(projections_espn$recYds_espn)
projections_espn$recTds_espn <- as.numeric(projections_espn$recTds_espn)
projections_espn$pts_espn <- as.numeric(projections_espn$pts_espn)
#Add fumble variable
projections_espn$fumbles_espn <- NA
#Player names
projections_espn$name <- str_sub(projections_espn$player_espn, end=str_locate(string=projections_espn$player_espn, ',')[,1]-1)
projections_espn$name <- str_replace_all(projections_espn$name, "\\*", "")
projections_espn[which(projections_espn$name=="Steve Johnson"),"name"] <- "Stevie Johnson"
#Player teams
projections_espn$team_espn <- str_sub(projections_espn$player_espn, start=str_locate(string=projections_espn$player_espn, ',')[,1]+2, end = str_locate(string=projections_espn$player_espn, ',')[,1]+4)
projections_espn$team_espn <- str_trim(projections_espn$team_espn, side="right")
projections_espn$team_espn <- toupper(projections_espn$team_espn)
projections_espn$team_espn[projections_espn$team_espn=="WSH"] <- "WAS"
#Remove duplicate cases
projections_espn[duplicated(projections_espn$name),]
projections_espn <- projections_espn[-which(projections_espn$name=="Dexter McCluster" & projections_espn$pos=="RB"),]
#Calculate overall rank
projections_espn$overallRank_espn <- rank(-projections_espn$pts_espn, ties.method="min")
#Order variables in data set
projections_espn <- projections_espn[,c("name","pos","team_espn","positionRank_espn","overallRank_espn",
"passAtt_espn","passComp_espn","passYds_espn","passTds_espn","passInt_espn",
"rushYds_espn","rushTds_espn","recYds_espn","recTds_espn","fumbles_espn","pts_espn")]
#Order players by overall rank
projections_espn <- projections_espn[order(projections_espn$overallRank_espn),]
row.names(projections_espn) <- 1:dim(projections_espn)[1]
#Density Plot
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density(fill="blue", alpha=.3) + xlab("Player's Projected Points") + opts(title = "Density Plot of ESPN Projected Points from 2012")
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density(fill="blue", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of ESPN Projected Points from 2012") #opts(title = "Density Plot of ESPN Projected Points from 2012")
update.packages
?update.packages
update.packages(ask=FALSE)
#Load libraries
library("XML")
library("stringr")
library("ggplot2")
#Download fantasy football projections from cbssports.com
qb_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[7]$'NULL'
rb1_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season", stringsAsFactors = FALSE)[7]$'NULL'
rb2_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season?&start_row=51", stringsAsFactors = FALSE)[7]$'NULL'
wr1_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/WR/season", stringsAsFactors = FALSE)[7]$'NULL'
wr2_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/WR/season?&start_row=51", stringsAsFactors = FALSE)[7]$'NULL'
te_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/TE/season", stringsAsFactors = FALSE)[7]$'NULL'
#Add variable names for each object
names(qb_cbs) <- c("player_cbs","passAtt_cbs","passComp_cbs","passYds_cbs","passTds_cbs","passInt_cbs","passCompPct_cbs","passYdsPerAtt_cbs","rushAtt_cbs","rushYds_cbs","rushYdsPerAtt_cbs","rushTds_cbs","fumbles_cbs","pts_cbs")
names(rb1_cbs) <- names(rb2_cbs) <- c("player_cbs","rushAtt_cbs","rushYds_cbs","rushYdsPerAtt_cbs","rushTds_cbs","rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")
names(wr1_cbs) <- names(wr2_cbs) <- c("player_cbs","rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")
names(te_cbs) <- c("player_cbs","rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")
#Trim dimensions
qb_cbs <- qb_cbs[4:(dim(qb_cbs)[1]-1),]
rb1_cbs <- rb1_cbs[4:(dim(rb1_cbs)[1]-1),]
rb2_cbs <- rb2_cbs[2:(dim(rb2_cbs)[1]-1),]
wr1_cbs <- wr1_cbs[4:(dim(wr1_cbs)[1]-1),]
wr2_cbs <- wr2_cbs[2:(dim(wr2_cbs)[1]-1),]
te_cbs <- te_cbs[4:(dim(te_cbs)[1]-1),]
#Merge within position
rb_cbs <- rbind(rb1_cbs,rb2_cbs)
wr_cbs <- rbind(wr1_cbs,wr2_cbs)
#Add variable for player position
qb_cbs$pos <- as.factor("QB")
rb_cbs$pos <- as.factor("RB")
wr_cbs$pos <- as.factor("WR")
te_cbs$pos <- as.factor("TE")
#Calculate position rank
qb_cbs$positionRank_cbs <- 1:dim(qb_cbs)[1]
rb_cbs$positionRank_cbs <- 1:dim(rb_cbs)[1]
wr_cbs$positionRank_cbs <- 1:dim(wr_cbs)[1]
te_cbs$positionRank_cbs <- 1:dim(te_cbs)[1]
#Merge across positions
projections_cbs <- merge(qb_cbs,rb_cbs, all=TRUE)
projections_cbs <- merge(projections_cbs,wr_cbs, all=TRUE)
projections_cbs <- merge(projections_cbs,te_cbs, all=TRUE)
#Convert variables from character strings to numeric
projections_cbs$fumbles_cbs <- as.numeric(projections_cbs$fumbles_cbs)
projections_cbs$pts_cbs <- as.numeric(projections_cbs$pts_cbs)
projections_cbs$rec_cbs <- as.numeric(projections_cbs$rec_cbs)
projections_cbs$recYds_cbs <- as.numeric(projections_cbs$recYds_cbs)
projections_cbs$recYdsPerRec_cbs <- as.numeric(projections_cbs$recYdsPerRec_cbs)
projections_cbs$recTds_cbs <- as.numeric(projections_cbs$recTds_cbs)
projections_cbs$rushAtt_cbs <- as.numeric(projections_cbs$rushAtt_cbs)
projections_cbs$rushYds_cbs <- as.numeric(projections_cbs$rushYds_cbs)
projections_cbs$rushYdsPerAtt_cbs <- as.numeric(projections_cbs$rushYdsPerAtt_cbs)
projections_cbs$rushTds_cbs <- as.numeric(projections_cbs$rushTds_cbs)
projections_cbs$passAtt_cbs <- as.numeric(projections_cbs$passAtt_cbs)
projections_cbs$passComp_cbs <- as.numeric(projections_cbs$passComp_cbs)
projections_cbs$passYds_cbs <- as.numeric(projections_cbs$passYds_cbs)
projections_cbs$passTds_cbs <- as.numeric(projections_cbs$passTds_cbs)
projections_cbs$passInt_cbs <- as.numeric(projections_cbs$passInt_cbs)
projections_cbs$passCompPct_cbs <- as.numeric(projections_cbs$passCompPct_cbs)
projections_cbs$passYdsPerAtt_cbs <- as.numeric(projections_cbs$passYdsPerAtt_cbs)
#Player names
projections_cbs$name <- str_sub(projections_cbs$player, end=str_locate(string=projections_cbs$player, ',')[,1]-1)
#Player teams
projections_cbs$team_cbs <- str_trim(str_sub(projections_cbs$player, start= -3))
#Calculate overall rank
projections_cbs$overallRank_cbs <- rank(-projections_cbs$pts_cbs, ties.method="min")
#Order variables in data set
projections_cbs <- projections_cbs[,c("name","pos","team_cbs","positionRank_cbs","overallRank_cbs",
"passAtt_cbs","passComp_cbs","passYds_cbs","passTds_cbs","passInt_cbs","passCompPct_cbs","passYdsPerAtt_cbs",
"rushAtt_cbs","rushYds_cbs","rushYdsPerAtt_cbs","rushTds_cbs",
"rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")]
#Order players by overall rank
projections_cbs <- projections_cbs[order(projections_cbs$overallRank_cbs),]
row.names(projections_cbs) <- 1:dim(projections_cbs)[1]
#Density Plot
ggplot(projections_cbs, aes(x=pts_cbs), fill=pos) + geom_density(fill="red", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of CBS Projected Points from 2012")
ggsave(paste(getwd(),"/Figures/CBS projections 2012.jpg", sep=""))
ggplot(projections_cbs, aes(x=pts_cbs), fill=pos) + geom_density(fill="red", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of CBS Projected Points from 2012")
projections_cbs
library("XML")
library("stringr")
library("ggplot2")
#Download fantasy football projections from ESPN.com
qb_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=0", stringsAsFactors = FALSE)$playertable_0
rb1_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2", stringsAsFactors = FALSE)$playertable_0
rb2_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2&startIndex=40", stringsAsFactors = FALSE)$playertable_0
rb3_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2&startIndex=80", stringsAsFactors = FALSE)$playertable_0
wr1_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4", stringsAsFactors = FALSE)$playertable_0
wr2_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4&startIndex=40", stringsAsFactors = FALSE)$playertable_0
wr3_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4&startIndex=80", stringsAsFactors = FALSE)$playertable_0
te_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=6", stringsAsFactors = FALSE)$playertable_0
#Add variable names for each object
fileList <- c("qb_espn","rb1_espn","rb2_espn","rb3_espn","wr1_espn","wr2_espn","wr3_espn","te_espn")
for(i in 1:length(fileList)){
assign(fileList[i],get(fileList[i])[2:dim(get(fileList[i]))[1],])
t <- get(fileList[i])
names(t) <-  c("positionRank_espn","player_espn","passCompAtt_espn","passYds_espn","passTds_espn","passInt_espn","rush_espn","rushYds_espn","rushTds_espn","rec_espn","recYds_espn","recTds_espn","pts_espn")
assign(fileList[i], t)
}
#Merge players within position
rb_espn <- rbind(rb1_espn,rb2_espn,rb3_espn)
wr_espn <- rbind(wr1_espn,wr2_espn,wr3_espn)
#Add variable for player position
qb_espn$pos <- as.factor("QB")
rb_espn$pos <- as.factor("RB")
wr_espn$pos <- as.factor("WR")
te_espn$pos <- as.factor("TE")
#Merge players across positions
projections_espn <- rbind(qb_espn,rb_espn,wr_espn,te_espn)
#Separate pass completions from attempts
projections_espn$passComp_espn <- as.numeric(str_sub(string=projections_espn$passCompAtt_espn, end=str_locate(string=projections_espn$passCompAtt_espn, '/')[,1]-1))
projections_espn$passAtt_espn <- as.numeric(str_sub(string=projections_espn$passCompAtt_espn, start=str_locate(string=projections_espn$passCompAtt_espn, '/')[,1]+1))
#Convert variables from character strings to numeric
projections_espn$positionRank_espn <- as.numeric(projections_espn$positionRank_espn)
projections_espn$passYds_espn <- as.numeric(projections_espn$passYds_espn)
projections_espn$passTds_espn <- as.numeric(projections_espn$passTds_espn)
projections_espn$passInt_espn <- as.numeric(projections_espn$passInt_espn)
projections_espn$rush_espn <- as.numeric(projections_espn$rush_espn)
projections_espn$rushYds_espn <- as.numeric(projections_espn$rushYds_espn)
projections_espn$rushTds_espn <- as.numeric(projections_espn$rushTds_espn)
projections_espn$rec_espn <- as.numeric(projections_espn$rec_espn)
projections_espn$recYds_espn <- as.numeric(projections_espn$recYds_espn)
projections_espn$recTds_espn <- as.numeric(projections_espn$recTds_espn)
projections_espn$pts_espn <- as.numeric(projections_espn$pts_espn)
#Add fumble variable
projections_espn$fumbles_espn <- NA
#Player names
projections_espn$name <- str_sub(projections_espn$player_espn, end=str_locate(string=projections_espn$player_espn, ',')[,1]-1)
projections_espn$name <- str_replace_all(projections_espn$name, "\\*", "")
projections_espn[which(projections_espn$name=="Steve Johnson"),"name"] <- "Stevie Johnson"
#Player teams
projections_espn$team_espn <- str_sub(projections_espn$player_espn, start=str_locate(string=projections_espn$player_espn, ',')[,1]+2, end = str_locate(string=projections_espn$player_espn, ',')[,1]+4)
projections_espn$team_espn <- str_trim(projections_espn$team_espn, side="right")
projections_espn$team_espn <- toupper(projections_espn$team_espn)
projections_espn$team_espn[projections_espn$team_espn=="WSH"] <- "WAS"
#Remove duplicate cases
projections_espn[duplicated(projections_espn$name),]
projections_espn <- projections_espn[-which(projections_espn$name=="Dexter McCluster" & projections_espn$pos=="RB"),]
#Calculate overall rank
projections_espn$overallRank_espn <- rank(-projections_espn$pts_espn, ties.method="min")
#Order variables in data set
projections_espn <- projections_espn[,c("name","pos","team_espn","positionRank_espn","overallRank_espn",
"passAtt_espn","passComp_espn","passYds_espn","passTds_espn","passInt_espn",
"rushYds_espn","rushTds_espn","recYds_espn","recTds_espn","fumbles_espn","pts_espn")]
#Order players by overall rank
projections_espn <- projections_espn[order(projections_espn$overallRank_espn),]
row.names(projections_espn) <- 1:dim(projections_espn)[1]
#Density Plot
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density(fill="blue", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of ESPN Projected Points from 2012")
library("XML")
library("stringr")
library("ggplot2")
#Download fantasy football projections from cbssports.com
qb_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[7]$'NULL'
rb1_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season", stringsAsFactors = FALSE)[7]$'NULL'
rb2_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season?&start_row=51", stringsAsFactors = FALSE)[7]$'NULL'
wr1_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/WR/season", stringsAsFactors = FALSE)[7]$'NULL'
wr2_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/WR/season?&start_row=51", stringsAsFactors = FALSE)[7]$'NULL'
te_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/TE/season", stringsAsFactors = FALSE)[7]$'NULL'
#Add variable names for each object
names(qb_cbs) <- c("player_cbs","passAtt_cbs","passComp_cbs","passYds_cbs","passTds_cbs","passInt_cbs","passCompPct_cbs","passYdsPerAtt_cbs","rushAtt_cbs","rushYds_cbs","rushYdsPerAtt_cbs","rushTds_cbs","fumbles_cbs","pts_cbs")
names(rb1_cbs) <- names(rb2_cbs) <- c("player_cbs","rushAtt_cbs","rushYds_cbs","rushYdsPerAtt_cbs","rushTds_cbs","rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")
names(wr1_cbs) <- names(wr2_cbs) <- c("player_cbs","rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")
names(te_cbs) <- c("player_cbs","rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")
#Trim dimensions
qb_cbs <- qb_cbs[4:(dim(qb_cbs)[1]-1),]
rb1_cbs <- rb1_cbs[4:(dim(rb1_cbs)[1]-1),]
rb2_cbs <- rb2_cbs[2:(dim(rb2_cbs)[1]-1),]
wr1_cbs <- wr1_cbs[4:(dim(wr1_cbs)[1]-1),]
wr2_cbs <- wr2_cbs[2:(dim(wr2_cbs)[1]-1),]
te_cbs <- te_cbs[4:(dim(te_cbs)[1]-1),]
#Merge within position
rb_cbs <- rbind(rb1_cbs,rb2_cbs)
wr_cbs <- rbind(wr1_cbs,wr2_cbs)
#Add variable for player position
qb_cbs$pos <- as.factor("QB")
rb_cbs$pos <- as.factor("RB")
wr_cbs$pos <- as.factor("WR")
te_cbs$pos <- as.factor("TE")
#Calculate position rank
qb_cbs$positionRank_cbs <- 1:dim(qb_cbs)[1]
rb_cbs$positionRank_cbs <- 1:dim(rb_cbs)[1]
wr_cbs$positionRank_cbs <- 1:dim(wr_cbs)[1]
te_cbs$positionRank_cbs <- 1:dim(te_cbs)[1]
#Merge across positions
projections_cbs <- merge(qb_cbs,rb_cbs, all=TRUE)
projections_cbs <- merge(projections_cbs,wr_cbs, all=TRUE)
projections_cbs <- merge(projections_cbs,te_cbs, all=TRUE)
#Convert variables from character strings to numeric
projections_cbs$fumbles_cbs <- as.numeric(projections_cbs$fumbles_cbs)
projections_cbs$pts_cbs <- as.numeric(projections_cbs$pts_cbs)
projections_cbs$rec_cbs <- as.numeric(projections_cbs$rec_cbs)
projections_cbs$recYds_cbs <- as.numeric(projections_cbs$recYds_cbs)
projections_cbs$recYdsPerRec_cbs <- as.numeric(projections_cbs$recYdsPerRec_cbs)
projections_cbs$recTds_cbs <- as.numeric(projections_cbs$recTds_cbs)
projections_cbs$rushAtt_cbs <- as.numeric(projections_cbs$rushAtt_cbs)
projections_cbs$rushYds_cbs <- as.numeric(projections_cbs$rushYds_cbs)
projections_cbs$rushYdsPerAtt_cbs <- as.numeric(projections_cbs$rushYdsPerAtt_cbs)
projections_cbs$rushTds_cbs <- as.numeric(projections_cbs$rushTds_cbs)
projections_cbs$passAtt_cbs <- as.numeric(projections_cbs$passAtt_cbs)
projections_cbs$passComp_cbs <- as.numeric(projections_cbs$passComp_cbs)
projections_cbs$passYds_cbs <- as.numeric(projections_cbs$passYds_cbs)
projections_cbs$passTds_cbs <- as.numeric(projections_cbs$passTds_cbs)
projections_cbs$passInt_cbs <- as.numeric(projections_cbs$passInt_cbs)
projections_cbs$passCompPct_cbs <- as.numeric(projections_cbs$passCompPct_cbs)
projections_cbs$passYdsPerAtt_cbs <- as.numeric(projections_cbs$passYdsPerAtt_cbs)
#Player names
projections_cbs$name <- str_sub(projections_cbs$player, end=str_locate(string=projections_cbs$player, ',')[,1]-1)
#Player teams
projections_cbs$team_cbs <- str_trim(str_sub(projections_cbs$player, start= -3))
#Calculate overall rank
projections_cbs$overallRank_cbs <- rank(-projections_cbs$pts_cbs, ties.method="min")
#Order variables in data set
projections_cbs <- projections_cbs[,c("name","pos","team_cbs","positionRank_cbs","overallRank_cbs",
"passAtt_cbs","passComp_cbs","passYds_cbs","passTds_cbs","passInt_cbs","passCompPct_cbs","passYdsPerAtt_cbs",
"rushAtt_cbs","rushYds_cbs","rushYdsPerAtt_cbs","rushTds_cbs",
"rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")]
#Order players by overall rank
projections_cbs <- projections_cbs[order(projections_cbs$overallRank_cbs),]
row.names(projections_cbs) <- 1:dim(projections_cbs)[1]
#Density Plot
ggplot(projections_cbs, aes(x=pts_cbs), fill=pos) + geom_density(fill="red", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of CBS Projected Points from 2012")
ggsave(paste(getwd(),"/Figures/CBS projections 2012.jpg", sep=""))
library("XML")
library("stringr")
library("ggplot2")
#Download fantasy football projections from ESPN.com
qb_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=0", stringsAsFactors = FALSE)$playertable_0
library("XML")
install.packages("foreign")
library("XML")
library("stringr")
library("ggplot2")
qb_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=0", stringsAsFactors = FALSE)$playertable_0
rb1_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2", stringsAsFactors = FALSE)$playertable_0
rb2_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2&startIndex=40", stringsAsFactors = FALSE)$playertable_0
rb3_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2&startIndex=80", stringsAsFactors = FALSE)$playertable_0
wr1_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4", stringsAsFactors = FALSE)$playertable_0
wr2_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4&startIndex=40", stringsAsFactors = FALSE)$playertable_0
wr3_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4&startIndex=80", stringsAsFactors = FALSE)$playertable_0
te_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=6", stringsAsFactors = FALSE)$playertable_0
#Add variable names for each object
fileList <- c("qb_espn","rb1_espn","rb2_espn","rb3_espn","wr1_espn","wr2_espn","wr3_espn","te_espn")
for(i in 1:length(fileList)){
assign(fileList[i],get(fileList[i])[2:dim(get(fileList[i]))[1],])
t <- get(fileList[i])
names(t) <-  c("positionRank_espn","player_espn","passCompAtt_espn","passYds_espn","passTds_espn","passInt_espn","rush_espn","rushYds_espn","rushTds_espn","rec_espn","recYds_espn","recTds_espn","pts_espn")
assign(fileList[i], t)
}
#Merge players within position
rb_espn <- rbind(rb1_espn,rb2_espn,rb3_espn)
wr_espn <- rbind(wr1_espn,wr2_espn,wr3_espn)
#Add variable for player position
qb_espn$pos <- as.factor("QB")
rb_espn$pos <- as.factor("RB")
wr_espn$pos <- as.factor("WR")
te_espn$pos <- as.factor("TE")
#Merge players across positions
projections_espn <- rbind(qb_espn,rb_espn,wr_espn,te_espn)
#Separate pass completions from attempts
projections_espn$passComp_espn <- as.numeric(str_sub(string=projections_espn$passCompAtt_espn, end=str_locate(string=projections_espn$passCompAtt_espn, '/')[,1]-1))
projections_espn$passAtt_espn <- as.numeric(str_sub(string=projections_espn$passCompAtt_espn, start=str_locate(string=projections_espn$passCompAtt_espn, '/')[,1]+1))
#Convert variables from character strings to numeric
projections_espn$positionRank_espn <- as.numeric(projections_espn$positionRank_espn)
projections_espn$passYds_espn <- as.numeric(projections_espn$passYds_espn)
projections_espn$passTds_espn <- as.numeric(projections_espn$passTds_espn)
projections_espn$passInt_espn <- as.numeric(projections_espn$passInt_espn)
projections_espn$rush_espn <- as.numeric(projections_espn$rush_espn)
projections_espn$rushYds_espn <- as.numeric(projections_espn$rushYds_espn)
projections_espn$rushTds_espn <- as.numeric(projections_espn$rushTds_espn)
projections_espn$rec_espn <- as.numeric(projections_espn$rec_espn)
projections_espn$recYds_espn <- as.numeric(projections_espn$recYds_espn)
projections_espn$recTds_espn <- as.numeric(projections_espn$recTds_espn)
projections_espn$pts_espn <- as.numeric(projections_espn$pts_espn)
#Add fumble variable
projections_espn$fumbles_espn <- NA
#Player names
projections_espn$name <- str_sub(projections_espn$player_espn, end=str_locate(string=projections_espn$player_espn, ',')[,1]-1)
projections_espn$name <- str_replace_all(projections_espn$name, "\\*", "")
projections_espn[which(projections_espn$name=="Steve Johnson"),"name"] <- "Stevie Johnson"
#Player teams
projections_espn$team_espn <- str_sub(projections_espn$player_espn, start=str_locate(string=projections_espn$player_espn, ',')[,1]+2, end = str_locate(string=projections_espn$player_espn, ',')[,1]+4)
projections_espn$team_espn <- str_trim(projections_espn$team_espn, side="right")
projections_espn$team_espn <- toupper(projections_espn$team_espn)
projections_espn$team_espn[projections_espn$team_espn=="WSH"] <- "WAS"
#Remove duplicate cases
projections_espn[duplicated(projections_espn$name),]
projections_espn <- projections_espn[-which(projections_espn$name=="Dexter McCluster" & projections_espn$pos=="RB"),]
#Calculate overall rank
projections_espn$overallRank_espn <- rank(-projections_espn$pts_espn, ties.method="min")
#Order variables in data set
projections_espn <- projections_espn[,c("name","pos","team_espn","positionRank_espn","overallRank_espn",
"passAtt_espn","passComp_espn","passYds_espn","passTds_espn","passInt_espn",
"rushYds_espn","rushTds_espn","recYds_espn","recTds_espn","fumbles_espn","pts_espn")]
#Order players by overall rank
projections_espn <- projections_espn[order(projections_espn$overallRank_espn),]
row.names(projections_espn) <- 1:dim(projections_espn)[1]
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density(fill="blue", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of ESPN Projected Points from 2012")
