#Order variables in data set
projections <- projections[,c("name","pos","team","positionRank","overallRank","passAtt","passComp","passYds","passTds","passInt","rushYds","rushTds","recYds","recTds","pts")]
#Order players by overall rank
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:dim(projections)[1]
save(projections, file = "~/Data/ESPN-Projections-2012.RData")
getwd()
paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep="")
save(projections, file = paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep=""))
load(paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep=""))
projections
projections
projections$projectedPts <- (projections$passYds*passYdsMultiplier) + (projections$passTds*passTdsMultiplier) + (projections$passInt*passIntMultiplier) + (projections$rushYds*rushYdsMultiplier) + (projections$rushTds*rushTdsMultiplier) + (projections$recYds*recYdsMultiplier) + (projections$recTds*recTdsMultiplier)
passYdsMultiplier <- (1/25) #1 pt per 25 pass yds
passTdsMultiplier <- 4      #4 pts per pass td
passIntMultiplier <- -3     #-3 pts per INT
rushYdsMultiplier <- (1/10) #1 pt per 10 rush yds
rushTdsMultiplier <- 6      #6 pts per rush td
recYdsMultiplier <- (1/8)   #1 pt per 8 rec yds
recTdsMultiplier <- 6       #6 pts per rec td
fumlMultiplier <- -3        #-3 pts per fumble (not included in ESPN projections, however)
load(paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep=""))
#Calculate projected points for your league
projections$projectedPts <- (projections$passYds*passYdsMultiplier) + (projections$passTds*passTdsMultiplier) + (projections$passInt*passIntMultiplier) + (projections$rushYds*rushYdsMultiplier) + (projections$rushTds*rushTdsMultiplier) + (projections$recYds*recYdsMultiplier) + (projections$recTds*recTdsMultiplier)
projections
actualPoints <- read.csv(paste(getwd(),"/Data/Yahoo-actualpoints-2012.csv", sep=""))
actualPoints
actualPoints <- read.csv(paste(getwd(),"/Data/Yahoo-actualpoints-2012.csv", sep=""))
actualPoints
actualPoints[which(actualPoints$Fan.Pts!=""),]
actualPoints <- actualPoints[which(actualPoints$Fan.Pts!=""),]
str(actualPoints)
actualPoints$name <- as.character(actualPoints$Player)
actualPoints
actualPoints$actualPts <- actualPoints$Fan.Pts
actualPoints <- actualPoints[,c("name","actualPts")]
actualPoints
row.names(actualPoints) <- 1:dim(actualPoints)[1]
actualPoints
passYdsMultiplier <- (1/25) #1 pt per 25 pass yds
passTdsMultiplier <- 4      #4 pts per pass td
passIntMultiplier <- -3     #-3 pts per INT
rushYdsMultiplier <- (1/10) #1 pt per 10 rush yds
rushTdsMultiplier <- 6      #6 pts per rush td
recYdsMultiplier <- (1/8)   #1 pt per 8 rec yds
recTdsMultiplier <- 6       #6 pts per rec td
fumlMultiplier <- -3        #-3 pts per fumble (not included in ESPN projections, however)
#Load data
load(paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep=""))
projections$projectedPts <- (projections$passYds*passYdsMultiplier) + (projections$passTds*passTdsMultiplier) + (projections$passInt*passIntMultiplier) + (projections$rushYds*rushYdsMultiplier) + (projections$rushTds*rushTdsMultiplier) + (projections$recYds*recYdsMultiplier) + (projections$recTds*recTdsMultiplier)
#Save file
save(projections, file = paste(getwd(),"/Data/ESPN-LeagueProjections-2012.RData", sep=""))
load(paste(getwd(),"/Data/ESPN-LeagueProjections-2012.RData", sep=""))
actualPoints <- read.csv(paste(getwd(),"/Data/Yahoo-actualpoints-2012.csv", sep=""))
#Calculate projected points for your league
projections$projectedPts <- (projections$passYds*passYdsMultiplier) + (projections$passTds*passTdsMultiplier) + (projections$passInt*passIntMultiplier) + (projections$rushYds*rushYdsMultiplier) + (projections$rushTds*rushTdsMultiplier) + (projections$recYds*recYdsMultiplier) + (projections$recTds*recTdsMultiplier)
#Cleanup Yahoo actual points data
actualPoints <- actualPoints[which(actualPoints$Fan.Pts!=""),]
actualPoints$name <- as.character(actualPoints$Player)
actualPoints$actualPts <- actualPoints$Fan.Pts
actualPoints <- actualPoints[,c("name","actualPts")]
row.names(actualPoints) <- 1:dim(actualPoints)[1]
actualPoints
projectedWithActualPts <- merge(projections, actualPoints, by="name", all.x=TRUE)
projectedWithActualPts
duplicated(projectedWithActualPts$name)
projectedWithActualPts[!duplicated(projectedWithActualPts)]
projectedWithActualPts[!duplicated(projectedWithActualPts),]
projectedWithActualPts[!duplicated(projectedWithActualPts$name),]
projectedWithActualPts
cor.test(projectedWithActualPts$projectedPts, projectedWithActualPts$actualPts)
cor(projectedWithActualPts$projectedPts, projectedWithActualPts$actualPts)
?cor
cor(projectedWithActualPts$projectedPts, projectedWithActualPts$actualPts, use="pairwise.complete.obs")
cor(projectedWithActualPts$projectedPts, projectedWithActualPts$actualPts, use="pairwise.complete.obs")^2
save(projectedWithActualPts, file = paste(getwd(),"/Data/projectedWithActualPoints-2012.RData", sep=""))
projectedWithActualPts[which(projectedWithActualPts$projectedPts!=0),]
projectedWithActualPtsNoZeros <- projectedWithActualPts[which(projectedWithActualPts$projectedPts!=0),]
cor.test(projectedWithActualPtsNoZeros$projectedPts, projectedWithActualPtsNoZeros$actualPts) #r=.707, p<.001
cor(projectedWithActualPtsNoZeros$projectedPts, projectedWithActualPtsNoZeros$actualPts, use="pairwise.complete.obs")^2 #r-squared = .50
library("XML")
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)$`NULL`
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[2]
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[3]
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[4]
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[5]
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[6]
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[7]
qb <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[7]
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season", stringsAsFactors = FALSE)[7]
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season?&start_row=51", stringsAsFactors = FALSE)[7]
qb <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[7]
rb1 <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season", stringsAsFactors = FALSE)[7]
rb2 <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season?&start_row=51", stringsAsFactors = FALSE)[7]
wr1 <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/WR/season", stringsAsFactors = FALSE)[7]
wr2 <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/WR/season?&start_row=51", stringsAsFactors = FALSE)[7]
te <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/TE/season", stringsAsFactors = FALSE)[7]
qb
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/ESPN Projections.R', echo=TRUE)
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/CBS Projections.R', echo=TRUE)
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/Calculate League Projections.R', echo=TRUE)
load(paste(getwd(),"/Data/LeagueProjections-2012.RData", sep=""))
projections
actualPoints <- read.csv(paste(getwd(),"/Data/Yahoo-actualpoints-2012.csv", sep=""))
actualPoints
passYdsMultiplier <- (1/25) #1 pt per 25 pass yds
passTdsMultiplier <- 4      #4 pts per pass td
passIntMultiplier <- -3     #-3 pts per INT
rushYdsMultiplier <- (1/10) #1 pt per 10 rush yds
rushTdsMultiplier <- 6      #6 pts per rush td
recYdsMultiplier <- (1/8)   #1 pt per 8 rec yds
recTdsMultiplier <- 6       #6 pts per rec td
fumlMultiplier <- -3        #-3 pts per fumble (not included in ESPN projections, however)
#Library
#Load data
load(paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep=""))
load(paste(getwd(),"/Data/CBS-Projections-2012.RData", sep=""))
projections <- merge(projections_espn, projections_cbs, by=c("name","pos"), all=TRUE)
projections[duplicated(projections$name),]
projections[projections$name=="Steve Smith",][c(1,4),] <- NA
projections <- projections[!is.na(projections$name),]
#Calculate ESPN and CBS projections
projections$passYdsPts_espn <- projections$passYds_espn*passYdsMultiplier
projections$passTdsPts_espn <- projections$passTds_espn*passTdsMultiplier
projections$passIntPts_espn <- projections$passInt_espn*passIntMultiplier
projections$rushYdsPts_espn <- projections$rushYds_espn*rushYdsMultiplier
projections$rushTdsPts_espn <- projections$rushTds_espn*rushTdsMultiplier
projections$recYdsPts_espn <- projections$recYds_espn*recYdsMultiplier
projections$recTdsPts_espn <- projections$recTds_espn*recTdsMultiplier
projections$fumblesPts_espn <- projections$fumbles_espn*fumlMultiplier
projections$passYdsPts_cbs <- projections$passYds_cbs*passYdsMultiplier
projections$passTdsPts_cbs <- projections$passTds_cbs*passTdsMultiplier
projections$passIntPts_cbs <- projections$passInt_cbs*passIntMultiplier
projections$rushYdsPts_cbs <- projections$rushYds_cbs*rushYdsMultiplier
projections$rushTdsPts_cbs <- projections$rushTds_cbs*rushTdsMultiplier
projections$recYdsPts_cbs <- projections$recYds_cbs*recYdsMultiplier
projections$recTdsPts_cbs <- projections$recTds_cbs*recTdsMultiplier
projections$fumblesPts_cbs <- projections$fumbles_cbs*fumlMultiplier
projections$projectedPts_espn <- rowSums(projections[,c("passYdsPts_espn","passTdsPts_espn","passIntPts_espn","rushYdsPts_espn","rushTdsPts_espn","recYdsPts_espn","recTdsPts_espn","fumblesPts_espn")], na.rm=T)
projections$projectedPts_cbs <- rowSums(projections[,c("passYdsPts_cbs","passTdsPts_cbs","passIntPts_cbs","rushYdsPts_cbs","rushTdsPts_cbs","recYdsPts_cbs","recTdsPts_cbs","fumblesPts_cbs")], na.rm=T)
projections$projectedPts_espn
projections$projectedPts_cbs
projections$passYds <- rowMeans(projections[,c("passYds_espn","passYds_cbs")], na.rm=TRUE)
projections$passTds <- rowMeans(projections[,c("passTds_espn","passTds_cbs")], na.rm=TRUE)
projections$passInt <- rowMeans(projections[,c("passInt_espn","passInt_cbs")], na.rm=TRUE)
projections$rushYds <- rowMeans(projections[,c("rushYds_espn","rushYds_cbs")], na.rm=TRUE)
projections$rushTds <- rowMeans(projections[,c("rushTds_espn","rushTds_cbs")], na.rm=TRUE)
projections$recYds <- rowMeans(projections[,c("recYds_espn","recYds_cbs")], na.rm=TRUE)
projections$recTds <- rowMeans(projections[,c("recTds_espn","recTds_cbs")], na.rm=TRUE)
projections$fumbles <- rowMeans(projections[,c("fumbles_espn","fumbles_cbs")], na.rm=TRUE)
for (i in 1:dim(projections)[1]){
ifelse(projections$passYds_espn[i]==0 | projections$passYds_cbs[i]==0, projections$passYds[i] <- max(projections$passYds_espn[i], projections$passYds_cbs[i], na.rm=TRUE), projections$passYds[i] <- projections$passYds[i])
ifelse(projections$passTds_espn[i]==0 | projections$passTds_cbs[i]==0, projections$passTds[i] <- max(projections$passTds_espn[i], projections$passTds_cbs[i], na.rm=TRUE), projections$passTds[i] <- projections$passTds[i])
ifelse(projections$passInt_espn[i]==0 | projections$passInt_cbs[i]==0, projections$passInt[i] <- max(projections$passInt_espn[i], projections$passInt_cbs[i], na.rm=TRUE), projections$passInt[i] <- projections$passInt[i])
ifelse(projections$rushYds_espn[i]==0 | projections$rushYds_cbs[i]==0, projections$rushYds[i] <- max(projections$rushYds_espn[i], projections$rushYds_cbs[i], na.rm=TRUE), projections$rushYds[i] <- projections$rushYds[i])
ifelse(projections$rushTds_espn[i]==0 | projections$rushTds_cbs[i]==0, projections$rushTds[i] <- max(projections$rushTds_espn[i], projections$rushTds_cbs[i], na.rm=TRUE), projections$rushTds[i] <- projections$rushTds[i])
ifelse(projections$recYds_espn[i]==0 | projections$recYds_cbs[i]==0, projections$recYds[i] <- max(projections$recYds_espn[i], projections$recYds_cbs[i], na.rm=TRUE), projections$recYds[i] <- projections$recYds[i])
ifelse(projections$recTds_espn[i]==0 | projections$recTds_cbs[i]==0, projections$recTds[i] <- max(projections$recTds_espn[i], projections$recTds_cbs[i], na.rm=TRUE), projections$recTds[i] <- projections$recTds[i])
ifelse(projections$fumbles_espn[i]==0 | projections$fumbles_cbs[i]==0, projections$fumbles[i] <- max(projections$fumbles_espn[i], projections$fumbles_cbs[i], na.rm=TRUE), projections$fumbles[i] <- projections$fumbles[i])
}
projections$passYdsPts <- projections$passYds*passYdsMultiplier
projections$passTdsPts <- projections$passTds*passTdsMultiplier
projections$passIntPts <- projections$passInt*passIntMultiplier
projections$rushYdsPts <- projections$rushYds*rushYdsMultiplier
projections$rushTdsPts <- projections$rushTds*rushTdsMultiplier
projections$recYdsPts <- projections$recYds*recYdsMultiplier
projections$recTdsPts <- projections$recTds*recTdsMultiplier
projections$fumblesPts <- projections$fumbles*fumlMultiplier
projections$passYdsPts <- projections$passYds*passYdsMultiplier
projections$passTdsPts <- projections$passTds*passTdsMultiplier
projections$passIntPts <- projections$passInt*passIntMultiplier
projections$rushYdsPts <- projections$rushYds*rushYdsMultiplier
projections$rushTdsPts <- projections$rushTds*rushTdsMultiplier
projections$recYdsPts <- projections$recYds*recYdsMultiplier
projections$recTdsPts <- projections$recTds*recTdsMultiplier
projections$fumblesPts <- projections$fumbles*fumlMultiplier
projections$projectedPts <- rowSums(projections[,c("passYdsPts","passTdsPts","passIntPts","rushYdsPts","rushTdsPts","recYdsPts","recTdsPts","fumblesPts")], na.rm=T)
projections$overallRank <- rank(-projections$projectedPts, ties.method="min")
#Order players by overall rank
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:dim(projections)[1]
#View projections
projections[,c("name","pos","projectedPts")]
names(projections)
projections[,c("team_espn","team_cbs")]
unique(projections$team_espn)
unique(projections$team_cbs)
library("XML")
library("stringr")
#Download fantasy football projections from ESPN.com
qb_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=0", stringsAsFactors = FALSE)$playertable_0
rb1_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2", stringsAsFactors = FALSE)$playertable_0
rb2_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2&startIndex=40", stringsAsFactors = FALSE)$playertable_0
rb3_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2&startIndex=80", stringsAsFactors = FALSE)$playertable_0
wr1_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4", stringsAsFactors = FALSE)$playertable_0
wr2_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4&startIndex=40", stringsAsFactors = FALSE)$playertable_0
wr3_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4&startIndex=80", stringsAsFactors = FALSE)$playertable_0
te_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=6", stringsAsFactors = FALSE)$playertable_0
#Add variable names for each object
fileList <- c("qb_espn","rb1_espn","rb2_espn","rb3_espn","wr1_espn","wr2_espn","wr3_espn","te_espn")
for(i in 1:length(fileList)){
assign(fileList[i],get(fileList[i])[2:dim(get(fileList[i]))[1],])
t <- get(fileList[i])
names(t) <-  c("positionRank_espn","player_espn","passCompAtt_espn","passYds_espn","passTds_espn","passInt_espn","rush_espn","rushYds_espn","rushTds_espn","rec_espn","recYds_espn","recTds_espn","pts_espn")
assign(fileList[i], t)
}
#Merge players within position
rb_espn <- rbind(rb1_espn,rb2_espn,rb3_espn)
wr_espn <- rbind(wr1_espn,wr2_espn,wr3_espn)
#Add variable for player position
qb_espn$pos <- as.factor("QB")
rb_espn$pos <- as.factor("RB")
wr_espn$pos <- as.factor("WR")
te_espn$pos <- as.factor("TE")
#Merge players across positions
projections_espn <- rbind(qb_espn,rb_espn,wr_espn,te_espn)
#Separate pass completions from attempts
projections_espn$passComp_espn <- as.numeric(str_sub(string=projections_espn$passCompAtt_espn, end=str_locate(string=projections_espn$passCompAtt_espn, '/')[,1]-1))
projections_espn$passAtt_espn <- as.numeric(str_sub(string=projections_espn$passCompAtt_espn, start=str_locate(string=projections_espn$passCompAtt_espn, '/')[,1]+1))
#Convert variables from character strings to numeric
projections_espn$positionRank_espn <- as.numeric(projections_espn$positionRank_espn)
projections_espn$passYds_espn <- as.numeric(projections_espn$passYds_espn)
projections_espn$passTds_espn <- as.numeric(projections_espn$passTds_espn)
projections_espn$passInt_espn <- as.numeric(projections_espn$passInt_espn)
projections_espn$rush_espn <- as.numeric(projections_espn$rush_espn)
projections_espn$rushYds_espn <- as.numeric(projections_espn$rushYds_espn)
projections_espn$rushTds_espn <- as.numeric(projections_espn$rushTds_espn)
projections_espn$rec_espn <- as.numeric(projections_espn$rec_espn)
projections_espn$recYds_espn <- as.numeric(projections_espn$recYds_espn)
projections_espn$recTds_espn <- as.numeric(projections_espn$recTds_espn)
projections_espn$pts_espn <- as.numeric(projections_espn$pts_espn)
#Add fumble variable
projections_espn$fumbles_espn <- NA
#Player names
projections_espn$name <- str_sub(projections_espn$player_espn, end=str_locate(string=projections_espn$player_espn, ',')[,1]-1)
projections_espn$name <- str_replace_all(projections_espn$name, "\\*", "")
projections_espn[which(projections_espn$name=="Steve Johnson"),"name"] <- "Stevie Johnson"
#Player teams
projections_espn$team_espn <- str_sub(projections_espn$player_espn, start=str_locate(string=projections_espn$player_espn, ',')[,1]+2, end = str_locate(string=projections_espn$player_espn, ',')[,1]+4)
projections_espn$team_espn <- str_trim(projections_espn$team_espn, side="right")
projections_espn$team_espn <- toupper(projections_espn$team_espn)
projections_espn[projections$team_espn=="WSH","team"]$team_espn
projections_espn[which(projections$team_espn=="WSH"),"team"]$team_espn
projections_espn[which(projections$team_espn=="WSH"),]$team_espn
projections_espn[projections$team_espn=="WSH",]$team_espn
projections_espn$team_espn
projections_espn$team_espn[projections$team_espn=="WSH"]
projections_espn$team_espn[projections_espn$team_espn=="WSH"]
projections_espn$team_espn[projections_espn$team_espn=="WSH"] <- "WAS"
projections_espn$team_espn[projections_espn$team_espn=="WSH"]
projections_espn$team_espn
projections_espn[duplicated(projections_espn$name),]
projections_espn <- projections_espn[-which(projections_espn$name=="Dexter McCluster" & projections_espn$pos=="RB"),]
#Calculate overall rank
projections_espn$overallRank_espn <- rank(-projections_espn$pts_espn, ties.method="min")
#Order variables in data set
projections_espn <- projections_espn[,c("name","pos","team_espn","positionRank_espn","overallRank_espn",
"passAtt_espn","passComp_espn","passYds_espn","passTds_espn","passInt_espn",
"rushYds_espn","rushTds_espn","recYds_espn","recTds_espn","fumbles_espn","pts_espn")]
#Order players by overall rank
projections_espn <- projections_espn[order(projections_espn$overallRank_espn),]
row.names(projections_espn) <- 1:dim(projections_espn)[1]
#Save file
save(projections_espn, file = paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep=""))
passYdsMultiplier <- (1/25) #1 pt per 25 pass yds
passTdsMultiplier <- 4      #4 pts per pass td
passIntMultiplier <- -3     #-3 pts per INT
rushYdsMultiplier <- (1/10) #1 pt per 10 rush yds
rushTdsMultiplier <- 6      #6 pts per rush td
recYdsMultiplier <- (1/8)   #1 pt per 8 rec yds
recTdsMultiplier <- 6       #6 pts per rec td
fumlMultiplier <- -3        #-3 pts per fumble (not included in ESPN projections, however)
#Library
#Load data
load(paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep=""))
load(paste(getwd(),"/Data/CBS-Projections-2012.RData", sep=""))
projections <- merge(projections_espn, projections_cbs, by=c("name","pos"), all=TRUE)
projections
projections <- merge(projections_espn, projections_cbs, by=c("name","pos"), all=TRUE)
projections_espn$team <- projections_espn$team_espn
projections_cbs$team <- projections_espn$team_cbs
projections <- merge(projections_espn, projections_cbs, by=c("name","pos","team"), all=TRUE)
projections_cbs$team <- projections_cbs$team_cbs
projections <- merge(projections_espn, projections_cbs, by=c("name","pos","team"), all=TRUE)
projections
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/ESPN Projections.R', echo=TRUE)
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/CBS Projections.R', echo=TRUE)
passYdsMultiplier <- (1/25) #1 pt per 25 pass yds
passTdsMultiplier <- 4      #4 pts per pass td
passIntMultiplier <- -3     #-3 pts per INT
rushYdsMultiplier <- (1/10) #1 pt per 10 rush yds
rushTdsMultiplier <- 6      #6 pts per rush td
recYdsMultiplier <- (1/8)   #1 pt per 8 rec yds
recTdsMultiplier <- 6       #6 pts per rec td
fumlMultiplier <- -3        #-3 pts per fumble (not included in ESPN projections, however)
#Library
#Load data
load(paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep=""))
load(paste(getwd(),"/Data/CBS-Projections-2012.RData", sep=""))
projections <- merge(projections_espn, projections_cbs, by=c("name","pos","team"), all=TRUE)
projections
projections[duplicated(projections$name),]
projections
projections[duplicated(projections$name),]
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/ESPN Projections.R', echo=TRUE)
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/CBS Projections.R', echo=TRUE)
passYdsMultiplier <- (1/25) #1 pt per 25 pass yds
passTdsMultiplier <- 4      #4 pts per pass td
passIntMultiplier <- -3     #-3 pts per INT
rushYdsMultiplier <- (1/10) #1 pt per 10 rush yds
rushTdsMultiplier <- 6      #6 pts per rush td
recYdsMultiplier <- (1/8)   #1 pt per 8 rec yds
recTdsMultiplier <- 6       #6 pts per rec td
fumlMultiplier <- -3        #-3 pts per fumble (not included in ESPN projections, however)
#Library
#Load data
load(paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep=""))
load(paste(getwd(),"/Data/CBS-Projections-2012.RData", sep=""))
projections <- merge(projections_espn, projections_cbs, by=c("name","pos"), all=TRUE)
projections[duplicated(projections$name),]
projections[projections$name=="Steve Smith",][c(1,4),] <- NA
projections <- projections[!is.na(projections$name),]
projections[duplicated(projections$name),]
projections$passYdsPts_espn <- projections$passYds_espn*passYdsMultiplier
projections$passTdsPts_espn <- projections$passTds_espn*passTdsMultiplier
projections$passIntPts_espn <- projections$passInt_espn*passIntMultiplier
projections$rushYdsPts_espn <- projections$rushYds_espn*rushYdsMultiplier
projections$rushTdsPts_espn <- projections$rushTds_espn*rushTdsMultiplier
projections$recYdsPts_espn <- projections$recYds_espn*recYdsMultiplier
projections$recTdsPts_espn <- projections$recTds_espn*recTdsMultiplier
projections$fumblesPts_espn <- projections$fumbles_espn*fumlMultiplier
projections$passYdsPts_cbs <- projections$passYds_cbs*passYdsMultiplier
projections$passTdsPts_cbs <- projections$passTds_cbs*passTdsMultiplier
projections$passIntPts_cbs <- projections$passInt_cbs*passIntMultiplier
projections$rushYdsPts_cbs <- projections$rushYds_cbs*rushYdsMultiplier
projections$rushTdsPts_cbs <- projections$rushTds_cbs*rushTdsMultiplier
projections$recYdsPts_cbs <- projections$recYds_cbs*recYdsMultiplier
projections$recTdsPts_cbs <- projections$recTds_cbs*recTdsMultiplier
projections$fumblesPts_cbs <- projections$fumbles_cbs*fumlMultiplier
projections$projectedPts_espn <- rowSums(projections[,c("passYdsPts_espn","passTdsPts_espn","passIntPts_espn","rushYdsPts_espn","rushTdsPts_espn","recYdsPts_espn","recTdsPts_espn","fumblesPts_espn")], na.rm=T)
projections$projectedPts_cbs <- rowSums(projections[,c("passYdsPts_cbs","passTdsPts_cbs","passIntPts_cbs","rushYdsPts_cbs","rushTdsPts_cbs","recYdsPts_cbs","recTdsPts_cbs","fumblesPts_cbs")], na.rm=T)
projections$passYds <- rowMeans(projections[,c("passYds_espn","passYds_cbs")], na.rm=TRUE)
projections$passTds <- rowMeans(projections[,c("passTds_espn","passTds_cbs")], na.rm=TRUE)
projections$passInt <- rowMeans(projections[,c("passInt_espn","passInt_cbs")], na.rm=TRUE)
projections$rushYds <- rowMeans(projections[,c("rushYds_espn","rushYds_cbs")], na.rm=TRUE)
projections$rushTds <- rowMeans(projections[,c("rushTds_espn","rushTds_cbs")], na.rm=TRUE)
projections$recYds <- rowMeans(projections[,c("recYds_espn","recYds_cbs")], na.rm=TRUE)
projections$recTds <- rowMeans(projections[,c("recTds_espn","recTds_cbs")], na.rm=TRUE)
projections$fumbles <- rowMeans(projections[,c("fumbles_espn","fumbles_cbs")], na.rm=TRUE)
#If one site's projection is 0, take max of sites' projections
for (i in 1:dim(projections)[1]){
ifelse(projections$passYds_espn[i]==0 | projections$passYds_cbs[i]==0, projections$passYds[i] <- max(projections$passYds_espn[i], projections$passYds_cbs[i], na.rm=TRUE), projections$passYds[i] <- projections$passYds[i])
ifelse(projections$passTds_espn[i]==0 | projections$passTds_cbs[i]==0, projections$passTds[i] <- max(projections$passTds_espn[i], projections$passTds_cbs[i], na.rm=TRUE), projections$passTds[i] <- projections$passTds[i])
ifelse(projections$passInt_espn[i]==0 | projections$passInt_cbs[i]==0, projections$passInt[i] <- max(projections$passInt_espn[i], projections$passInt_cbs[i], na.rm=TRUE), projections$passInt[i] <- projections$passInt[i])
ifelse(projections$rushYds_espn[i]==0 | projections$rushYds_cbs[i]==0, projections$rushYds[i] <- max(projections$rushYds_espn[i], projections$rushYds_cbs[i], na.rm=TRUE), projections$rushYds[i] <- projections$rushYds[i])
ifelse(projections$rushTds_espn[i]==0 | projections$rushTds_cbs[i]==0, projections$rushTds[i] <- max(projections$rushTds_espn[i], projections$rushTds_cbs[i], na.rm=TRUE), projections$rushTds[i] <- projections$rushTds[i])
ifelse(projections$recYds_espn[i]==0 | projections$recYds_cbs[i]==0, projections$recYds[i] <- max(projections$recYds_espn[i], projections$recYds_cbs[i], na.rm=TRUE), projections$recYds[i] <- projections$recYds[i])
ifelse(projections$recTds_espn[i]==0 | projections$recTds_cbs[i]==0, projections$recTds[i] <- max(projections$recTds_espn[i], projections$recTds_cbs[i], na.rm=TRUE), projections$recTds[i] <- projections$recTds[i])
ifelse(projections$fumbles_espn[i]==0 | projections$fumbles_cbs[i]==0, projections$fumbles[i] <- max(projections$fumbles_espn[i], projections$fumbles_cbs[i], na.rm=TRUE), projections$fumbles[i] <- projections$fumbles[i])
}
projections$passYdsPts <- projections$passYds*passYdsMultiplier
projections$passTdsPts <- projections$passTds*passTdsMultiplier
projections$passIntPts <- projections$passInt*passIntMultiplier
projections$rushYdsPts <- projections$rushYds*rushYdsMultiplier
projections$rushTdsPts <- projections$rushTds*rushTdsMultiplier
projections$recYdsPts <- projections$recYds*recYdsMultiplier
projections$recTdsPts <- projections$recTds*recTdsMultiplier
projections$fumblesPts <- projections$fumbles*fumlMultiplier
projections$projectedPts <- rowSums(projections[,c("passYdsPts","passTdsPts","passIntPts","rushYdsPts","rushTdsPts","recYdsPts","recTdsPts","fumblesPts")], na.rm=T)
projections$overallRank <- rank(-projections$projectedPts, ties.method="min")
#Order players by overall rank
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:dim(projections)[1]
names(projections)
projections[,c("name","pos","team_espn","team_cbs","overallRank","projectedPts_espn","projectedPts_cbs","projectedPts")]
projections <- projections[,c("name","pos","team_espn","team_cbs","overallRank","projectedPts_espn","projectedPts_cbs","projectedPts")]
save(projections, file = paste(getwd(),"/Data/LeagueProjections-2012.RData", sep=""))
load(paste(getwd(),"/Data/LeagueProjections-2012.RData", sep=""))
actualPoints <- read.csv(paste(getwd(),"/Data/Yahoo-actualpoints-2012.csv", sep=""))
#Cleanup Yahoo actual points data
actualPoints <- actualPoints[which(actualPoints$Fan.Pts!=""),]
actualPoints$name <- as.character(actualPoints$Player)
actualPoints$actualPts <- actualPoints$Fan.Pts
actualPoints <- actualPoints[,c("name","actualPts")]
row.names(actualPoints) <- 1:dim(actualPoints)[1]
actualPoints
actualPoints <- read.csv(paste(getwd(),"/Data/Yahoo-actualpoints-2012.csv", sep=""))
#Cleanup Yahoo actual points data
actualPoints <- actualPoints[which(actualPoints$Fan.Pts!=""),]
actualPoints$name <- as.character(actualPoints$Player)
actualPoints$actualPts <- actualPoints$Fan.Pts
actualPoints
projectedWithActualPts[!duplicated(projectedWithActualPts$name),]
projectedWithActualPts <- merge(projections, actualPoints, by="name", all.x=TRUE)
projectedWithActualPts
actualPoints$actualPts <- actualPoints$Fan.Pts
actualPoints <- actualPoints[,c("name","actualPts")]
row.names(actualPoints) <- 1:dim(actualPoints)[1]
#Merge projections with Yahoo actual points
projectedWithActualPts <- merge(projections, actualPoints, by="name", all.x=TRUE)
projectedWithActualPts
projectedWithActualPts[duplicated(projectedWithActualPts$name),]
projectedWithActualPoints$name[projectedWithActualPoints$name=="Alex Smith"] #projectedWithActualPts[!duplicated(projectedWithActualPts$name),]
projectedWithActualPts <- merge(projections, actualPoints, by="name", all.x=TRUE)
projectedWithActualPts$name[projectedWithActualPts$name=="Alex Smith"] #projectedWithActualPts[!duplicated(projectedWithActualPts$name),]
projectedWithActualPts[projectedWithActualPts$name=="Alex Smith",] #projectedWithActualPts[!duplicated(projectedWithActualPts$name),]
projectedWithActualPts[projectedWithActualPts$name=="Alex Smith",][1,] #projectedWithActualPts[!duplicated(projectedWithActualPts$name),]
projectedWithActualPts[duplicated(projectedWithActualPts$name),]
projectedWithActualPts[projectedWithActualPts$name=="Alex Smith",][1,] <- NA
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",]
projectedWithActualPts
projectedWithActualPts
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",]
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",][c(3,4),]
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",][c(3,5),]
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",][c(3,4),] <- NA
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",][c(3,4),] <- NA
projections[projections$name=="Steve Smith",][c(1,4),]
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",][c(3,4),]
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",][c(3,4),] <- NA
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",][c(3,4),] <- NULL
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",][
]
projectedWithActualPts <- merge(projections, actualPoints, by="name", all.x=TRUE)
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",]
projectedWithActualPts[duplicated(projectedWithActualPts$name),]
projectedWithActualPts[projectedWithActualPts$name=="Alex Smith",][1,] <- NA
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",][c(3,4),] <- NA
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",]
projectedWithActualPts <- merge(projections, actualPoints, by="name", all.x=TRUE)
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",][c(3,4),] <- NA
projectedWithActualPts[projectedWithActualPts$name=="Alex Smith",][1,] <- NA
projectedWithActualPts <- merge(projections, actualPoints, by="name", all.x=TRUE)
#Remove duplicate cases
projectedWithActualPts[duplicated(projectedWithActualPts$name),]
projectedWithActualPts[projectedWithActualPts$name=="Alex Smith",][1,] <- NA
projections <- projections[!is.na(projections$name),]
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",][c(3,4),] <- NA
projectedWithActualPts <- merge(projections, actualPoints, by="name", all.x=TRUE)
projectedWithActualPts[duplicated(projectedWithActualPts$name),]
projectedWithActualPts[projectedWithActualPts$name=="Alex Smith",][1,] <- NA
projectedWithActualPts <- projectedWithActualPts[!is.na(projectedWithActualPts$name),]
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",][c(3,4),] <- NA
projectedWithActualPts <- projectedWithActualPts[!is.na(projectedWithActualPts$name),]
projectedWithActualPts
cor.test(projectedWithActualPts$projectedPts, projectedWithActualPts$actualPts) #r=.707, p<.001
cor(projectedWithActualPts$projectedPts, projectedWithActualPts$actualPts, use="pairwise.complete.obs")^2 #r-squared = .50
cor.test(projectedWithActualPts$projectedPts_espn, projectedWithActualPts$actualPts) #r=.707, p<.001
cor(projectedWithActualPts$projectedPts_espn, projectedWithActualPts$actualPts, use="pairwise.complete.obs")^2 #r-squared = .50
cor.test(projectedWithActualPts$projectedPts_cbs, projectedWithActualPts$actualPts) #r=.707, p<.001
projectedWithActualPts
cor.test(projectedWithActualPts$projectedPts_espn, projectedWithActualPts$actualPts) #r=.734, p<.001
cor(projectedWithActualPts$projectedPts_espn, projectedWithActualPts$actualPts, use="pairwise.complete.obs")^2 #r-squared = .539
#CBS
cor.test(projectedWithActualPts$projectedPts_cbs, projectedWithActualPts$actualPts) #r=.762, p<.001
cor(projectedWithActualPts$projectedPts_cbs, projectedWithActualPts$actualPts, use="pairwise.complete.obs")^2 #r-squared = .50
cor.test(projectedWithActualPts$projectedPts, projectedWithActualPts$actualPts) #r=.707, p<.001
cor(projectedWithActualPts$projectedPts, projectedWithActualPts$actualPts, use="pairwise.complete.obs")^2 #r-squared = .50
projectedWithActualPtsNoZeros <- projectedWithActualPts[which(projectedWithActualPts$projectedPts!=0),]
cor.test(projectedWithActualPtsNoZeros$projectedPts_espn, projectedWithActualPtsNoZeros$actualPts) #r=.707, p<.001
cor(projectedWithActualPtsNoZeros$projectedPts_espn, projectedWithActualPtsNoZeros$actualPts, use="pairwise.complete.obs")^2 #r-squared = .50
cor.test(projectedWithActualPtsNoZeros$projectedPts_cbs, projectedWithActualPtsNoZeros$actualPts) #r=.707, p<.001
cor(projectedWithActualPtsNoZeros$projectedPts_cbs, projectedWithActualPtsNoZeros$actualPts, use="pairwise.complete.obs")^2 #r-squared = .50
cor.test(projectedWithActualPtsNoZeros$projectedPts, projectedWithActualPtsNoZeros$actualPts) #r=.707, p<.001
cor(projectedWithActualPtsNoZeros$projectedPts, projectedWithActualPtsNoZeros$actualPts, use="pairwise.complete.obs")^2 #r-squared = .50
save(projectedWithActualPts, file = paste(getwd(),"/Data/projectedWithActualPoints-2012.RData", sep=""))
paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep="")
source(paste(getwd(),"/R Scripts/ESPN-Projections-2012.RData", sep=""))
source(paste(getwd(),"/R Scripts/ESPN Projections.R", sep=""))
source(paste(getwd(),"/R Scripts/CBS Projections.R", sep=""), echo=TRUE)
#3. Calculate projections for your league
source(paste(getwd(),"/R Scripts/Calculate League Projections.R", sep=""), echo=TRUE)
#4. Evaluate league projections from last year
source(paste(getwd(),"/R Scripts/Evaluate Projections.R", sep=""), echo=TRUE)
source(paste(getwd(),"/R Scripts/Evaluate Projections.R", sep=""), echo=TRUE)
#5. Calculate players' risk levels
library("ggplot2")
?ggplot
ggplot(projections_espn, aes(x=pts_espn)) + geom_density(alpha=.3)
ggplot(projections_espn, aes(x=pts_espn))# + geom_density(alpha=.3)
ggplot(projections_espn, aes(x=pts_espn)) + geom_density(alpha=.3)
ggplot(projections_espn, aes(x=pts_espn), fill) + geom_density(alpha=.3)
ggplot(projections_espn, aes(x=pts_espn), fill=lines) + geom_density(alpha=.3)
ggplot(projections_espn, aes(x=pts_espn), fill="blue") + geom_density(alpha=.3)
ggplot(projections_espn, aes(x=pts_espn), fill="blue") + geom_density()
ggplot(projections_espn, aes(x=pts_espn), fill="white") + geom_density()
ggplot(projections_espn, aes(x=pts_espn), fill="blue") + geom_density()
ggplot(projections_espn, aes(x=pts_espn), color="blue", fill="blue") + geom_density()
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density()
projections_espn
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density()
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density(fill=pos)
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density(fill="blue")
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density(fill="blue", alpha=.3)
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density(fill="blue", alpha=.3) + xlab("ESPN Projected Points 2012")
ggsave(paste(getwd(),"/Figures/ESPN projections 2012.jpg", sep=""))
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density(fill="blue", alpha=.3) + xlab("ESPN Projected Points 2012") + ggtitle("Density Plot of ESPN Projected Points from 2012")
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density(fill="blue", alpha=.3) + xlab("ESPN Projected Points 2012") + labs(title="Density Plot of ESPN Projected Points from 2012")
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density(fill="blue", alpha=.3) + xlab("ESPN Projected Points 2012") + labs(title="Density Plot of ESPN Projected Points from 2012")
ggsave(paste(getwd(),"/Figures/ESPN projections 2012.jpg", sep=""))
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density(fill="blue", alpha=.3) + xlab("ESPN Projected Points 2012") + opts(title = "Density Plot of ESPN Projected Points from 2012")
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density(fill="blue", alpha=.3) + xlab("Player's Projected Points") + opts(title = "Density Plot of ESPN Projected Points from 2012")
ggplot(projections_espn, aes(x=pts_espn), fill=pos) + geom_density(fill="blue", alpha=.3) + xlab("Player's Projected Points") + opts(title = "Density Plot of ESPN Projected Points from 2012")
ggsave(paste(getwd(),"/Figures/ESPN projections 2012.jpg", sep=""))
head(projections_espn)
head(projections_espn)
head(projections_espn[,c("name","pos","passYds_espn","passTds_espn","passInt_espn","rushYds_espn","rushTds_espn","recYds_espn","recTds_espn","pts_espn")])
new <- projections_espn[,c("name","pos","passYds_espn","passTds_espn","passInt_espn","rushYds_espn","rushTds_espn","recYds_espn","recTds_espn","pts_espn")]
names(new) <- c("name","pos","passYd","passTD","passINT","rushYd","rushTD","recYd","recTD","pts")
head(new)
