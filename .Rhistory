load(paste(getwd(),"/Data/VOR-2013.RData", sep=""))
#Avg & Projected Cost
avgcost_yahoo <- read.csv(paste(getwd(),"/Data/Yahoo-avgcost-2013.csv",sep=""))
avgcost_fp <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
###Yahoo
#readHTMLTable("http://football.fantasysports.yahoo.com/f1/35024/draftanalysis?tab=AD&pos=ALL&sort=DA_AP", stringsAsFactors = FALSE)
#avgcost <- read.csv(paste(path,"/Fantasy Football/Research/R/avgcost.csv",sep=""))
avgcost_yahoo2 <- avgcost_yahoo[which(avgcost_yahoo$Avg.Cost!=""),]
avgcost_yahoo2$name <- as.character(avgcost_yahoo2$Player)
avgcost_yahoo2$avgCost <- as.numeric((str_replace_all(avgcost_yahoo2$Avg.Cost, "\\$", "")))
avgcost_yahoo3 <- avgcost_yahoo2[,c("name","avgCost")]
avgcost_yahoo3$projectedCost <- ceiling(avgcost_yahoo3$avgCost * (leagueCap/defaultCap))
#Change names
avgcost_yahoo3$name[avgcost_yahoo3$name=="Stevie Johnson"] <- "Steve Johnson"
###Fantasy Pros
avgcost_fp$name <- str_sub(avgcost_fp[,c("Player (pos, team, bye)")], end=str_locate(avgcost_fp[,c("Player (pos, team, bye)")], ',')[,1]-1)
avgcost_fp$avgCost_fp <- as.numeric(sub("\\$","", avgcost_fp$Ave))
avgcost_fp <- avgcost_fp[,c("name","avgCost_fp")]
avgcost_fp$projectedCost_fp <- ceiling(avgcost_fp$avgCost_fp * (leagueCap/defaultCap))
#Rename Players
avgcost_fp[grep("Beanie", avgcost_fp[,c("name")]),"name"] <- "Beanie Wells"
avgcost_fp[grep("Ty Hilton", avgcost_fp[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost_fp[grep("Robert Housler", avgcost_fp[,c("name")]),"name"] <- "Rob Housler"
avgcost_fp[grep("Reuben Randle", avgcost_fp[,c("name")]),"name"] <- "Rueben Randle"
avgcost_fp[grep("Joseph Morgan", avgcost_fp[,c("name")]),"name"] <- "Joe Morgan"
avgcost_fp[grep("Christopher Ivory", avgcost_fp[,c("name")]),"name"] <- "Chris Ivory"
#Merge
projections <- merge(projections, avgcost_yahoo3, by="name", all.x=TRUE)
projections$avgCost[is.na(projections$avgCost)==TRUE] <- 1
projections$projectedCost[is.na(projections$projectedCost)==TRUE] <- 1
projections <- merge(projections, avgcost_fp, by="name", all.x=TRUE)
projections$avgCost_fp[is.na(projections$avgCost_fp)==TRUE] <- 1
projections$projectedCost_fp[is.na(projections$projectedCost_fp)==TRUE] <- 1
projections <- projections[order(projections$overallRank),]
#Remove duplicate cases
projections$inflatedCost <- ceiling(projections$avgCost * (leagueCap/defaultCap) * 1.0)
projections$inflatedCost[projections$overallRank <= 33] <- ceiling(projections$avgCost[projections$overallRank <= 33] * (leagueCap/defaultCap) * 1.1)
projections$inflatedCost[projections$overallRank >= 67] <- ceiling(projections$avgCost[projections$overallRank >= 67] * (leagueCap/defaultCap) * 0.9)
projections$inflatedCost[is.na(projections$inflatedCost)==TRUE] <- 1
names(projections)
projections$cost[projections$overallRank <= 33] <- ceiling(projections$avgCost_fp[projections$overallRank <= 33] * 1.1)
projections$cost[projections$overallRank >= 67] <- ceiling(projections$avgCost_fp[projections$overallRank >= 67] * 0.9)
projections$cost[is.na(projections$cost)==TRUE] <- 1
projections$cost
names(projections)
projections
head(projections)
shinyData <- projections[,c("name","pos","team","overallRank","positionRank","pick","vor","projections","risk","cost")]
shinyData
shinyData[order(shinyData$projections),]
shinyData[order(-shinyData$projections),]
shinyData <- shinyData[order(-shinyData$projections),]
dim(shinyData)[1]
row.names(shinyData) <- 1:dim(shinyData)[1]
shinyData
save(shinyData, file = paste(getwd(),"/Data/shinyData-2013.RData", sep=""))
write.csv(shinyData, file=paste(getwd(),"/Data/CSV/shinyData-2013.csv", sep=""), row.names=FALSE)
shinyData1 <- projections[,c("name","pos","team","overallRank","positionRank","pick","vor","projections","risk","cost")]
shinyData2 <- na.omit(projections[,c("name","pos","projections","risk","cost")])
shinyData1
shinyData2
projections$cost[projections$cost==0] <- 1
shinyData1 <- projections[,c("name","pos","team","overallRank","positionRank","pick","vor","projections","risk","cost")]
shinyData2 <- na.omit(projections[,c("name","pos","projections","risk","cost")])
shinyData1
shinyData2
shinyData <- shinyData1[shinyData1$name %in% shinyData2$name,]
shinyData
shinyData <- shinyData[order(-shinyData$projections),]
row.names(shinyData) <- 1:dim(shinyData)[1]
shinyData
shinyData$overallRank <- rank(-shinyData$projections, ties.method="min")
shinyData
shinyData[shinyData$pos==QB,"positionRank"]
shinyData[shinyData$pos=="QB","positionRank"]
shinyData$positionRank[shinyData$pos=="QB",]
shinyData$positionRank[shinyData$pos=="QB"]
rank(-shinyData$projections[shinyData$pos=="QB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="QB"] <- rank(-shinyData$projections[shinyData$pos=="QB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="RB"] <- rank(-shinyData$projections[shinyData$pos=="RB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="WR"] <- rank(-shinyData$projections[shinyData$pos=="WR"], ties.method="min")
shinyData$positionRank[shinyData$pos=="TE"] <- rank(-shinyData$projections[shinyData$pos=="TE"], ties.method="min")
shinyData$overallRank <- rank(-shinyData$projections, ties.method="min")
shinyData <- shinyData[order(-shinyData$projections),]
row.names(shinyData) <- 1:dim(shinyData)[1]
shinyData
save(shinyData, file = paste(getwd(),"/Data/shinyData-2013.RData", sep=""))
write.csv(shinyData, file=paste(getwd(),"/Data/CSV/shinyData-2013.csv", sep=""), row.names=FALSE)
load(paste(getwd(),"/Data/shinyData-2013.RData", sep=""))
shinyData
#Create Optimization Function
optimizeTeam <- function(points=shinyData$projections, playerCost=shinyData$cost, maxRisk=maxRisk){ #can change points, cost, or risk #projectedPtsLatent
num.players <- length(optimizeData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(optimizeData$pos == "QB"), # num QB
as.numeric(optimizeData$pos == "RB"), # num RB
as.numeric(optimizeData$pos == "WR"), # num WR
as.numeric(optimizeData$pos == "TE"), # num TE
diag(optimizeData$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c("==",
">=",
">=",
">=",
rep("<=", num.players),
"<=",
"==")
b <- c(numQBstarters,
numRBstarters,
numWRstarters,
numTEstarters,
rep(maxRisk, num.players),
maxCost,
numTotalStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(merge(draftData[draftData$name %in% optimizeData[sol$solution == 1,"name"],c("name","pos","team")], optimizeData[sol$solution == 1,c("name","projections","risk","cost")], by="name"))
sol$totalCost <- sum(playerCost * sol$solution)
sol$players <- optimizeData$name[sol$solution == 1]
return(sol)
}
optimizeTeam(maxRisk=maxRisk)
bestTeam <- optimizeTeam(maxRisk=maxRisk)$playerInfo
totalCost <- optimizeTeam(maxRisk=maxRisk)$totalCost
totalPoints <- optimizeTeam(maxRisk=maxRisk)$optimum
#Create Optimization Function
optimizeTeam <- function(points=shinyData$projections, playerCost=shinyData$cost, maxRisk=maxRisk){ #can change points, cost, or risk #projectedPtsLatent
num.players <- length(shinyData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(shinyData$pos == "QB"), # num QB
as.numeric(shinyData$pos == "RB"), # num RB
as.numeric(shinyData$pos == "WR"), # num WR
as.numeric(shinyData$pos == "TE"), # num TE
diag(shinyData$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c("==",
">=",
">=",
">=",
rep("<=", num.players),
"<=",
"==")
b <- c(numQBstarters,
numRBstarters,
numWRstarters,
numTEstarters,
rep(maxRisk, num.players),
maxCost,
numTotalStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(merge(draftData[draftData$name %in% shinyData[sol$solution == 1,"name"],c("name","pos","team")], shinyData[sol$solution == 1,c("name","projections","risk","cost")], by="name"))
sol$totalCost <- sum(playerCost * sol$solution)
sol$players <- shinyData$name[sol$solution == 1]
return(sol)
}
optimizeTeam(maxRisk=maxRisk)
#Use Avg Cost (not inflated cost) for Shiny App
projections$cost[projections$overallRank <= 33] <- ceiling(projections$avgCost_fp[projections$overallRank <= 33] * 1.1)
projections$cost[projections$overallRank >= 67] <- ceiling(projections$avgCost_fp[projections$overallRank >= 67] * 0.9)
projections$cost[is.na(projections$cost)==TRUE] <- 1
projections$cost[projections$cost==0] <- 1
shinyData1 <- projections[,c("name","pos","team","overallRank","positionRank","pick","vor","projections","risk","cost")]
shinyData2 <- na.omit(projections[,c("name","pos","projections","risk","cost")])
shinyData <- shinyData1[shinyData1$name %in% shinyData2$name,]
shinyData$positionRank[shinyData$pos=="QB"] <- rank(-shinyData$projections[shinyData$pos=="QB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="RB"] <- rank(-shinyData$projections[shinyData$pos=="RB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="WR"] <- rank(-shinyData$projections[shinyData$pos=="WR"], ties.method="min")
shinyData$positionRank[shinyData$pos=="TE"] <- rank(-shinyData$projections[shinyData$pos=="TE"], ties.method="min")
shinyData[shinyData$pos=="QB","positionRank"]
shinyData$overallRank <- rank(-shinyData$projections, ties.method="min")
shinyData <- shinyData[order(-shinyData$projections),]
row.names(shinyData) <- 1:dim(shinyData)[1]
shinyData
shinyData1
avgcost_fp
#Load data
load(paste(getwd(),"/Data/VOR-2013.RData", sep=""))
#Avg & Projected Cost
avgcost_yahoo <- read.csv(paste(getwd(),"/Data/Yahoo-avgcost-2013.csv",sep=""))
avgcost_fp <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
###Yahoo
#readHTMLTable("http://football.fantasysports.yahoo.com/f1/35024/draftanalysis?tab=AD&pos=ALL&sort=DA_AP", stringsAsFactors = FALSE)
#avgcost <- read.csv(paste(path,"/Fantasy Football/Research/R/avgcost.csv",sep=""))
avgcost_yahoo2 <- avgcost_yahoo[which(avgcost_yahoo$Avg.Cost!=""),]
avgcost_yahoo2$name <- as.character(avgcost_yahoo2$Player)
avgcost_yahoo2$avgCost <- as.numeric((str_replace_all(avgcost_yahoo2$Avg.Cost, "\\$", "")))
avgcost_yahoo3 <- avgcost_yahoo2[,c("name","avgCost")]
avgcost_yahoo3$projectedCost <- ceiling(avgcost_yahoo3$avgCost * (leagueCap/defaultCap))
#Change names
avgcost_yahoo3$name[avgcost_yahoo3$name=="Stevie Johnson"] <- "Steve Johnson"
###Fantasy Pros
avgcost_fp$name <- str_sub(avgcost_fp[,c("Player (pos, team, bye)")], end=str_locate(avgcost_fp[,c("Player (pos, team, bye)")], ',')[,1]-1)
avgcost_fp$avgCost_fp <- as.numeric(sub("\\$","", avgcost_fp$Ave))
avgcost_fp <- avgcost_fp[,c("name","avgCost_fp")]
avgcost_fp$projectedCost_fp <- ceiling(avgcost_fp$avgCost_fp * (leagueCap/defaultCap))
#Rename Players
avgcost_fp[grep("Beanie", avgcost_fp[,c("name")]),"name"] <- "Beanie Wells"
avgcost_fp[grep("Ty Hilton", avgcost_fp[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost_fp[grep("Robert Housler", avgcost_fp[,c("name")]),"name"] <- "Rob Housler"
avgcost_fp[grep("Reuben Randle", avgcost_fp[,c("name")]),"name"] <- "Rueben Randle"
avgcost_fp[grep("Joseph Morgan", avgcost_fp[,c("name")]),"name"] <- "Joe Morgan"
avgcost_fp[grep("Christopher Ivory", avgcost_fp[,c("name")]),"name"] <- "Chris Ivory"
#Merge
projections <- merge(projections, avgcost_yahoo3, by="name", all.x=TRUE)
projections$avgCost[is.na(projections$avgCost)==TRUE] <- 1
projections$projectedCost[is.na(projections$projectedCost)==TRUE] <- 1
projections <- merge(projections, avgcost_fp, by="name", all.x=TRUE)
projections
projections[projections$name=="Vincent Jackson",]
projections$avgCost_fp[is.na(projections$avgCost_fp)==TRUE] <- 1
projections[projections$name=="Vincent Jackson",]
projections$projectedCost_fp[is.na(projections$projectedCost_fp)==TRUE] <- 1
projections[projections$name=="Vincent Jackson",]
projections <- projections[order(projections$overallRank),]
projections[projections$name=="Vincent Jackson",]
projections$inflatedCost <- ceiling(projections$avgCost * (leagueCap/defaultCap) * 1.0)
projections$inflatedCost[projections$overallRank <= 33] <- ceiling(projections$avgCost[projections$overallRank <= 33] * (leagueCap/defaultCap) * 1.1)
projections$inflatedCost[projections$overallRank >= 67] <- ceiling(projections$avgCost[projections$overallRank >= 67] * (leagueCap/defaultCap) * 0.9)
projections$inflatedCost[is.na(projections$inflatedCost)==TRUE] <- 1
projections[projections$name=="Vincent Jackson",]
#Use Avg Cost (not inflated cost) for Shiny App
projections$cost[projections$overallRank <= 33] <- ceiling(projections$avgCost_fp[projections$overallRank <= 33] * 1.1)
#Use Avg Cost (not inflated cost) for Shiny App
projections[projections$name=="Vincent Jackson",]
projections$cost[projections$overallRank >= 67] <- ceiling(projections$avgCost_fp[projections$overallRank >= 67] * 0.9)
projections[projections$name=="Vincent Jackson",]
#Load data
load(paste(getwd(),"/Data/VOR-2013.RData", sep=""))
#Avg & Projected Cost
avgcost_yahoo <- read.csv(paste(getwd(),"/Data/Yahoo-avgcost-2013.csv",sep=""))
avgcost_fp <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
###Yahoo
#readHTMLTable("http://football.fantasysports.yahoo.com/f1/35024/draftanalysis?tab=AD&pos=ALL&sort=DA_AP", stringsAsFactors = FALSE)
#avgcost <- read.csv(paste(path,"/Fantasy Football/Research/R/avgcost.csv",sep=""))
avgcost_yahoo2 <- avgcost_yahoo[which(avgcost_yahoo$Avg.Cost!=""),]
avgcost_yahoo2$name <- as.character(avgcost_yahoo2$Player)
avgcost_yahoo2$avgCost <- as.numeric((str_replace_all(avgcost_yahoo2$Avg.Cost, "\\$", "")))
avgcost_yahoo3 <- avgcost_yahoo2[,c("name","avgCost")]
avgcost_yahoo3$projectedCost <- ceiling(avgcost_yahoo3$avgCost * (leagueCap/defaultCap))
#Change names
avgcost_yahoo3$name[avgcost_yahoo3$name=="Stevie Johnson"] <- "Steve Johnson"
###Fantasy Pros
avgcost_fp$name <- str_sub(avgcost_fp[,c("Player (pos, team, bye)")], end=str_locate(avgcost_fp[,c("Player (pos, team, bye)")], ',')[,1]-1)
avgcost_fp$avgCost_fp <- as.numeric(sub("\\$","", avgcost_fp$Ave))
avgcost_fp <- avgcost_fp[,c("name","avgCost_fp")]
avgcost_fp$projectedCost_fp <- ceiling(avgcost_fp$avgCost_fp * (leagueCap/defaultCap))
#Rename Players
avgcost_fp[grep("Beanie", avgcost_fp[,c("name")]),"name"] <- "Beanie Wells"
avgcost_fp[grep("Ty Hilton", avgcost_fp[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost_fp[grep("Robert Housler", avgcost_fp[,c("name")]),"name"] <- "Rob Housler"
avgcost_fp[grep("Reuben Randle", avgcost_fp[,c("name")]),"name"] <- "Rueben Randle"
avgcost_fp[grep("Joseph Morgan", avgcost_fp[,c("name")]),"name"] <- "Joe Morgan"
avgcost_fp[grep("Christopher Ivory", avgcost_fp[,c("name")]),"name"] <- "Chris Ivory"
#Merge
projections <- merge(projections, avgcost_yahoo3, by="name", all.x=TRUE)
projections$avgCost[is.na(projections$avgCost)==TRUE] <- 1
projections$projectedCost[is.na(projections$projectedCost)==TRUE] <- 1
projections <- merge(projections, avgcost_fp, by="name", all.x=TRUE)
projections$avgCost_fp[is.na(projections$avgCost_fp)==TRUE] <- 1
projections$projectedCost_fp[is.na(projections$projectedCost_fp)==TRUE] <- 1
projections$overallRank <- rank(-projections$projections, ties.method="min")
projections <- projections[order(projections$overallRank),]
projections
projections$inflatedCost <- ceiling(projections$avgCost * (leagueCap/defaultCap) * 1.0)
projections$inflatedCost[projections$overallRank <= 33] <- ceiling(projections$avgCost[projections$overallRank <= 33] * (leagueCap/defaultCap) * 1.1)
projections$inflatedCost[projections$overallRank >= 34 & projections$overallRank <= 66] <- ceiling(projections$avgCost[projections$overallRank >= 34 & projections$overallRank <= 66] * (leagueCap/defaultCap) * 1.0)
projections$inflatedCost[projections$overallRank >= 67] <- ceiling(projections$avgCost[projections$overallRank >= 67] * (leagueCap/defaultCap) * 0.9)
projections$inflatedCost[is.na(projections$inflatedCost)==TRUE] <- 1
projections$inflatedCost
projections$avgCost
projections$cost[projections$overallRank <= 33] <- ceiling(projections$avgCost_fp[projections$overallRank <= 33] * 1.1)
projections$cost[projections$overallRank >= 34 & projections$overallRank <= 66] <- ceiling(projections$avgCost[projections$overallRank >= 34 & projections$overallRank <= 66] * 1.0)
projections$cost[projections$overallRank >= 67] <- ceiling(projections$avgCost_fp[projections$overallRank >= 67] * 0.9)
projections$cost[is.na(projections$cost)==TRUE] <- 1
projections$cost[projections$cost==0] <- 1
projections$inflatedCost[projections$inflatedCost==0] <- 1
projections$inflatedCost
projections$cost
shinyData1 <- projections[,c("name","pos","team","overallRank","positionRank","pick","vor","projections","risk","cost")]
shinyData2 <- na.omit(projections[,c("name","pos","projections","risk","cost")])
shinyData <- shinyData1[shinyData1$name %in% shinyData2$name,]
shinyData$positionRank[shinyData$pos=="QB"] <- rank(-shinyData$projections[shinyData$pos=="QB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="RB"] <- rank(-shinyData$projections[shinyData$pos=="RB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="WR"] <- rank(-shinyData$projections[shinyData$pos=="WR"], ties.method="min")
shinyData$positionRank[shinyData$pos=="TE"] <- rank(-shinyData$projections[shinyData$pos=="TE"], ties.method="min")
shinyData$overallRank <- rank(-shinyData$projections, ties.method="min")
shinyData <- shinyData[order(-shinyData$projections),]
row.names(shinyData) <- 1:dim(shinyData)[1]
shinyData
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/Avg Cost.R', echo=TRUE)
#Library
library("shiny")
library("Rglpk")
#Load data
load(paste(getwd(),"/Data/shinyData-2013.RData", sep=""))
#Create Optimization Function
optimizeTeam <- function(points=shinyData$projections, playerCost=shinyData$cost, maxRisk=maxRisk){ #can change points, cost, or risk #projectedPtsLatent
num.players <- length(shinyData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(shinyData$pos == "QB"), # num QB
as.numeric(shinyData$pos == "RB"), # num RB
as.numeric(shinyData$pos == "WR"), # num WR
as.numeric(shinyData$pos == "TE"), # num TE
diag(shinyData$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c("==",
">=",
">=",
">=",
rep("<=", num.players),
"<=",
"==")
b <- c(numQBstarters,
numRBstarters,
numWRstarters,
numTEstarters,
rep(maxRisk, num.players),
maxCost,
numTotalStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(merge(draftData[draftData$name %in% shinyData[sol$solution == 1,"name"],c("name","pos","team")], shinyData[sol$solution == 1,c("name","projections","risk","cost")], by="name"))
sol$totalCost <- sum(playerCost * sol$solution)
sol$players <- shinyData$name[sol$solution == 1]
return(sol)
}
optimizeTeam(maxRisk=maxRisk)
load(paste(getwd(),"/Data/AvgCost-2013.RData", sep=""))
#Roster Optimization
optimizeData <- na.omit(projections[,c("name","pos","projections","risk","inflatedCost")]) #projectedPtsLatent
optimizeTeam(maxRisk=maxRisk)
optimizeTeam(maxRisk=100)
optimizeTeam(maxRisk=5.1)
optimizeTeam(maxRisk=5.0)
optimizeTeam(maxRisk=4.9)
runApp("~/shinyapp")
get(wd)
getwd()
save(shinyData, file = paste(getwd(),"/shinyapp/shinyData-2013.RData", sep=""))
save(shinyData, file = paste(getwd(),"/shinyapp/shinyData.RData", sep=""))
setwd("~/shinyapp")
setwd("./shinyapp")
getwd
getwd()
library("shiny")
runApp("~/shinyapp")
runApp("/shinyapp")
runApp("./shinyapp")
runApp("shinyapp")
runApp("")
runApp("shinyapp")
runApp()
runApp()
runApp()
install_github("shiny", "rstudio", ref="5a947f83a10d7311b57b7f6091313f61c58c93e7")
install.packages('httpuv', repos=c(RStudio='http://rstudio.org/_packages', CRAN='http://cran.rstudio.com'))
install.packages('devtools')  # if you don't already have devtools installed
install.packages("httpuv", repos = c(RStudio = "http://rstudio.org/_packages",
CRAN='http://cran.rstudio.com'))
install.packages('devtools')
devtools::install_github('shiny', 'rstudio')
#runApp()
#runApp()
getwd()
runApp("~/shinyapp")
runApp("~/shinyapp")
library("shiny")
runApp("~/shinyapp")
runApp()
setwd("~/shinyapp")
setwd("./shinyapp")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("./shinyData.RData")
shinyData
runApp()
runApp()
?as.integer
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?h3
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyData
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
optimizeTeam(maxRisk=100)
optimizeTeam(maxRisk=100)
optimizeTeam(maxRisk=100, maxCost=100)
runApp()
runApp()
runApp()
maxCost=1000
points=shinyData$projections
playerCost=projectedCost()
playerCost=ceiling(shinyData$cost * (200/200))
playerCost
playerCost
maxCost
numTotalStarters=7
maxRisk
maxRisk=100
num.players <- length(shinyData$name)
num.players
var.types <- rep("B", num.players)
var.types
A <- rbind(as.numeric(shinyData$pos == "QB"), # num QB
as.numeric(shinyData$pos == "RB"), # num RB
as.numeric(shinyData$pos == "WR"), # num WR
as.numeric(shinyData$pos == "TE"), # num TE
diag(shinyData$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
A
head(A)
dim(A)
dir <- c("==",
">=",
">=",
">=",
rep("<=", num.players),
"<=",
"==")
dir
b <- c(numQBstarters,
numRBstarters,
numWRstarters,
numTEstarters,
rep(maxRisk, num.players),
maxCost,
numTotalStarters)
b
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol
sol$playerInfo <- as.data.frame(merge(shinyData[shinyData$name %in% shinyData[sol$solution == 1,"name"],c("name","pos","team")], shinyData[sol$solution == 1,c("name","projections","risk","cost")], by="name"))
sol$playerInfo
as.integer(sol$playerInfo[,"cost"])
sum(playerCost * sol$solution)
sol$playerInfo[,"cost"]
sol$playerInfo[,"cost"] <- as.integer(sol$playerInfo[,"cost"])
sol$totalCost <- sum(playerCost * sol$solution)
sol$totalCost
sol$players <- shinyData$name[sol$solution == 1]
sol$players
sol$playerInfo
sol
runApp()
runApp()
library("shiny")
runApp()
setwd("./shinyapp")
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
