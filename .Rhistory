library("XML")
qb <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=0", stringsAsFactors = FALSE)$playertable_0
rb1 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2", stringsAsFactors = FALSE)$playertable_0
rb2 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2&startIndex=40", stringsAsFactors = FALSE)$playertable_0
rb3 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2&startIndex=80", stringsAsFactors = FALSE)$playertable_0
wr1 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4", stringsAsFactors = FALSE)$playertable_0
wr2 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4&startIndex=40", stringsAsFactors = FALSE)$playertable_0
wr3 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4&startIndex=80", stringsAsFactors = FALSE)$playertable_0
te <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=6", stringsAsFactors = FALSE)$playertable_0
fileList <- c("qb","rb1","rb2","rb3","wr1","wr2","wr3","te")
for(i in 1:length(fileList)){
assign(fileList[i],get(fileList[i])[2:dim(get(fileList[i]))[1],])
t <- get(fileList[i])
names(t) <-  c("rank","player","passCompAtt","passYds","passTds","passInt","rush","rushYds","rushTds","rec","recYds","recTds","pts")
assign(fileList[i], t)
}
rb <- rbind(rb1,rb2,rb3)
wr <- rbind(wr1,wr2,wr3)
qb$pos <- as.factor("QB")
rb$pos <- as.factor("RB")
wr$pos <- as.factor("WR")
te$pos <- as.factor("TE")
projections <- rbind(qb,rb,wr,te)
projections
for(i in 1:length(fileList)){
assign(fileList[i],get(fileList[i])[2:dim(get(fileList[i]))[1],])
t <- get(fileList[i])
names(t) <-  c("positionRank","player","passCompAtt","passYds","passTds","passInt","rush","rushYds","rushTds","rec","recYds","recTds","projectedPts")
assign(fileList[i], t)
}
rb <- rbind(rb1,rb2,rb3)
wr <- rbind(wr1,wr2,wr3)
#Add variable for player position
qb$pos <- as.factor("QB")
rb$pos <- as.factor("RB")
wr$pos <- as.factor("WR")
te$pos <- as.factor("TE")
#Merge players across positions
projections <- rbind(qb,rb,wr,te)
fileList <- c("qb","rb1","rb2","rb3","wr1","wr2","wr3","te")
for(i in 1:length(fileList)){
assign(fileList[i],get(fileList[i])[2:dim(get(fileList[i]))[1],])
t <- get(fileList[i])
names(t) <-  c("positionRank","player","passCompAtt","passYds","passTds","passInt","rush","rushYds","rushTds","rec","recYds","recTds","projectedPts")
assign(fileList[i], t)
}
rb <- rbind(rb1,rb2,rb3)
wr <- rbind(wr1,wr2,wr3)
qb$pos <- as.factor("QB")
rb$pos <- as.factor("RB")
wr$pos <- as.factor("WR")
te$pos <- as.factor("TE")
#Merge players across positions
projections <- rbind(qb,rb,wr,te)
qb
qb <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=0", stringsAsFactors = FALSE)$playertable_0
rb1 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2", stringsAsFactors = FALSE)$playertable_0
rb2 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2&startIndex=40", stringsAsFactors = FALSE)$playertable_0
rb3 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2&startIndex=80", stringsAsFactors = FALSE)$playertable_0
wr1 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4", stringsAsFactors = FALSE)$playertable_0
wr2 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4&startIndex=40", stringsAsFactors = FALSE)$playertable_0
wr3 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4&startIndex=80", stringsAsFactors = FALSE)$playertable_0
te <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=6", stringsAsFactors = FALSE)$playertable_0
#Add variable names for each object
fileList <- c("qb","rb1","rb2","rb3","wr1","wr2","wr3","te")
for(i in 1:length(fileList)){
assign(fileList[i],get(fileList[i])[2:dim(get(fileList[i]))[1],])
t <- get(fileList[i])
names(t) <-  c("positionRank","player","passCompAtt","passYds","passTds","passInt","rush","rushYds","rushTds","rec","recYds","recTds","projectedPts")
assign(fileList[i], t)
}
rb <- rbind(rb1,rb2,rb3)
wr <- rbind(wr1,wr2,wr3)
#Add variable for player position
qb$pos <- as.factor("QB")
rb$pos <- as.factor("RB")
wr$pos <- as.factor("WR")
te$pos <- as.factor("TE")
projections <- rbind(qb,rb,wr,te)
str(projections)
lapply(projections[,2:3],as.numeric)
lapply(projections[,4:5],as.numeric)
names(projections)
lapply(projections[,c(1,4,5,6,7,8,9,10,11,12,13)],as.numeric)
apply(projections[,c(1,4,5,6,7,8,9,10,11,12,13)],as.numeric)
sapply(projections[,c(1,4,5,6,7,8,9,10,11,12,13)],as.numeric)
?apply
projections <- rbind(qb,rb,wr,te)
#Convert variables from character strings to numeric
projections$passYds <- as.numeric(projections$passYds)
projections$passTds <- as.numeric(projections$passTds)
projections$passInt <- as.numeric(projections$passInt)
projections$rush <- as.numeric(projections$rush)
projections$rushYds <- as.numeric(projections$rushYds)
projections$rushTds <- as.numeric(projections$rushTds)
projections$rec <- as.numeric(projections$rec)
projections$recYds <- as.numeric(projections$recYds)
projections$recTds <- as.numeric(projections$recTds)
projections$pts <- as.numeric(projections$pts)
projections <- rbind(qb,rb,wr,te)
projections
str(projections)
projections$positionRank <- as.numeric(projections$positionRank)
projections$passYds <- as.numeric(projections$passYds)
projections$passTds <- as.numeric(projections$passTds)
projections$passInt <- as.numeric(projections$passInt)
projections$rush <- as.numeric(projections$rush)
projections$rushYds <- as.numeric(projections$rushYds)
projections$rushTds <- as.numeric(projections$rushTds)
projections$rec <- as.numeric(projections$rec)
projections$recYds <- as.numeric(projections$recYds)
projections$recTds <- as.numeric(projections$recTds)
projections$projectedPts <- as.numeric(projections$projectedPts)
str(projections)
?strsplit
projections$passInt <- as.numeric(projections$passInt)
projections
strsplit(projections$passCompAtt, split="\\/")
?str_sub
library("stringr")
?str_sub
str_sub(projections$passCompAtt)
str_sub(projections$passCompAtt, end"/")
str_sub(projections$passCompAtt, end="/")
str_sub(projections$passCompAtt, end="\\/")
str_locate(string=projections$passCompAtt, '/')
str_sub(projections$passCompAtt, end=str_locate(string=projections$passCompAtt, '/')[,1])
str_sub(projections$passCompAtt, end=str_locate(string=projections$passCompAtt, '/')[,1]-1)
projections$passComp <- as.numeric(str_sub(projections$passCompAtt, end=str_locate(string=projections$passCompAtt, '/')[,1]-1))
projections$passComp
as.numeric(str_sub(string=projections$passCompAtt, start=str_locate(string=projections$passCompAtt, '/')[,1]+1))
projections$passAtt <- as.numeric(str_sub(string=projections$passCompAtt, start=str_locate(string=projections$passCompAtt, '/')[,1]+1))
projections[,c("passCompAtt","passComp","passAtt")]
projections <- rbind(qb,rb,wr,te)
projections$passComp <- as.numeric(str_sub(string=projections$passCompAtt, end=str_locate(string=projections$passCompAtt, '/')[,1]-1))
projections$passAtt <- as.numeric(str_sub(string=projections$passCompAtt, start=str_locate(string=projections$passCompAtt, '/')[,1]+1))
projections$positionRank <- as.numeric(projections$positionRank)
projections$passYds <- as.numeric(projections$passYds)
projections$passTds <- as.numeric(projections$passTds)
projections$passInt <- as.numeric(projections$passInt)
projections$rush <- as.numeric(projections$rush)
projections$rushYds <- as.numeric(projections$rushYds)
projections$rushTds <- as.numeric(projections$rushTds)
projections$rec <- as.numeric(projections$rec)
projections$recYds <- as.numeric(projections$recYds)
projections$recTds <- as.numeric(projections$recTds)
projections$projectedPts <- as.numeric(projections$projectedPts)
projections
projections$name <- str_sub(projections$player,end = str_locate(string=projections$player, ',')[,1]-1) #unlist(strsplit(projections$player, ","))[seq(1,length(unlist(strsplit(projections$player, ","))),by=2)]
projections$name <- str_replace_all(projections$name, "\\*", "") #projections$name <- str_replace_all(projections$name, "[[:punct:]]", "")
projections[which(projections$name=="Steve Johnson"),"name"] <- "Stevie Johnson"
projections
projections$overallRank <- rank(-projections$projectedPts, ties.method="min")
projections
str_locate(string=projections$player, ',')[,1]+1
str_sub(projections$player, start=str_locate(string=projections$player, ',')[,1]+1)
str_sub(projections$player, start=str_locate(string=projections$player, ',')[,1]+2)
str_sub(projections$player, start=str_locate(string=projections$player, ',')[,1]+2, end = str_locate(string=projections$player, ',')[,1]+5)
str_sub(projections$player, start=str_locate(string=projections$player, ',')[,1]+2, end = str_locate(string=projections$player, ',')[,1]+4)
str_replace_all(projections$name, " ", "")
str_replace_all(projections$team, " ", "")
projections$team <- str_sub(projections$player, start=str_locate(string=projections$player, ',')[,1]+2, end = str_locate(string=projections$player, ',')[,1]+4)
str_replace_all(projections$team, " ", "")
str_replace_all(projections$team, "[[:punct:]]", "")
?str_trim
str_trim(projections$team, side="right")
projections$team <- str_trim(projections$team, side="right")
projections <- rbind(qb,rb,wr,te)
#Separate pass completions from attempts
projections$passComp <- as.numeric(str_sub(string=projections$passCompAtt, end=str_locate(string=projections$passCompAtt, '/')[,1]-1))
projections$passAtt <- as.numeric(str_sub(string=projections$passCompAtt, start=str_locate(string=projections$passCompAtt, '/')[,1]+1))
#Convert variables from character strings to numeric
projections$positionRank <- as.numeric(projections$positionRank)
projections$passYds <- as.numeric(projections$passYds)
projections$passTds <- as.numeric(projections$passTds)
projections$passInt <- as.numeric(projections$passInt)
projections$rush <- as.numeric(projections$rush)
projections$rushYds <- as.numeric(projections$rushYds)
projections$rushTds <- as.numeric(projections$rushTds)
projections$rec <- as.numeric(projections$rec)
projections$recYds <- as.numeric(projections$recYds)
projections$recTds <- as.numeric(projections$recTds)
projections$projectedPts <- as.numeric(projections$projectedPts)
#Player names
projections$name <- str_sub(projections$player, end=str_locate(string=projections$player, ',')[,1]-1) #unlist(strsplit(projections$player, ","))[seq(1,length(unlist(strsplit(projections$player, ","))),by=2)]
projections$name <- str_replace_all(projections$name, "\\*", "") #projections$name <- str_replace_all(projections$name, "[[:punct:]]", "")
projections[which(projections$name=="Steve Johnson"),"name"] <- "Stevie Johnson"
#Player teams
projections$team <- str_sub(projections$player, start=str_locate(string=projections$player, ',')[,1]+2, end = str_locate(string=projections$player, ',')[,1]+4)
projections$team <- str_trim(projections$team, side="right")
projections
projections$overallRank <- rank(-projections$projectedPts, ties.method="min")
projections
projections[,c("name","pos","team","positionRank","overallRank","passAtt","passComp","passYds","passTds","passInt","rushYds","rushTds","recYds","recTds","projectedPts")]
projections[order(projections$overallRank),]
projections <- projections[order(projections$overallRank),]
projections
projections <- projections[,c("name","pos","team","positionRank","overallRank","passAtt","passComp","passYds","passTds","passInt","rushYds","rushTds","recYds","recTds","projectedPts")]
#Order players by overall rank
projections <- projections[order(projections$overallRank),]
projections
row.names(projections) <- 1:max(as.numeric(row.names(projections)))
max(as.numeric(row.names(projections)))
projections
dim(projections)
row.names(projections) <- 1:dim(projections)[1]
projections
source('~/GitHub/FantasyFootballAnalyticsR/ESPN Projections.R', echo=TRUE)
projections
getwd()
?save
save(projections, file = "~/Data/ESPN-Projections-2012.RData")
#Load libraries
library("XML")
library("stringr")
#Download fantasy football projections from ESPN.com
qb <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=0", stringsAsFactors = FALSE)$playertable_0
rb1 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2", stringsAsFactors = FALSE)$playertable_0
rb2 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2&startIndex=40", stringsAsFactors = FALSE)$playertable_0
rb3 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=2&startIndex=80", stringsAsFactors = FALSE)$playertable_0
wr1 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4", stringsAsFactors = FALSE)$playertable_0
wr2 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4&startIndex=40", stringsAsFactors = FALSE)$playertable_0
wr3 <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=4&startIndex=80", stringsAsFactors = FALSE)$playertable_0
te <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2012&slotCategoryId=6", stringsAsFactors = FALSE)$playertable_0
#Add variable names for each object
fileList <- c("qb","rb1","rb2","rb3","wr1","wr2","wr3","te")
for(i in 1:length(fileList)){
assign(fileList[i],get(fileList[i])[2:dim(get(fileList[i]))[1],])
t <- get(fileList[i])
names(t) <-  c("positionRank","player","passCompAtt","passYds","passTds","passInt","rush","rushYds","rushTds","rec","recYds","recTds","pts")
assign(fileList[i], t)
}
#Merge players within position
rb <- rbind(rb1,rb2,rb3)
wr <- rbind(wr1,wr2,wr3)
#Add variable for player position
qb$pos <- as.factor("QB")
rb$pos <- as.factor("RB")
wr$pos <- as.factor("WR")
te$pos <- as.factor("TE")
#Merge players across positions
projections <- rbind(qb,rb,wr,te)
#Separate pass completions from attempts
projections$passComp <- as.numeric(str_sub(string=projections$passCompAtt, end=str_locate(string=projections$passCompAtt, '/')[,1]-1))
projections$passAtt <- as.numeric(str_sub(string=projections$passCompAtt, start=str_locate(string=projections$passCompAtt, '/')[,1]+1))
#Convert variables from character strings to numeric
projections$positionRank <- as.numeric(projections$positionRank)
projections$passYds <- as.numeric(projections$passYds)
projections$passTds <- as.numeric(projections$passTds)
projections$passInt <- as.numeric(projections$passInt)
projections$rush <- as.numeric(projections$rush)
projections$rushYds <- as.numeric(projections$rushYds)
projections$rushTds <- as.numeric(projections$rushTds)
projections$rec <- as.numeric(projections$rec)
projections$recYds <- as.numeric(projections$recYds)
projections$recTds <- as.numeric(projections$recTds)
projections$pts <- as.numeric(projections$pts)
#Player names
projections$name <- str_sub(projections$player, end=str_locate(string=projections$player, ',')[,1]-1)
projections$name <- str_replace_all(projections$name, "\\*", "")
projections[which(projections$name=="Steve Johnson"),"name"] <- "Stevie Johnson"
#Player teams
projections$team <- str_sub(projections$player, start=str_locate(string=projections$player, ',')[,1]+2, end = str_locate(string=projections$player, ',')[,1]+4)
projections$team <- str_trim(projections$team, side="right")
#Calculate overall rank
projections$overallRank <- rank(-projections$pts, ties.method="min")
#Order variables in data set
projections <- projections[,c("name","pos","team","positionRank","overallRank","passAtt","passComp","passYds","passTds","passInt","rushYds","rushTds","recYds","recTds","pts")]
#Order players by overall rank
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:dim(projections)[1]
save(projections, file = "~/Data/ESPN-Projections-2012.RData")
getwd()
paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep="")
save(projections, file = paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep=""))
load(paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep=""))
projections
projections
projections$projectedPts <- (projections$passYds*passYdsMultiplier) + (projections$passTds*passTdsMultiplier) + (projections$passInt*passIntMultiplier) + (projections$rushYds*rushYdsMultiplier) + (projections$rushTds*rushTdsMultiplier) + (projections$recYds*recYdsMultiplier) + (projections$recTds*recTdsMultiplier)
passYdsMultiplier <- (1/25) #1 pt per 25 pass yds
passTdsMultiplier <- 4      #4 pts per pass td
passIntMultiplier <- -3     #-3 pts per INT
rushYdsMultiplier <- (1/10) #1 pt per 10 rush yds
rushTdsMultiplier <- 6      #6 pts per rush td
recYdsMultiplier <- (1/8)   #1 pt per 8 rec yds
recTdsMultiplier <- 6       #6 pts per rec td
fumlMultiplier <- -3        #-3 pts per fumble (not included in ESPN projections, however)
load(paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep=""))
#Calculate projected points for your league
projections$projectedPts <- (projections$passYds*passYdsMultiplier) + (projections$passTds*passTdsMultiplier) + (projections$passInt*passIntMultiplier) + (projections$rushYds*rushYdsMultiplier) + (projections$rushTds*rushTdsMultiplier) + (projections$recYds*recYdsMultiplier) + (projections$recTds*recTdsMultiplier)
projections
actualPoints <- read.csv(paste(getwd(),"/Data/Yahoo-actualpoints-2012.csv", sep=""))
actualPoints
actualPoints <- read.csv(paste(getwd(),"/Data/Yahoo-actualpoints-2012.csv", sep=""))
actualPoints
actualPoints[which(actualPoints$Fan.Pts!=""),]
actualPoints <- actualPoints[which(actualPoints$Fan.Pts!=""),]
str(actualPoints)
actualPoints$name <- as.character(actualPoints$Player)
actualPoints
actualPoints$actualPts <- actualPoints$Fan.Pts
actualPoints <- actualPoints[,c("name","actualPts")]
actualPoints
row.names(actualPoints) <- 1:dim(actualPoints)[1]
actualPoints
passYdsMultiplier <- (1/25) #1 pt per 25 pass yds
passTdsMultiplier <- 4      #4 pts per pass td
passIntMultiplier <- -3     #-3 pts per INT
rushYdsMultiplier <- (1/10) #1 pt per 10 rush yds
rushTdsMultiplier <- 6      #6 pts per rush td
recYdsMultiplier <- (1/8)   #1 pt per 8 rec yds
recTdsMultiplier <- 6       #6 pts per rec td
fumlMultiplier <- -3        #-3 pts per fumble (not included in ESPN projections, however)
#Load data
load(paste(getwd(),"/Data/ESPN-Projections-2012.RData", sep=""))
projections$projectedPts <- (projections$passYds*passYdsMultiplier) + (projections$passTds*passTdsMultiplier) + (projections$passInt*passIntMultiplier) + (projections$rushYds*rushYdsMultiplier) + (projections$rushTds*rushTdsMultiplier) + (projections$recYds*recYdsMultiplier) + (projections$recTds*recTdsMultiplier)
#Save file
save(projections, file = paste(getwd(),"/Data/ESPN-LeagueProjections-2012.RData", sep=""))
load(paste(getwd(),"/Data/ESPN-LeagueProjections-2012.RData", sep=""))
actualPoints <- read.csv(paste(getwd(),"/Data/Yahoo-actualpoints-2012.csv", sep=""))
#Calculate projected points for your league
projections$projectedPts <- (projections$passYds*passYdsMultiplier) + (projections$passTds*passTdsMultiplier) + (projections$passInt*passIntMultiplier) + (projections$rushYds*rushYdsMultiplier) + (projections$rushTds*rushTdsMultiplier) + (projections$recYds*recYdsMultiplier) + (projections$recTds*recTdsMultiplier)
#Cleanup Yahoo actual points data
actualPoints <- actualPoints[which(actualPoints$Fan.Pts!=""),]
actualPoints$name <- as.character(actualPoints$Player)
actualPoints$actualPts <- actualPoints$Fan.Pts
actualPoints <- actualPoints[,c("name","actualPts")]
row.names(actualPoints) <- 1:dim(actualPoints)[1]
actualPoints
projectedWithActualPts <- merge(projections, actualPoints, by="name", all.x=TRUE)
projectedWithActualPts
duplicated(projectedWithActualPts$name)
projectedWithActualPts[!duplicated(projectedWithActualPts)]
projectedWithActualPts[!duplicated(projectedWithActualPts),]
projectedWithActualPts[!duplicated(projectedWithActualPts$name),]
projectedWithActualPts
cor.test(projectedWithActualPts$projectedPts, projectedWithActualPts$actualPts)
cor(projectedWithActualPts$projectedPts, projectedWithActualPts$actualPts)
?cor
cor(projectedWithActualPts$projectedPts, projectedWithActualPts$actualPts, use="pairwise.complete.obs")
cor(projectedWithActualPts$projectedPts, projectedWithActualPts$actualPts, use="pairwise.complete.obs")^2
save(projectedWithActualPts, file = paste(getwd(),"/Data/projectedWithActualPoints-2012.RData", sep=""))
projectedWithActualPts[which(projectedWithActualPts$projectedPts!=0),]
projectedWithActualPtsNoZeros <- projectedWithActualPts[which(projectedWithActualPts$projectedPts!=0),]
cor.test(projectedWithActualPtsNoZeros$projectedPts, projectedWithActualPtsNoZeros$actualPts) #r=.707, p<.001
cor(projectedWithActualPtsNoZeros$projectedPts, projectedWithActualPtsNoZeros$actualPts, use="pairwise.complete.obs")^2 #r-squared = .50
library("XML")
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)$`NULL`
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[2]
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[3]
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[4]
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[5]
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[6]
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[7]
qb <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[7]
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season", stringsAsFactors = FALSE)[7]
readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season?&start_row=51", stringsAsFactors = FALSE)[7]
qb <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[7]
rb1 <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season", stringsAsFactors = FALSE)[7]
rb2 <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season?&start_row=51", stringsAsFactors = FALSE)[7]
wr1 <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/WR/season", stringsAsFactors = FALSE)[7]
wr2 <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/WR/season?&start_row=51", stringsAsFactors = FALSE)[7]
te <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/TE/season", stringsAsFactors = FALSE)[7]
qb
