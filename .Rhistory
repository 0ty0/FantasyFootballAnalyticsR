load(paste(getwd(),"/Data/FantasyPros-Projections-2013.RData", sep=""))
#Risk Data
riskData <- projections[,c("name","risk")]
#Avg & Projected Cost
avgcost <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
###Fantasy Pros
avgcost$name <- str_sub(avgcost[,c("Player (pos, team, bye)")], end=str_locate(avgcost[,c("Player (pos, team, bye)")], ',')[,1]-1)
#avgcost$cost <- as.numeric(sub("\\$","", avgcost$Ave)) ###IMPORTANT: Avg cost for FantasyPros is messed up bc they have a source with cost of zeros for all players -- use max instead
avgcost$cost <- as.numeric(sub("\\$","", avgcost$Max))
avgcost <- avgcost[,c("name","cost")]
#Rename Players
avgcost[grep("Beanie", avgcost[,c("name")]),"name"] <- "Beanie Wells"
avgcost[grep("Ty Hilton", avgcost[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost[grep("Robert Housler", avgcost[,c("name")]),"name"] <- "Rob Housler"
#avgcost[grep("Reuben Randle", avgcost[,c("name")]),"name"] <- "Rueben Randle"
#avgcost[grep("Joseph Morgan", avgcost[,c("name")]),"name"] <- "Joe Morgan"
avgcost[grep("Christopher Ivory", avgcost[,c("name")]),"name"] <- "Chris Ivory"
#Merge
projections <- merge(projections_fp, riskData, by="name", all.x=TRUE)
projections <- merge(projections, avgcost, by="name", all.x=TRUE)
projections$cost[is.na(projections$cost)==TRUE] <- 0
#Remove duplicate cases
projections[duplicated(projections$name),"name"]
projections[projections$name %in% projections[duplicated(projections$name),"name"],]
#Modify variable names
projections$team <- projections$team_fp
projections$passYds <- projections$passYds_fp
projections$passTds <- projections$passTds_fp
projections$passInt <- projections$passInt_fp
projections$rushYds <- projections$rushYds_fp
projections$rushTds <- projections$rushTds_fp
projections$rec <- projections$rec_fp
projections$recYds <- projections$recYds_fp
projections$recTds <- projections$recTds_fp
projections$twoPts <- projections$twoPts_fp
projections$fumbles <- projections$fumbles_fp
projections$points <- projections$pts_fp
#Subset data to keep players with no missing values for name/pos/points/risk/cost
shinyData1 <- projections[,c("name","pos","team","passYds","passTds","passInt","rushYds","rushTds","rec","recYds","recTds","twoPts","fumbles","points","cost","risk")]
shinyData2 <- na.omit(projections[,c("name","pos","points","cost","risk")])
shinyData <- shinyData1[shinyData1$name %in% shinyData2$name,]
#Calculate Position Rank
shinyData$positionRank[shinyData$pos=="QB"] <- rank(-shinyData$points[shinyData$pos=="QB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="RB"] <- rank(-shinyData$points[shinyData$pos=="RB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="WR"] <- rank(-shinyData$points[shinyData$pos=="WR"], ties.method="min")
shinyData$positionRank[shinyData$pos=="TE"] <- rank(-shinyData$points[shinyData$pos=="TE"], ties.method="min")
#Calculate Overall Rank
shinyData$overallRank <- rank(-shinyData$points, ties.method="min")
#Order Data by Overall Rank
shinyData <- shinyData[order(-shinyData$points),]
row.names(shinyData) <- 1:dim(shinyData)[1]
#Select Variables to Keep
shinyData <- shinyData[,c("name","pos","team","overallRank","positionRank","passYds","passTds","passInt","rushYds","rushTds","rec","recYds","recTds","twoPts","fumbles","cost","risk")] #,"points"
#Save file
shinyData
avgcost <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
shinyData
avgcost
avgcost$cost <- as.numeric(sub("\\$","", avgcost$Ave))
#avgcost$cost <- as.numeric(sub("\\$","", avgcost$Max)) ###IMPORTANT: Avg cost for FantasyPros is messed up bc they have a source with cost of zeros for all players -- use max instead
avgcost <- avgcost[,c("name","cost")]
#Load data
load(paste(getwd(),"/Data/FantasyPros-Projections-2013.RData", sep=""))
#Risk Data
riskData <- projections[,c("name","risk")]
#Avg & Projected Cost
avgcost <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
###Fantasy Pros
avgcost$name <- str_sub(avgcost[,c("Player (pos, team, bye)")], end=str_locate(avgcost[,c("Player (pos, team, bye)")], ',')[,1]-1)
avgcost$cost <- as.numeric(sub("\\$","", avgcost$Ave))
#avgcost$cost <- as.numeric(sub("\\$","", avgcost$Max)) ###IMPORTANT: Avg cost for FantasyPros is messed up bc they have a source with cost of zeros for all players -- use max instead
avgcost <- avgcost[,c("name","cost")]
avgcost
avgcost <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
avgcost
###Fantasy Pros
avgcost$name <- str_sub(avgcost[,c("Player (pos, team, bye)")], end=str_locate(avgcost[,c("Player (pos, team, bye)")], ',')[,1]-1)
avgcost$cost <- as.numeric(sub("\\$","", avgcost$Ave))
#avgcost$cost <- as.numeric(sub("\\$","", avgcost$Max)) ###IMPORTANT: Avg cost for FantasyPros is messed up bc they have a source with cost of zeros for all players -- use max instead
avgcost <- avgcost[,c("name","cost")]
#Rename Players
avgcost[grep("Beanie", avgcost[,c("name")]),"name"] <- "Beanie Wells"
avgcost[grep("Ty Hilton", avgcost[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost[grep("Robert Housler", avgcost[,c("name")]),"name"] <- "Rob Housler"
#avgcost[grep("Reuben Randle", avgcost[,c("name")]),"name"] <- "Rueben Randle"
#avgcost[grep("Joseph Morgan", avgcost[,c("name")]),"name"] <- "Joe Morgan"
avgcost[grep("Christopher Ivory", avgcost[,c("name")]),"name"] <- "Chris Ivory"
#Merge
projections <- merge(projections_fp, riskData, by="name", all.x=TRUE)
projections <- merge(projections, avgcost, by="name", all.x=TRUE)
projections$cost[is.na(projections$cost)==TRUE] <- 0
#Remove duplicate cases
projections[duplicated(projections$name),"name"]
projections[projections$name %in% projections[duplicated(projections$name),"name"],]
#Modify variable names
projections$team <- projections$team_fp
projections$passYds <- projections$passYds_fp
projections$passTds <- projections$passTds_fp
projections$passInt <- projections$passInt_fp
projections$rushYds <- projections$rushYds_fp
projections$rushTds <- projections$rushTds_fp
projections$rec <- projections$rec_fp
projections$recYds <- projections$recYds_fp
projections$recTds <- projections$recTds_fp
projections$twoPts <- projections$twoPts_fp
projections$fumbles <- projections$fumbles_fp
projections$points <- projections$pts_fp
#Subset data to keep players with no missing values for name/pos/points/risk/cost
shinyData1 <- projections[,c("name","pos","team","passYds","passTds","passInt","rushYds","rushTds","rec","recYds","recTds","twoPts","fumbles","points","cost","risk")]
shinyData2 <- na.omit(projections[,c("name","pos","points","cost","risk")])
shinyData <- shinyData1[shinyData1$name %in% shinyData2$name,]
#Calculate Position Rank
shinyData$positionRank[shinyData$pos=="QB"] <- rank(-shinyData$points[shinyData$pos=="QB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="RB"] <- rank(-shinyData$points[shinyData$pos=="RB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="WR"] <- rank(-shinyData$points[shinyData$pos=="WR"], ties.method="min")
shinyData$positionRank[shinyData$pos=="TE"] <- rank(-shinyData$points[shinyData$pos=="TE"], ties.method="min")
#Calculate Overall Rank
shinyData$overallRank <- rank(-shinyData$points, ties.method="min")
#Order Data by Overall Rank
shinyData <- shinyData[order(-shinyData$points),]
row.names(shinyData) <- 1:dim(shinyData)[1]
#Select Variables to Keep
shinyData <- shinyData[,c("name","pos","team","overallRank","positionRank","passYds","passTds","passInt","rushYds","rushTds","rec","recYds","recTds","twoPts","fumbles","cost","risk")] #,"points"
#Save file
shinyData
#Save file
save(shinyData, file = paste(getwd(),"/Data/shinyData-2013.RData", sep=""))
write.csv(shinyData, file=paste(getwd(),"/Data/CSV/shinyData-2013.csv", sep=""), row.names=FALSE)
write.csv(shinyData, file=paste(getwd(),"/shinyapp/shinyData.csv", sep=""), row.names=FALSE)
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Load data
load(paste(getwd(),"/Data/AvgCost-2013.RData", sep=""))
#Optimum Risk
projectedPoints <- vector(mode="numeric", length=length(seq(min(optimizeData$risk), max(optimizeData$risk), 0.1)))
riskLevel <- vector(mode="numeric", length=length(seq(min(optimizeData$risk), max(optimizeData$risk), 0.1)))
j <- 1
pb <- txtProgressBar(min = 0, max = max(optimizeData$risk), style = 3)
for (i in seq(0, max(optimizeData$risk), 0.1)){
setTxtProgressBar(pb, i)
projectedPoints[j] <- optimizeTeam(maxRisk=i)$optimum
riskLevel[j] <- i
j <- j+1
}
riskData <- as.data.frame(cbind(riskLevel,projectedPoints))
riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
optimizeTeam(maxRisk=3.3) #optimal
optimizeTeam(maxRisk=4.1) #optimal
optimizeTeam(maxRisk=100)
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point(size=3) + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points") # + geom_smooth()
ggsave(paste(getwd(),"/Figures/Optimum Risk 2013.jpg", sep=""))
dev.off()
source('F:/Users/Isaac/Documents/GitHub/FantasyFootballAnalyticsR/R Scripts/Bid Up To.R')
projections
source('F:/Users/Isaac/Documents/GitHub/FantasyFootballAnalyticsR/R Scripts/Simulation.R')
plot(riskTable$riskLevel, riskTable$projectedPoints)
riskTable[order(riskTable$projectedPoints),]
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=4.3) #optimal
optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.3) #optimal
optimizeTeam(points=optimizeData$solutionSum, maxRisk=6.8)
optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.9)
optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.3) #optimal
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)
optimizeData[optimizeData$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, c("name","projections")]
#Sum of Projected Points: 1530
sum(optimizeData[optimizeData$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, "projections"])
#Projected Points vs Actual Points
projectedWithActualPts[projectedWithActualPts$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, c("name","projections","actualPts")]
#Sum of Actual Points from last year: 1421
sum(projectedWithActualPts[projectedWithActualPts$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, "actualPts"])
optimizeTeam(maxRisk=optimalRisk)
optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.3) #optimal
optimalRisk <- 4.3
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)
#Roster + Projections
optimizeData[optimizeData$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, c("name","projections")]
#Sum of Projected Points: 1483
sum(optimizeData[optimizeData$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, "projections"])
#Sum of Projected Points: 1521
sum(optimizeData[optimizeData$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, "projections"])
#Projected Points vs Actual Points
projectedWithActualPts[projectedWithActualPts$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, c("name","projections","actualPts")]
#Sum of Actual Points from last year: 1383
sum(projectedWithActualPts[projectedWithActualPts$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, "actualPts"])
#Maximum Possible Projected Points with Same Risk: 1532
optimizeTeam(maxRisk=optimalRisk)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)
optimizeData[optimizeData$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, c("name","projections")]
#Sum of Projected Points: 1521
sum(optimizeData[optimizeData$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, "projections"])
source('F:/Users/Isaac/Documents/GitHub/FantasyFootballAnalyticsR/R Scripts/Bid Up To Simulation.R')
projections
#Specify Maximum Risk
maxRisk <- 4.3
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Load data
load(paste(getwd(),"/Data/BidUpToSimulation-2013.RData", sep=""))
load(paste(getwd(),"/Data/IDP-2013.RData", sep=""))
load(paste(getwd(),"/Data/kickers-2013.RData", sep=""))
#Subset data
draftData <- projections[,c("name","pos","team","projections","vor","simulation","sdPick","sdPts","risk","avgCost","inflatedCost","bidUpTo","bidUpToSim")] #projectedPtsLatent
draftData <- draftData[order(-draftData$vor),]
row.names(draftData) <- 1:dim(draftData)[1]
#Save data
save(draftData, file = paste(getwd(),"/Data/DraftDay-2013.RData", sep=""))
write.csv(draftData, file=paste(getwd(),"/Data/CSV/DraftDay-2013.csv", sep=""), row.names=FALSE)
draftData
options(digits=2)
draftData
removedPlayers <-  draftData[row.names(na.omit(draftData[,c("projections","simulation","risk","inflatedCost")])),] #projectedPtsLatent
row.names(removedPlayers) <- 1:dim(removedPlayers)[1]
removedPlayers
draftData
#Example: Update with drafted (i.e., unavailable) players
myteam <- data.frame(
player = c("Arian Foster", "Tom Brady", "Jacob Tamme"),
pos = c("RB", "QB", "TE"),
cost = c(64, 46, 5)
)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"Vincent Jackson","Eric Decker")
optimizeDraft(maxRisk=4.3)
optimizeDraft(maxRisk=4.3, omit=c("Vincent Jackson","Eric Decker"))
optimizeDraft(maxRisk=4.3, omit=drafted)
###--UPDATE--###
myteam <- data.frame(
player = c(),
position = c(),
cost = c()
)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"")
optimizeDraft(maxRisk=4.1, omit=drafted) #From Optimum Risk.R
optimizeDraft(maxRisk=4.3, omit=drafted, points=removedPlayers$simulation) #From Simulation.R
sum(draftData[draftData$name %in% optimizeDraft(maxRisk=4.3, omit=drafted, points=removedPlayers$simulation)$players, "projections"]) #1540
optimizeDraft(maxRisk=100, omit=drafted, points=removedPlayers$simulation)
sum(draftData[draftData$name %in% optimizeDraft(maxRisk=100, omit=drafted, points=removedPlayers$simulation)$players, "projections"]) #1536
optimizeDraft(maxRisk=4.1, omit=drafted, points=removedPlayers$simulation) #From Optimum Risk.R
optimizeTeam(points=optimizeData$solutionSum, maxRisk=3.3)
load(paste(getwd(),"/Data/simulation-2013.RData", sep=""))
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.3)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.4)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.5)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.6)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.7)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=4.0)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=4.3) #optimal
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=4.6)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=4.8)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=4.9)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=6.8)
optimizeTeam(points=optimizeData$solutionSum, maxRisk=3.3)
optimizeTeam(points=optimizeData$solutionSum, maxRisk=3.4)
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Load data
load(paste(getwd(),"/Data/BidUpTo-2013.RData", sep=""))
load(paste(getwd(),"/Data/projectedWithActualPoints-2013.RData", sep=""))
#Roster Optimization
optimizeData <- na.omit(projections[,c("name","pos","projections","risk","inflatedCost","sdPts")])
maxCost <- leagueCap - (numTotalPlayers - numTotalStarters)
#Roster Optimization Simulation
iterations <- 100000
solutionList <- matrix(nrow=dim(optimizeData)[1], ncol=iterations)
pb <- txtProgressBar(min = 0, max = iterations, style = 3)
for (i in 1:iterations){
setTxtProgressBar(pb, i)
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
solutionList[,i] <- optimizeTeam(points=optimizeData$simPts, maxRisk=100)$solution
}
solutionSum <- rowSums(solutionList, na.rm=TRUE)
plot(density(na.omit(solutionSum)))
plot(density(na.omit(solutionSum ^ (1/3))))
plot(density(log(solutionSum + 1)))
#best: log(solutionSum + 1)
optimizeData$solutionSum <- solutionSum
optimizeData$percentage <- (optimizeData$solutionSum / iterations) * 100
optimizeData <- optimizeData[order(-optimizeData$solutionSum),c("name","pos","projections","risk","inflatedCost","sdPts","solutionSum","percentage")]
optimizeData$simulation <- log(optimizeData$solutionSum + 1)
projections <- merge(projections, optimizeData[,c("name","simulation")], by="name", all.x=TRUE)
#Save file
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.3)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.4)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.3)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.4)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.5)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.6)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.7)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=4.0)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=4.3) #optimal
riskTable[order(riskTable$projectedPoints),]
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=1.9)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=2.0)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=2.1)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=2.2)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=2.3)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=2.4)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=2.5)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=2.6)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=2.7)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=2.8)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=2.9)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.1)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.2)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.3)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.6)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.7)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=4.1)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=4.3)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=5.0)
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=5.1)
optimizeDraft(maxRisk=4.1, omit=drafted, points=removedPlayers$simulation) #From Optimum Risk.R
sum(draftData[draftData$name %in% optimizeDraft(maxRisk=4.1, omit=drafted, points=removedPlayers$simulation)$players, "projections"]) #1528
optimizeDraft(maxRisk=4.3, omit=drafted, points=removedPlayers$simulation) #From Simulation.R
sum(draftData[draftData$name %in% optimizeDraft(maxRisk=4.3, omit=drafted, points=removedPlayers$simulation)$players, "projections"]) #1540
optimizeDraft(maxRisk=100, omit=drafted, points=removedPlayers$simulation)
sum(draftData[draftData$name %in% optimizeDraft(maxRisk=100, omit=drafted, points=removedPlayers$simulation)$players, "projections"]) #1536
projections
optimizeData
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=4.3) #
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=4.1)
riskTable[order(riskTable$projectedPoints),]
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.3) #
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=3.3) #optimal
optimizeTeam(points=optimizeData$solutionSum, maxRisk=3.3) #optimal
optimalRisk <- 3.3
###Determine Points for Team that Maximizes Log of Solution Sum with Risk < Optimal Risk
#Solution
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)
#Roster + Projections
optimizeData[optimizeData$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, c("name","projections")]
#Sum of Projected Points: 1521
sum(optimizeData[optimizeData$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, "projections"])
#Sum of Projected Points: 1514
sum(optimizeData[optimizeData$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, "projections"])
#Projected Points vs Actual Points
projectedWithActualPts[projectedWithActualPts$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, c("name","projections","actualPts")]
#Sum of Actual Points from last year: 1412
sum(projectedWithActualPts[projectedWithActualPts$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, "actualPts"])
optimizeTeam(maxRisk=optimalRisk)
optimizeTeam(maxRisk=4.1)
###Determine Points for Team that Maximizes Log of Solution Sum with Risk < Optimal Risk
#Solution
optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)
#Roster + Projections
optimizeData[optimizeData$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, c("name","projections")]
#Sum of Projected Points: 1514
sum(optimizeData[optimizeData$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, "projections"])
#Projected Points vs Actual Points
projectedWithActualPts[projectedWithActualPts$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, c("name","projections","actualPts")]
#Sum of Actual Points from last year: 1413
sum(projectedWithActualPts[projectedWithActualPts$name %in% optimizeTeam(points=log(optimizeData$solutionSum + 1), maxRisk=optimalRisk)$players, "actualPts"])
optimizeTeam(points=optimizeData$simulation, maxRisk=3.3) #optimal
plot(riskTable$riskLevel, riskTable$projectedPoints)
riskTable[order(riskTable$projectedPoints),]
riskData <- as.data.frame(cbind(riskLevel,projectedPoints))
riskData
#Specify Maximum Risk
maxRisk <- 4.3
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Load data
load(paste(getwd(),"/Data/BidUpToSimulation-2013.RData", sep=""))
load(paste(getwd(),"/Data/IDP-2013.RData", sep=""))
load(paste(getwd(),"/Data/kickers-2013.RData", sep=""))
#Subset data
draftData <- projections[,c("name","pos","team","projections","vor","simulation","sdPick","sdPts","risk","avgCost","inflatedCost","bidUpTo","bidUpToSim")] #projectedPtsLatent
draftData <- draftData[order(-draftData$vor),]
row.names(draftData) <- 1:dim(draftData)[1]
#Save data
save(draftData, file = paste(getwd(),"/Data/DraftDay-2013.RData", sep=""))
write.csv(draftData, file=paste(getwd(),"/Data/CSV/DraftDay-2013.csv", sep=""), row.names=FALSE)
options(digits=2)
draftData
#Day of Draft
removedPlayers <-  draftData[row.names(na.omit(draftData[,c("projections","simulation","risk","inflatedCost")])),] #projectedPtsLatent
row.names(removedPlayers) <- 1:dim(removedPlayers)[1]
removedPlayers
### RUN TO HERE ###
#Example: Update with drafted (i.e., unavailable) players
myteam <- data.frame(
player = c("Arian Foster", "Tom Brady", "Jacob Tamme"),
pos = c("RB", "QB", "TE"),
cost = c(64, 46, 5)
)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"Vincent Jackson","Eric Decker")
optimizeDraft(maxRisk=4.3)
optimizeDraft(maxRisk=4.3, omit=c("Vincent Jackson","Eric Decker"))
optimizeDraft(maxRisk=4.3, omit=drafted)
draftData[!(draftData$name %in% drafted),]
###################
### Draft Dashboard
###################
###--UPDATE--###
myteam <- data.frame(
player = c(),
position = c(),
cost = c()
)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"")
###----------###
optimizeDraft(maxRisk=3.3, omit=drafted) #From Optimum Risk.R
optimizeDraft(maxRisk=4.3, omit=drafted) #From Simulation.R
optimizeDraft(maxRisk=4.1, omit=drafted, points=removedPlayers$simulation) #From Optimum Risk.R
optimizeDraft(maxRisk=4.1, omit=drafted, points=removedPlayers$simulation) #From Optimum Risk.R
optimizeDraft(maxRisk=4.1, omit=drafted) #From Optimum Risk.R
optimizeDraft(maxRisk=3.3, omit=drafted) #From Simulation.R
optimizeDraft(maxRisk=100, omit=drafted)
optimizeDraft(maxRisk=4.1, omit=drafted, points=removedPlayers$simulation) #From Optimum Risk.R
optimizeDraft(maxRisk=4.1, omit=drafted, points=removedPlayers$simulation) #From Optimum Risk.R
sum(draftData[draftData$name %in% optimizeDraft(maxRisk=4.1, omit=drafted, points=removedPlayers$simulation)$players, "projections"]) #1528
optimizeDraft(maxRisk=3.3, omit=drafted, points=removedPlayers$simulation) #From Simulation.R
sum(draftData[draftData$name %in% optimizeDraft(maxRisk=3.3, omit=drafted, points=removedPlayers$simulation)$players, "projections"]) #1540
optimizeDraft(maxRisk=100, omit=drafted, points=removedPlayers$simulation)
sum(draftData[draftData$name %in% optimizeDraft(maxRisk=100, omit=drafted, points=removedPlayers$simulation)$players, "projections"]) #1536
optimizeDraft(maxRisk=4.1, omit=drafted) #From Optimum Risk.R
optimizeDraft(maxRisk=3.3, omit=drafted) #From Simulation.R
optimizeDraft(maxRisk=100, omit=drafted)
optimizeDraft(maxRisk=3.3, omit=drafted, points=removedPlayers$simulation) #From Simulation.R
optimizeDraft(maxRisk=4.1, omit=drafted) #From Optimum Risk.R #1554
optimizeDraft(maxRisk=3.3, omit=drafted) #From Simulation.R   #1532
optimizeDraft(maxRisk=3.3, omit=drafted, points=removedPlayers$simulation) #From Simulation.R
optimizeDraft(maxRisk=4.1, omit=drafted) #From Optimum Risk.R #1554
optimizeDraft(maxRisk=4.1, omit=drafted) #From Optimum Risk.R #1554
draftData[!(draftData$name %in% drafted) & draftData$risk >=6 & !(is.na(draftData$risk)) & !is.na(draftData$projections),]
IDP[!(IDP$name %in% drafted),]
draftData[!(draftData$name %in% drafted) & draftData$risk >=6 & !(is.na(draftData$risk)) & !is.na(draftData$projections),]
draftData[!(draftData$name %in% drafted) & draftData$vor>0 & draftData$risk < 5 & !is.na(draftData$projections),]
draftData[!(draftData$name %in% drafted) & !is.na(draftData$projections),]
#Specify Maximum Risk
maxRisk <- 4.3
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Load data
load(paste(getwd(),"/Data/BidUpToSimulation-2013.RData", sep=""))
load(paste(getwd(),"/Data/IDP-2013.RData", sep=""))
load(paste(getwd(),"/Data/kickers-2013.RData", sep=""))
#Subset data
draftData <- projections[,c("name","pos","team","projections","vor","simulation","sdPick","sdPts","risk","avgCost","inflatedCost","bidUpTo","bidUpToSim")] #projectedPtsLatent
draftData <- draftData[order(-draftData$vor),]
row.names(draftData) <- 1:dim(draftData)[1]
#Save data
save(draftData, file = paste(getwd(),"/Data/DraftDay-2013.RData", sep=""))
write.csv(draftData, file=paste(getwd(),"/Data/CSV/DraftDay-2013.csv", sep=""), row.names=FALSE)
options(digits=2)
draftData
#Day of Draft
removedPlayers <-  draftData[row.names(na.omit(draftData[,c("projections","simulation","risk","inflatedCost")])),] #projectedPtsLatent
row.names(removedPlayers) <- 1:dim(removedPlayers)[1]
removedPlayers
### RUN TO HERE ###
#Example: Update with drafted (i.e., unavailable) players
myteam <- data.frame(
player = c("Arian Foster", "Tom Brady", "Jacob Tamme"),
pos = c("RB", "QB", "TE"),
cost = c(64, 46, 5)
)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"Vincent Jackson","Eric Decker")
optimizeDraft(maxRisk=4.3)
optimizeDraft(maxRisk=4.3, omit=c("Vincent Jackson","Eric Decker"))
optimizeDraft(maxRisk=4.3, omit=drafted)
draftData[!(draftData$name %in% drafted),]
###################
### Draft Dashboard
###################
###--UPDATE--###
myteam <- data.frame(
player = c(),
position = c(),
cost = c()
)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"")
###----------###
### Optimize Team ###
# Projected Points
optimizeDraft(maxRisk=4.1, omit=drafted) #From Optimum Risk.R #1554
optimizeDraft(maxRisk=3.3, omit=drafted) #From Simulation.R   #1532
optimizeDraft(maxRisk=100, omit=drafted)                      #1568
# Simulated Points
optimizeDraft(maxRisk=4.1, omit=drafted, points=removedPlayers$simulation) #From Optimum Risk.R
sum(draftData[draftData$name %in% optimizeDraft(maxRisk=4.1, omit=drafted, points=removedPlayers$simulation)$players, "projections"]) #1494
optimizeDraft(maxRisk=3.3, omit=drafted, points=removedPlayers$simulation) #From Simulation.R
sum(draftData[draftData$name %in% optimizeDraft(maxRisk=3.3, omit=drafted, points=removedPlayers$simulation)$players, "projections"]) #1514
optimizeDraft(maxRisk=100, omit=drafted, points=removedPlayers$simulation)
sum(draftData[draftData$name %in% optimizeDraft(maxRisk=100, omit=drafted, points=removedPlayers$simulation)$players, "projections"]) #1563
### Remaining Players ###
#All
draftData[!(draftData$name %in% drafted) & !is.na(draftData$projections),]
load(paste(getwd(),"/Data/BidUpTo-2013.RData", sep=""))
projections
