#Order variables in data set
projections_fp <- projections_fp[,c("name","pos","team_fp","overallRank_fp",
"passAtt_fp","passComp_fp","passYds_fp","passTds_fp","passInt_fp",
"rushYds_fp","rushTds_fp","rec_fp","recYds_fp","recTds_fp","twoPts_fp","fumbles_fp","pts_fp")]
#Order players by overall rank
projections_fp <- projections_fp[order(projections_fp$overallRank_fp),]
row.names(projections_fp) <- 1:dim(projections_fp)[1]
#Density Plot
ggplot(projections_fp, aes(x=pts_fp)) + geom_density(fill="orange", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of FantasyPros Projected Points from 2013")
ggsave(paste(getwd(),"/Figures/FantasyPros projections 2013.jpg", sep=""))
dev.off()
#Save file
save(projections_fp, file = paste(getwd(),"/Data/FantasyPros-Projections-2013.RData", sep=""))
write.csv(projections_fp, file=paste(getwd(),"/Data/CSV/FantasyPros-Projections-2013.csv", sep=""), row.names=FALSE)
###########################
#Library
library("reshape")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Load data
load(paste(getwd(),"/Data/ESPN-Projections-2013.RData", sep=""))
load(paste(getwd(),"/Data/CBS-Projections-2013.RData", sep=""))
load(paste(getwd(),"/Data/NFL-Projections-2013.RData", sep=""))
load(paste(getwd(),"/Data/FantasyPros-Projections-2013.RData", sep=""))
#Merge projections from ESPN and CBS
projections <- merge(projections_espn, projections_cbs, by=c("name","pos"), all=TRUE)
#Remove duplicate cases
projections[duplicated(projections$name),]
#projections[projections$name %in% projections[duplicated(projections$name),"name"],]
#projections[projections$name=="Steve Smith",]
#projections[projections$name=="Steve Smith",][c(2),] <- NA
#projections <- projections[!is.na(projections$name),]
#Merge projections with NFL.com
projections <- merge(projections, projections_nfl, by=c("name","pos"), all=TRUE)
#Remove duplicate cases
projections[duplicated(projections$name),]
#projections[projections$name=="Steve Smith" & projections$team_espn=="STL",c("team_nfl","positionRank_nfl","overallRank_nfl","passYds_nfl","passTds_nfl","passInt_nfl","rushYds_nfl","rushTds_nfl","recYds_nfl","recTds_nfl","twoPts_nfl","fumbles_nfl","pts_nfl")] <- NA
#Merge projections with Fantasy Pros
projections <- merge(projections, projections_fp, by=c("name","pos"), all=TRUE)
#Remove duplicate cases
projections[duplicated(projections$name),]
projections[projections$name %in% projections[duplicated(projections$name),"name"],]
#Determine Team
projections$team <- NA
for (i in 1:dim(projections)[1]){
if(is.na(projections[i,"team_espn"])==TRUE & is.na(projections[i,"team_cbs"])==TRUE & is.na(projections[i,"team_nfl"])==TRUE){
projections[i,"team"] <- NA
} else if (is.na(projections[i,"team_espn"])==TRUE & is.na(projections[i,"team_cbs"])==TRUE){
projections[i,"team"] <- projections[i,"team_nfl"]
} else if (is.na(projections[i,"team_espn"])==TRUE & is.na(projections[i,"team_nfl"])==TRUE){
projections[i,"team"] <- projections[i,"team_cbs"]
} else if (is.na(projections[i,"team_cbs"])==TRUE & is.na(projections[i,"team_nfl"])==TRUE){
projections[i,"team"] <- projections[i,"team_espn"]
} else if (is.na(projections[i,"team_espn"])==TRUE){
ifelse(length(unique(c(projections[i,"team_cbs"],projections[i,"team_nfl"])))==1, projections[i,"team"] <- unique(c(projections[i,"team_cbs"],projections[i,"team_nfl"])), projections[i,"team"] <- paste(projections[i,"team_cbs"], projections[i,"team_nfl"], sep="/"))
} else if (is.na(projections[i,"team_cbs"])==TRUE){
ifelse(length(unique(c(projections[i,"team_espn"],projections[i,"team_nfl"])))==1, projections[i,"team"] <- unique(c(projections[i,"team_espn"],projections[i,"team_nfl"])), projections[i,"team"] <- paste(projections[i,"team_espn"], projections[i,"team_nfl"], sep="/"))
} else if (is.na(projections[i,"team_nfl"])==TRUE){
ifelse(length(unique(c(projections[i,"team_espn"],projections[i,"team_cbs"])))==1, projections[i,"team"] <- unique(c(projections[i,"team_espn"],projections[i,"team_cbs"])), projections[i,"team"] <- paste(projections[i,"team_espn"], projections[i,"team_cbs"], sep="/"))
} else if (projections[i,"team_espn"] == projections[i,"team_cbs"] && projections[i,"team_espn"] == projections[i,"team_nfl"]){
projections[i,"team"] <- projections[i,"team_espn"]
} else if (projections[i,"team_espn"] == projections[i,"team_cbs"]){
projections[i,"team"] <- projections[i,"team_espn"]
} else if (projections[i,"team_espn"] == projections[i,"team_nfl"]){
projections[i,"team"] <- projections[i,"team_nfl"]
} else if (projections[i,"team_cbs"] == projections[i,"team_nfl"]){
projections[i,"team"] <- projections[i,"team_cbs"]
} else{
projections[i,"team"] <- projections[i,"team_fp"]
}
}
projections$team
#Calculate projections from each source
projections$passYdsPts_espn <- projections$passYds_espn*passYdsMultiplier
projections$passTdsPts_espn <- projections$passTds_espn*passTdsMultiplier
projections$passIntPts_espn <- projections$passInt_espn*passIntMultiplier
projections$rushYdsPts_espn <- projections$rushYds_espn*rushYdsMultiplier
projections$rushTdsPts_espn <- projections$rushTds_espn*rushTdsMultiplier
projections$recYdsPts_espn <- projections$recYds_espn*recYdsMultiplier
projections$recTdsPts_espn <- projections$recTds_espn*recTdsMultiplier
projections$twoPts_espn <- projections$fumbles_espn*twoPtsMultiplier
projections$fumblesPts_espn <- projections$fumbles_espn*fumlMultiplier
projections$passYdsPts_cbs <- projections$passYds_cbs*passYdsMultiplier
projections$passTdsPts_cbs <- projections$passTds_cbs*passTdsMultiplier
projections$passIntPts_cbs <- projections$passInt_cbs*passIntMultiplier
projections$rushYdsPts_cbs <- projections$rushYds_cbs*rushYdsMultiplier
projections$rushTdsPts_cbs <- projections$rushTds_cbs*rushTdsMultiplier
projections$recYdsPts_cbs <- projections$recYds_cbs*recYdsMultiplier
projections$recTdsPts_cbs <- projections$recTds_cbs*recTdsMultiplier
projections$twoPts_cbs <- projections$fumbles_cbs*twoPtsMultiplier
projections$fumblesPts_cbs <- projections$fumbles_cbs*fumlMultiplier
projections$passYdsPts_nfl <- projections$passYds_nfl*passYdsMultiplier
projections$passTdsPts_nfl <- projections$passTds_nfl*passTdsMultiplier
projections$passIntPts_nfl <- projections$passInt_nfl*passIntMultiplier
projections$rushYdsPts_nfl <- projections$rushYds_nfl*rushYdsMultiplier
projections$rushTdsPts_nfl <- projections$rushTds_nfl*rushTdsMultiplier
projections$recYdsPts_nfl <- projections$recYds_nfl*recYdsMultiplier
projections$recTdsPts_nfl <- projections$recTds_nfl*recTdsMultiplier
projections$twoPts_nfl <- projections$fumbles_nfl*twoPtsMultiplier
projections$fumblesPts_nfl <- projections$fumbles_nfl*fumlMultiplier
projections$passYdsPts_fp <- projections$passYds_fp*passYdsMultiplier
projections$passTdsPts_fp <- projections$passTds_fp*passTdsMultiplier
projections$passIntPts_fp <- projections$passInt_fp*passIntMultiplier
projections$rushYdsPts_fp <- projections$rushYds_fp*rushYdsMultiplier
projections$rushTdsPts_fp <- projections$rushTds_fp*rushTdsMultiplier
projections$recYdsPts_fp <- projections$recYds_fp*recYdsMultiplier
projections$recTdsPts_fp <- projections$recTds_fp*recTdsMultiplier
projections$twoPts_fp <- projections$fumbles_fp*twoPtsMultiplier
projections$fumblesPts_fp <- projections$fumbles_fp*fumlMultiplier
projections$projectedPts_espn <- rowSums(projections[,c("passYdsPts_espn","passTdsPts_espn","passIntPts_espn","rushYdsPts_espn","rushTdsPts_espn","recYdsPts_espn","recTdsPts_espn","twoPts_espn","fumblesPts_espn")], na.rm=T)
projections$projectedPts_cbs <- rowSums(projections[,c("passYdsPts_cbs","passTdsPts_cbs","passIntPts_cbs","rushYdsPts_cbs","rushTdsPts_cbs","recYdsPts_cbs","recTdsPts_cbs","twoPts_cbs","fumblesPts_cbs")], na.rm=T)
projections$projectedPts_nfl <- rowSums(projections[,c("passYdsPts_nfl","passTdsPts_nfl","passIntPts_nfl","rushYdsPts_nfl","rushTdsPts_nfl","recYdsPts_nfl","recTdsPts_nfl","twoPts_nfl","fumblesPts_nfl")], na.rm=T)
projections$projectedPts_fp <- rowSums(projections[,c("passYdsPts_fp","passTdsPts_fp","passIntPts_fp","rushYdsPts_fp","rushTdsPts_fp","recYdsPts_fp","recTdsPts_fp","twoPts_fp","fumblesPts_fp")], na.rm=T)
#Calculate average of categories
projections$passYds <- rowMeans(projections[,c("passYds_espn","passYds_cbs","passYds_nfl","passYds_fp")], na.rm=TRUE)
projections$passTds <- rowMeans(projections[,c("passTds_espn","passTds_cbs","passTds_nfl","passTds_fp")], na.rm=TRUE)
projections$passInt <- rowMeans(projections[,c("passInt_espn","passInt_cbs","passInt_nfl","passInt_fp")], na.rm=TRUE)
projections$rushYds <- rowMeans(projections[,c("rushYds_espn","rushYds_cbs","rushYds_nfl","rushYds_fp")], na.rm=TRUE)
projections$rushTds <- rowMeans(projections[,c("rushTds_espn","rushTds_cbs","rushTds_nfl","rushTds_fp")], na.rm=TRUE)
projections$recYds <- rowMeans(projections[,c("recYds_espn","recYds_cbs","recYds_nfl","recYds_fp")], na.rm=TRUE)
projections$recTds <- rowMeans(projections[,c("recTds_espn","recTds_cbs","recTds_nfl","recTds_fp")], na.rm=TRUE)
projections$twoPts <- rowMeans(projections[,c("twoPts_espn","twoPts_cbs","twoPts_nfl","twoPts_fp")], na.rm=TRUE)
projections$fumbles <- rowMeans(projections[,c("fumbles_espn","fumbles_cbs","fumbles_nfl","fumbles_fp")], na.rm=TRUE)
#Convert NA to 0
#projections[is.na(projections$passYds)==TRUE,"passYds"] <- 0
#projections[is.na(projections$passTds)==TRUE,"passTds"] <- 0
#projections[is.na(projections$passInt)==TRUE,"passInt"] <- 0
#projections[is.na(projections$rushYds)==TRUE,"rushYds"] <- 0
#projections[is.na(projections$rushTds)==TRUE,"rushTds"] <- 0
#projections[is.na(projections$recYds)==TRUE,"recYds"] <- 0
#projections[is.na(projections$recTds)==TRUE,"recTds"] <- 0
#projections[is.na(projections$twoPts)==TRUE,"twoPts"] <- 0
#projections[is.na(projections$fumbles)==TRUE,"fumbles"] <- 0
#If one site's projection is 0, take max of sites' projections
#for (i in 1:dim(projections)[1]){
#  ifelse(projections$passYds_espn[i]==0 | projections$passYds_cbs[i]==0, projections$passYds[i] <- max(projections$passYds_espn[i], projections$passYds_cbs[i], na.rm=TRUE), projections$passYds[i] <- projections$passYds[i])
#  ifelse(projections$passTds_espn[i]==0 | projections$passTds_cbs[i]==0, projections$passTds[i] <- max(projections$passTds_espn[i], projections$passTds_cbs[i], na.rm=TRUE), projections$passTds[i] <- projections$passTds[i])
#  ifelse(projections$passInt_espn[i]==0 | projections$passInt_cbs[i]==0, projections$passInt[i] <- max(projections$passInt_espn[i], projections$passInt_cbs[i], na.rm=TRUE), projections$passInt[i] <- projections$passInt[i])
#  ifelse(projections$rushYds_espn[i]==0 | projections$rushYds_cbs[i]==0, projections$rushYds[i] <- max(projections$rushYds_espn[i], projections$rushYds_cbs[i], na.rm=TRUE), projections$rushYds[i] <- projections$rushYds[i])
#  ifelse(projections$rushTds_espn[i]==0 | projections$rushTds_cbs[i]==0, projections$rushTds[i] <- max(projections$rushTds_espn[i], projections$rushTds_cbs[i], na.rm=TRUE), projections$rushTds[i] <- projections$rushTds[i])
#  ifelse(projections$recYds_espn[i]==0 | projections$recYds_cbs[i]==0, projections$recYds[i] <- max(projections$recYds_espn[i], projections$recYds_cbs[i], na.rm=TRUE), projections$recYds[i] <- projections$recYds[i])
#  ifelse(projections$recTds_espn[i]==0 | projections$recTds_cbs[i]==0, projections$recTds[i] <- max(projections$recTds_espn[i], projections$recTds_cbs[i], na.rm=TRUE), projections$recTds[i] <- projections$recTds[i])
#  ifelse(projections$fumbles_espn[i]==0 | projections$fumbles_cbs[i]==0, projections$fumbles[i] <- max(projections$fumbles_espn[i], projections$fumbles_cbs[i], na.rm=TRUE), projections$fumbles[i] <- projections$fumbles[i])
#}
#Check projections
projections[,c("name","passYds_espn","passYds_cbs","passYds_nfl","passYds_fp","passYds")]
projections[,c("name","passTds_espn","passTds_cbs","passTds_nfl","passTds_fp","passTds")]
projections[,c("name","passInt_espn","passInt_cbs","passInt_nfl","passInt_fp","passInt")]
projections[,c("name","rushYds_espn","rushYds_cbs","rushYds_nfl","rushYds_fp","rushYds")]
projections[,c("name","rushTds_espn","rushTds_cbs","rushTds_nfl","rushTds_fp","rushTds")]
projections[,c("name","recYds_espn","recYds_cbs","recYds_nfl","recYds_fp","recYds")]
projections[,c("name","recTds_espn","recTds_cbs","recTds_nfl","recTds_fp","recTds")]
projections[,c("name","twoPts_espn","twoPts_cbs","twoPts_nfl","twoPts_fp","twoPts")]
projections[,c("name","fumbles_espn","fumbles_cbs","fumbles_nfl","fumbles_fp","fumbles")]
#Calculate projected points for your league (avg of ESPN, CBS, NFL, and Fantasy Pros projections)
projections$passYdsPts <- projections$passYds*passYdsMultiplier
projections$passTdsPts <- projections$passTds*passTdsMultiplier
projections$passIntPts <- projections$passInt*passIntMultiplier
projections$rushYdsPts <- projections$rushYds*rushYdsMultiplier
projections$rushTdsPts <- projections$rushTds*rushTdsMultiplier
projections$recYdsPts <- projections$recYds*recYdsMultiplier
projections$recTdsPts <- projections$recTds*recTdsMultiplier
projections$fumblesPts <- projections$fumbles*fumlMultiplier
projections$projectedPtsAvg <- rowSums(projections[,c("passYdsPts","passTdsPts","passIntPts","rushYdsPts","rushTdsPts","recYdsPts","recTdsPts","twoPts","fumblesPts")], na.rm=T)
#Calculate latent variable for projected points
cor(projections[,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts_fp","projectedPtsAvg")], use="pairwise.complete.obs")
factor.analysis <- factanal(~projectedPts_espn + projectedPts_cbs + projectedPts_nfl + projectedPts_fp, factors = 1, scores = "Bartlett", data=projections) #regression
factor.scores <- factor.analysis$scores
factor.loadings <- factor.analysis$loadings[,1]
factor.loadings
#projectedPtsLatent <- factor.scores
projectedPtsLatent <- as.vector(factor.scores)
projectedPtsLatent
projectionVars <- projections[,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts_fp")]
projections$projectedPtsLatent <- rowMeans(projectionVars) + apply(projectionVars,1,sd)*projectedPtsLatent
projections$projectedPtsLatent
describe(projections$projectedPtsLatent)
projections[,c("name","projectedPtsLatent")]
projections$projectedPtsLatent <- rescaleRange(variable=projections$projectedPtsLatent, minOutput=0, maxOutput=max(projections$projectedPtsAvg))
describe(projections$projectedPtsLatent)
projections[,c("name","projectedPtsLatent")]
projectionVars <- cbind(projectionVars,projections[,c("projectedPtsAvg","projectedPtsLatent")])
#Convert Zeros to NA
projections$projectedPts_espn[projections$projectedPts_espn == 0] <- NA
projections$projectedPts_cbs[projections$projectedPts_cbs == 0] <- NA
projections$projectedPts_nfl[projections$projectedPts_nfl == 0] <- NA
projections$projectedPts_fp[projections$projectedPts_fp == 0] <- NA
is.na(projectionVars) <- projectionVars==0
#Describe
describe(projectionVars)
plot(projections$projectedPtsLatent)
hist(projections$projectedPtsLatent)
hist(projections$projectedPtsAvg)
plot(density(projections$projectedPtsAvg))
plot(density(projections$projectedPtsLatent))
plot(density(projections$projectedPtsAvg))
plot(density(projections$projectedPtsLatent))
cor(projections[,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts_fp","projectedPtsAvg","projectedPtsLatent")], use="pairwise.complete.obs")
projections$projections <- projections$projectedPts_fp
#If projections are zero, set them to be the avg projections
#Calculate overall rank
projections$overallRank <- rank(-projections$projections, ties.method="min") #projectedPtsLatent
#Order players by overall rank
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:dim(projections)[1]
#Keep important variables
projections <- projections[,c("name","pos","team","overallRank","projections","projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts_fp","projectedPtsAvg","projectedPtsLatent")]
#View projections
projections
#Density Plot
pointDensity <- c(projections$projectedPts_espn,projections$projectedPts_cbs,projections$projectedPts_nfl,projections$projectedPts_fp) #,projections$projectedPtsLatent
sourceDensity <- c(rep("ESPN",dim(projections)[1]),rep("CBS",dim(projections)[1]),rep("NFL",dim(projections)[1]),rep("FP",dim(projections)[1])) #,rep("Latent",dim(projections)[1])
densityData <- data.frame(pointDensity,sourceDensity)
ggplot(densityData, aes(x=pointDensity, fill=sourceDensity)) + geom_density(alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of Projected Points from 2013") + theme(legend.title=element_blank())
ggsave(paste(getwd(),"/Figures/Calculate projections 2013.jpg", sep=""))
dev.off()
#Save file
save(projections, file = paste(getwd(),"/Data/LeagueProjections-2013.RData", sep=""))
write.csv(projections, file=paste(getwd(),"/Data/CSV/LeagueProjections-2013.csv", sep=""), row.names=FALSE)
###########################
# File: Evaluate Projections.R
# Description: Compares ESPN and CBS projections to actual values
# Date: 3/3/2013
# Author: Isaac Petersen (isaactpetersen@gmail.com)
# Notes:
# -ESPN projections do not include fumbles!
###########################
#Library
library("psy")
library("psych")
library("ggplot2")
library("forecast")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Load data
load(paste(getwd(),"/Data/LeagueProjections-2013.RData", sep=""))
actualPoints <- read.csv(paste(getwd(),"/Data/Yahoo-actualpoints-2012.csv", sep=""))
#Cleanup Yahoo actual points data
actualPoints <- actualPoints[which(actualPoints$Fan.Pts!=""),]
actualPoints$name <- as.character(actualPoints$Player)
actualPoints$actualPts <- actualPoints$Fan.Pts
actualPoints <- actualPoints[,c("name","actualPts")]
row.names(actualPoints) <- 1:dim(actualPoints)[1]
#Change player names
actualPoints[which(actualPoints$name=="Stevie Johnson"),"name"] <- "Steve Johnson"
#Merge projections with Yahoo actual points
projectedWithActualPts <- merge(projections, actualPoints, by="name", all.x=TRUE)
#Remove duplicate cases
projectedWithActualPts[duplicated(projectedWithActualPts$name),]
projectedWithActualPts[projectedWithActualPts$name=="Alex Smith",]
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",]
projectedWithActualPts[projectedWithActualPts$name=="Alex Smith",][1,] <- NA
projectedWithActualPts <- projectedWithActualPts[!is.na(projectedWithActualPts$name),]
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",][2,] <- NA
projectedWithActualPts <- projectedWithActualPts[!is.na(projectedWithActualPts$name),]
#Correlation between projections and actual points
cor(projectedWithActualPts[,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts_fp","projectedPtsAvg","projectedPtsLatent","actualPts")], use="pairwise.complete.obs")
save(projectedWithActualPts, file = paste(getwd(),"/Data/projectedWithActualPoints-2013.RData", sep=""))
write.csv(projectedWithActualPts, file=paste(getwd(),"/Data/CSV/projectedWithActualPoints-2013.csv", sep=""), row.names=FALSE)
#Load libraries
library("XML")
library("stringr")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Load data
#load(paste(getwd(),"/Data/LeagueProjections-2013.RData", sep=""))
load(paste(getwd(),"/Data/projectedWithActualPoints-2013.RData", sep=""))
projections <- projectedWithActualPts
#Risk - "Experts"
experts <- readHTMLTable("http://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php", stringsAsFactors = FALSE)$data
experts$sdPick_experts <- as.numeric(experts[,"Std Dev"])
experts$pick_experts <- as.numeric(experts$Ave)
#experts$name <- str_sub(experts[,c("Player, pos (team/bye)")], end=str_locate(experts[,c("Player, pos (team/bye)")], '\\(')[,1]-2)
experts$name <- str_sub(experts[,c("Player, pos (team/bye)")], end=str_locate(experts[,c("Player, pos (team/bye)")], ',')[,1]-1)
#Rename Players
experts[grep("Beanie", experts[,c("Player, pos (team/bye)")]),"name"] <- "Beanie Wells"
experts[grep("Ty Hilton", experts[,c("Player, pos (team/bye)")]),"name"] <- "T.Y. Hilton"
experts[grep("Robert Housler", experts[,c("Player, pos (team/bye)")]),"name"] <- "Rob Housler"
experts[grep("Reuben Randle", experts[,c("Player, pos (team/bye)")]),"name"] <- "Rueben Randle"
experts[grep("Joseph Morgan", experts[,c("Player, pos (team/bye)")]),"name"] <- "Joe Morgan"
experts[grep("Christopher Ivory", experts[,c("Player, pos (team/bye)")]),"name"] <- "Chris Ivory"
experts <- experts[c("name","pick_experts","sdPick_experts")]
#Risk - Wisdom of the Crowd
drafts <- readHTMLTable("http://fantasyfootballcalculator.com/adp.php?teams=10", stringsAsFactors = FALSE)$`NULL`
drafts$sdPick_crowd <- as.numeric(drafts$Std.Dev)
drafts$pick_crowd <- as.numeric(drafts$Overall)
drafts$name <- drafts$Name
drafts <- drafts[,c("name","pick_crowd","sdPick_crowd")]
#Change player names
drafts[which(drafts$name=="Robert Griffin"),"name"] <- "Robert Griffin III"
drafts[which(drafts$name=="Stevie Johnson"),"name"] <- "Steve Johnson"
#Merge files
risk <- merge(experts, drafts, by="name", all=TRUE)
projections <- merge(projections, risk, by="name", all.x=TRUE)
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:max(as.numeric(row.names(projections)))
#Calculate risk
projections$pick <- rowMeans(projections[,c("pick_experts","pick_crowd")], na.rm=TRUE)
projections$sdPts <- NA
for (i in 1:dim(projections)[1]){
projections$sdPts[i] <- sd(projections[i,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts_fp")], na.rm=TRUE)
}
projections$sdPick <- rowMeans(projections[,c("sdPick_experts","sdPick_crowd")], na.rm=TRUE)
projections$sdPts[projections$sdPts == 0] <- NA
projections$sdPickZ <- scale(projections$sdPick)
projections$sdPtsZ <- scale(projections$sdPts)
projections$risk <- rowMeans(projections[,c("sdPickZ","sdPtsZ")], na.rm=TRUE)
#Rescale risk with mean~5 and sd~2
projections$risk <- ((projections$risk * 2/(sd(projections$risk, na.rm=TRUE))) + (5-(mean(projections$risk, na.rm=TRUE))))
#Remove duplicate cases
projections[duplicated(projections$name),]
#Drop variables
projections <- projections[,!(names(projections) %in% c("pick_experts","sdPick_experts","pick_crowd","sdPick_crowd","sdPickZ","sdPtsZ"))]
#Compare accuracy of projections while taking into account risk vs when not taking risk into account
summary(lm(actualPts ~ projections, data=na.omit(projections[,c("actualPts","projections","risk")])))$r.squared #not considering risk #projectedPtsLatent
summary(lm(actualPts ~ projections + risk, data=na.omit(projections[,c("actualPts","projections","risk")])))$r.squared #considering risk #projectedPtsLatent
summary(lm(actualPts ~ projections + risk, data=na.omit(projections[,c("actualPts","projections","risk")])))
projections[rank(projections$risk, na.last="keep") %in% (max(rank(projections$risk, na.last="keep"), na.rm=TRUE)-5):max(rank(projections$risk, na.last="keep"), na.rm=TRUE) ,]
#Density plot
ggplot(projections, aes(x=risk)) + geom_density(fill="red", alpha=.7) + xlab("Player's Risk Level") + ggtitle("Density Plot of Players' Risk Levels")
ggsave(paste(getwd(),"/Figures/Risk 2013.jpg", sep=""))
dev.off()
#Save file
save(projections, file = paste(getwd(),"/Data/Risk-2013.RData", sep=""))
write.csv(projections, file=paste(getwd(),"/Data/CSV/Risk-2013.csv", sep=""), row.names=FALSE)
###########################
# File: Value Over Replacement.R
# Description: Calculates a Player's Value Over a Typical Replacement Starter (for Snake Drafts)
# Date: 3/3/2013
# Author: Isaac Petersen (isaactpetersen@gmail.com)
# Notes:
# -These projections are from last year (they have not yet been updated for the upcoming season)
###########################
#Number of players at each position drafted in Top 100 (adjust for your league)
qbReplacements <- 17
rbReplacements <- 35
wrReplacements <- 35
teReplacements <- 13
#Alternative way of calculating the number of players at each position drafted in Top 100 based on league settings
#numTeams <- 10  #number of teams in league
#numQB <- 1      #number of avg QBs in starting lineup
#numRB <- 2.5    #number of avg RBs in starting lineup
#numWR <- 2.5    #number of avg WRs in starting lineup
#numTE <- 1      #number of avg TEs in starting lineup
#qbReplacements <- print(ceiling(numQB*numTeams*1.7))
#rbReplacements <- print(ceiling(numRB*numTeams*1.4))
#wrReplacements <- print(ceiling(numWR*numTeams*1.4))
#teReplacements <- print(ceiling(numTE*numTeams*1.3))
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Load data
load(paste(getwd(),"/Data/Risk-2013.RData", sep=""))
#Calculate Value over Replacement
qb <- projections[projections$pos=="QB",][order(projections[projections$pos=="QB",]$overallRank),]
rb <- projections[projections$pos=="RB",][order(projections[projections$pos=="RB",]$overallRank),]
wr <- projections[projections$pos=="WR",][order(projections[projections$pos=="WR",]$overallRank),]
te <- projections[projections$pos=="TE",][order(projections[projections$pos=="TE",]$overallRank),]
qb$positionRank <- rank(-qb$projections, ties.method="min") #projectedPtsLatent
rb$positionRank <- rank(-rb$projections, ties.method="min") #projectedPtsLatent
wr$positionRank <- rank(-wr$projections, ties.method="min") #projectedPtsLatent
te$positionRank <- rank(-te$projections, ties.method="min") #projectedPtsLatent
qbValueOfReplacement <- print(mean(c(qb$projections[qb$positionRank==qbReplacements],qb$projections[qb$positionRank==(qbReplacements-1)],qb$projections[qb$positionRank==(qbReplacements+1)]))) #projectedPtsLatent
rbValueOfReplacement <- print(mean(c(rb$projections[rb$positionRank==rbReplacements],rb$projections[rb$positionRank==(rbReplacements-1)],rb$projections[rb$positionRank==(rbReplacements+1)])))
wrValueOfReplacement <- print(mean(c(wr$projections[wr$positionRank==wrReplacements],wr$projections[wr$positionRank==(wrReplacements-1)],wr$projections[wr$positionRank==(wrReplacements+1)])))
teValueOfReplacement <- print(mean(c(te$projections[te$positionRank==teReplacements],te$projections[te$positionRank==(teReplacements-1)],te$projections[te$positionRank==(teReplacements+1)])))
qb$vor <- qb$projections - qbValueOfReplacement
rb$vor <- rb$projections - rbValueOfReplacement
wr$vor <- wr$projections - wrValueOfReplacement
te$vor <- te$projections - teValueOfReplacement
#Merge across positions
projections <- rbind(qb,rb,wr,te)
#Calculate overall rank by VOR
projections$overallRank <- rank(-projections$vor, ties.method="min")
#Order players by overall rank
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:dim(projections)[1]
#Reorder variables
projections <- projections[,c("name","pos","team","overallRank","pick","positionRank","projections","projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts_fp","projectedPtsAvg","projectedPtsLatent","vor","sdPick","sdPts","risk")]
#Starters (low risk)
projections[which(projections$risk <= 5 & projections$vor >= 0),]
#Sleepers (high risk)
projections[which(projections$risk >=5 & projections$vor >= 0),]
#Density Plot
ggplot(projections[which(projections$vor >= 0),], aes(x=vor, fill=pos)) + geom_density(alpha=.3) + xlab("Player's Value Over Replacement") + ggtitle("Density Plot of Projected VOR from 2013") + theme(legend.title=element_blank())
ggsave(paste(getwd(),"/Figures/VOR-Density 2013.jpg", sep=""))
dev.off()
#Boxplot
qplot(pos, vor, data=projections[which(projections$vor >= 0),], geom=c("boxplot", "jitter"), fill=pos, main="Value Over Replacement By Position", xlab="", ylab="Value Over Replacement")
ggsave(paste(getwd(),"/Figures/VOR-Boxplot 2013.jpg", sep=""))
dev.off()
#Save file
save(projections, file = paste(getwd(),"/Data/VOR-2013.RData", sep=""))
write.csv(projections, file=paste(getwd(),"/Data/CSV/VOR-2013.csv", sep=""), row.names=FALSE)
#Library
library("stringr")
library("XML")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Load data
load(paste(getwd(),"/Data/VOR-2013.RData", sep=""))
#Avg & Projected Cost
avgcost_yahoo <- read.csv(paste(getwd(),"/Data/Yahoo-avgcost-2013.csv",sep=""))
###Yahoo
#readHTMLTable("http://football.fantasysports.yahoo.com/f1/35024/draftanalysis?tab=AD&pos=ALL&sort=DA_AP", stringsAsFactors = FALSE)
#avgcost <- read.csv(paste(path,"/Fantasy Football/Research/R/avgcost.csv",sep=""))
avgcost_yahoo2 <- avgcost_yahoo[which(avgcost_yahoo$Avg.Cost!=""),]
avgcost_yahoo2$name <- as.character(avgcost_yahoo2$Player)
avgcost_yahoo2$avgCost <- as.numeric((str_replace_all(avgcost_yahoo2$Avg.Cost, "\\$", "")))
avgcost_yahoo3 <- avgcost_yahoo2[,c("name","avgCost")]
avgcost_yahoo3$projectedCost <- ceiling(avgcost_yahoo3$avgCost * (leagueCap/defaultCap))
#Change names
avgcost_yahoo3$name[avgcost_yahoo3$name=="Stevie Johnson"] <- "Steve Johnson"
#Merge
projections <- merge(projections, avgcost_yahoo3, by="name", all.x=TRUE)
projections$avgCost[is.na(projections$avgCost)==TRUE] <- 1
projections$projectedCost[is.na(projections$projectedCost)==TRUE] <- 1
projections$overallRank <- rank(-projections$projections, ties.method="min")
projections <- projections[order(projections$overallRank),]
#Remove duplicate cases
projections[duplicated(projections$name),]
#Apply 10% price premium to 33 players with highest projected points, apply 10% price premium for players lower than rank 66
projections$inflatedCost <- ceiling(projections$avgCost * (leagueCap/defaultCap) * 1.0)
projections$inflatedCost[projections$overallRank <= 33] <- ceiling(projections$avgCost[projections$overallRank <= 33] * (leagueCap/defaultCap) * 1.1)
projections$inflatedCost[projections$overallRank >= 34 & projections$overallRank <= 66] <- ceiling(projections$avgCost[projections$overallRank >= 34 & projections$overallRank <= 66] * (leagueCap/defaultCap) * 1.0)
projections$inflatedCost[projections$overallRank >= 67] <- ceiling(projections$avgCost[projections$overallRank >= 67] * (leagueCap/defaultCap) * 0.9)
projections$inflatedCost[is.na(projections$inflatedCost)==TRUE] <- 1
projections$inflatedCost[projections$inflatedCost==0] <- 1
#Density Plot
ggplot(projections, aes(x=inflatedCost)) + geom_density(fill="green", alpha=.3) + xlab("Player's Intrinsic Value (Cost)") + ggtitle("Density Plot of Players' Values from 2013") + theme(legend.title=element_blank())
ggsave(paste(getwd(),"/Figures/Inflated Cost 2013.jpg", sep=""))
dev.off()
#Save file
save(projections, file = paste(getwd(),"/Data/AvgCost-2013.RData", sep=""))
write.csv(projections, file=paste(getwd(),"/Data/CSV/AvgCost-2013.csv", sep=""), row.names=FALSE)
#Specify Maximum Risk
maxRisk <- 4.6
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Load data
load(paste(getwd(),"/Data/AvgCost-2013.RData", sep=""))
#Roster Optimization
optimizeData <- na.omit(projections[,c("name","pos","projections","risk","inflatedCost")]) #projectedPtsLatent
#Calculate Optimum Roster
optimizeTeam(maxRisk=maxRisk)
optimizeTeam(maxRisk=100)
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Load data
load(paste(getwd(),"/Data/AvgCost-2013.RData", sep=""))
#Optimum Risk
projectedPoints <- vector(mode="numeric", length=length(seq(min(optimizeData$risk), max(optimizeData$risk), 0.1)))
riskLevel <- vector(mode="numeric", length=length(seq(min(optimizeData$risk), max(optimizeData$risk), 0.1)))
j <- 1
pb <- txtProgressBar(min = 0, max = max(optimizeData$risk), style = 3)
for (i in seq(0, max(optimizeData$risk), 0.1)){
setTxtProgressBar(pb, i)
projectedPoints[j] <- optimizeTeam(maxRisk=i)$optimum
riskLevel[j] <- i
j <- j+1
}
riskData <- as.data.frame(cbind(riskLevel,projectedPoints))
riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
optimizeTeam(maxRisk=4.4) #optimal
#Plot
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point(size=3) + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points") # + geom_smooth()
ggsave(paste(getwd(),"/Figures/Optimum Risk 2013.jpg", sep=""))
dev.off()
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Load data
load(paste(getwd(),"/Data/AvgCost-2013.RData", sep=""))
#Bid Up To
listOfPlayers <- vector(mode="character", length=numTotalStarters)
bidUpTo <- vector(mode="numeric", length=length(optimizeData$name))
newCost <- optimizeData$inflatedCost
pb <- txtProgressBar(min = 0, max = length(optimizeData$name), style = 3)
for(i in 1:length(optimizeData$name)){
setTxtProgressBar(pb, i)
j <- 1
listOfPlayers <- rep(optimizeData$name[i],numTotalStarters)
newCost <- optimizeData$inflatedCost
while(!is.na(match(optimizeData$name[i],listOfPlayers))){
newCost[i] <- j
listOfPlayers <- optimizeTeam(points=optimizeData$projections, playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))$players  #UPDATE: maxrisk
bidUpTo[i] <- j
j <- j+1
}
}
optimizeData$bidUpTo <- bidUpTo - 1
optimizeData$bidUpTo[optimizeData$bidUpTo==0] <- 1
projections <- merge(projections, optimizeData, all.x=TRUE)
projections <- projections[order(projections$overallRank),]
projections$bidUpTo[is.na(projections$bidUpTo)] <- 1
row.names(projections) <- 1:max(as.numeric(row.names(projections)))
#Save file
save(projections, file = paste(getwd(),"/Data/BidUpTo-2013.RData", sep=""))
write.csv(projections, file=paste(getwd(),"/Data/CSV/BidUpTo-2013.csv", sep=""), row.names=FALSE)
projections
