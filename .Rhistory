listOfPlayers <- optimizeData$name[i]
while(!is.na(match(optimizeData$name[i],listOfPlayers))){
newCost[i] <- j
listOfPlayers <- optimizeTeam(points=simulatedPoints[,k], playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))$players
bidUpTo[i,k] <- j - 1
j <- j+1
}
}
}
i
j
k
optimizeData$name[i]
#League settings
leagueCap <- 225
numQBstarters <- 1
numRBstarters <- 2
numWRstarters <- 2
numTEstarters <- 1
numTotalStarters <- 7
numTotalPlayers <- 20
iterations <- 1000
iterations <- 10
#Bid Up To (i=player, j=cost, k=iteration)
listOfPlayers <- vector(mode="character", length=numTotalStarters)
#bidUpTo <- vector(mode="numeric", length=length(optimizeData$name))
bidUpTo <- matrix(nrow=length(optimizeData$name), ncol=iterations)
newCost <- optimizeData$inflatedCost
#Simulated Points
simulatedPoints <- matrix(nrow=length(optimizeData$name), ncol=iterations)
for(i in 1:iterations){
simulatedPoints[,i] <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
}
pb <- txtProgressBar(min = 0, max = length(optimizeData$name), style = 3)
for(i in 1:length(optimizeData$name)){
setTxtProgressBar(pb, i)
listOfPlayers <- rep(optimizeData$name[i],numTotalStarters)
newCost <- optimizeData$inflatedCost
for (k in 1:iterations){
j <- 1
listOfPlayers <- optimizeData$name[i]
while(!is.na(match(optimizeData$name[i],listOfPlayers))){
newCost[i] <- j
listOfPlayers <- optimizeTeam(points=simulatedPoints[,k], playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))$players
bidUpTo[i,k] <- j - 1
j <- j+1
}
}
}
i
j
k
listOfPlayers
newCost
cbind(optimizeData,newCost)
optimizeTeam(points=simulatedPoints[,k], playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))
optimizeTeam(points=simulatedPoints[,k], playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))
simulatedPoints[,k]
cbind(simulatedPoints[,k], newCost)
#Create Optimization Function
optimizeTeam <- function(points=optimizeData$projections, playerCost=optimizeData$inflatedCost, maxRisk=maxRisk){ #can change points, cost, or risk #projectedPtsLatent
num.players <- length(optimizeData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(optimizeData$pos == "QB"), # num QB
as.numeric(optimizeData$pos == "RB"), # num RB
as.numeric(optimizeData$pos == "WR"), # num WR
as.numeric(optimizeData$pos == "TE"), # num TE
diag(optimizeData$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c("==",
">=",
">=",
">=",
rep("<=", num.players),
"<=",
"==")
b <- c(numQBstarters,
numRBstarters,
numWRstarters,
numTEstarters,
rep(maxRisk, num.players),
maxCost,
numTotalStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(cbind(optimizeData[sol$solution == 1,"name"],round(points[sol$solution == 1],2),round(optimizeData[sol$solution == 1,"risk"],2),playerCost[sol$solution == 1]))
names(sol$playerInfo) <- c("name","points","risk","cost")
#sol$totalCost <- sum(optimizeData$inflatedCost * sol$solution)
sol$totalCost <- sum(playerCost * sol$solution)
sol$players <- optimizeData$name[sol$solution == 1]
return(sol)
}
#League settings
leagueCap <- 225
numQBstarters <- 1
numRBstarters <- 2
numWRstarters <- 2
numTEstarters <- 1
numTotalStarters <- 7
numTotalPlayers <- 20
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Data
load(paste(getwd(),"/Data/AvgCost-2013.RData", sep=""))
#Set iterations
load(paste(getwd(),"/Data/AvgCost-2013.RData", sep=""))
load(paste(getwd(),"/Data/AvgCost-2012.RData", sep=""))
iterations <- 1000
iterations <- 10
#Bid Up To (i=player, j=cost, k=iteration)
listOfPlayers <- vector(mode="character", length=numTotalStarters)
#bidUpTo <- vector(mode="numeric", length=length(optimizeData$name))
bidUpTo <- matrix(nrow=length(optimizeData$name), ncol=iterations)
newCost <- optimizeData$inflatedCost
#Simulated Points
simulatedPoints <- matrix(nrow=length(optimizeData$name), ncol=iterations)
for(i in 1:iterations){
simulatedPoints[,i] <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
}
pb <- txtProgressBar(min = 0, max = length(optimizeData$name), style = 3)
for(i in 1:length(optimizeData$name)){
setTxtProgressBar(pb, i)
listOfPlayers <- rep(optimizeData$name[i],numTotalStarters)
newCost <- optimizeData$inflatedCost
for (k in 1:iterations){
j <- 1
listOfPlayers <- optimizeData$name[i]
while(!is.na(match(optimizeData$name[i],listOfPlayers))){
newCost[i] <- j
listOfPlayers <- optimizeTeam(points=simulatedPoints[,k], playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))$players
bidUpTo[i,k] <- j - 1
j <- j+1
}
}
}
projections
optimizeData <- na.omit(projections[,c("name","pos","projections","risk","inflatedCost")]) #projectedPtsLatent
maxCost <- leagueCap - (numTotalPlayers - numTotalStarters)
#Bid Up To (i=player, j=cost, k=iteration)
listOfPlayers <- vector(mode="character", length=numTotalStarters)
#bidUpTo <- vector(mode="numeric", length=length(optimizeData$name))
bidUpTo <- matrix(nrow=length(optimizeData$name), ncol=iterations)
newCost <- optimizeData$inflatedCost
#Simulated Points
simulatedPoints <- matrix(nrow=length(optimizeData$name), ncol=iterations)
for(i in 1:iterations){
simulatedPoints[,i] <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
}
pb <- txtProgressBar(min = 0, max = length(optimizeData$name), style = 3)
for(i in 1:length(optimizeData$name)){
setTxtProgressBar(pb, i)
listOfPlayers <- rep(optimizeData$name[i],numTotalStarters)
newCost <- optimizeData$inflatedCost
for (k in 1:iterations){
j <- 1
listOfPlayers <- optimizeData$name[i]
while(!is.na(match(optimizeData$name[i],listOfPlayers))){
newCost[i] <- j
listOfPlayers <- optimizeTeam(points=simulatedPoints[,k], playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))$players
bidUpTo[i,k] <- j - 1
j <- j+1
}
}
}
League settings
leagueCap <- 225
numQBstarters <- 1
numRBstarters <- 2
numWRstarters <- 2
numTEstarters <- 1
numTotalStarters <- 7
numTotalPlayers <- 20
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Data
load(paste(getwd(),"/Data/AvgCost-2013.RData", sep=""))
#League settings
leagueCap <- 225
numQBstarters <- 1
numRBstarters <- 2
numWRstarters <- 2
numTEstarters <- 1
numTotalStarters <- 7
numTotalPlayers <- 20
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Data
load(paste(getwd(),"/Data/AvgCost-2013.RData", sep=""))
load(paste(getwd(),"/Data/AvgCost-2013.RData", sep=""))
load(paste(getwd(),"/Data/AvgCost-2012.RData", sep=""))
#Roster Optimization
optimizeData <- na.omit(projections[,c("name","pos","projections","risk","inflatedCost")]) #projectedPtsLatent
maxCost <- leagueCap - (numTotalPlayers - numTotalStarters)
#Set iterations
iterations <- 1000
iterations <- 10
#Bid Up To (i=player, j=cost, k=iteration)
listOfPlayers <- vector(mode="character", length=numTotalStarters)
#bidUpTo <- vector(mode="numeric", length=length(optimizeData$name))
bidUpTo <- matrix(nrow=length(optimizeData$name), ncol=iterations)
newCost <- optimizeData$inflatedCost
#Simulated Points
simulatedPoints <- matrix(nrow=length(optimizeData$name), ncol=iterations)
for(i in 1:iterations){
simulatedPoints[,i] <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
}
simulatedPoints
optimizeData$projections
optimizeData$sdPts
optimizeData <- na.omit(projections[,c("name","pos","projections","risk","inflatedCost","sdPts")]) #projectedPtsLatent
maxCost <- leagueCap - (numTotalPlayers - numTotalStarters)
#Bid Up To (i=player, j=cost, k=iteration)
listOfPlayers <- vector(mode="character", length=numTotalStarters)
#bidUpTo <- vector(mode="numeric", length=length(optimizeData$name))
bidUpTo <- matrix(nrow=length(optimizeData$name), ncol=iterations)
newCost <- optimizeData$inflatedCost
#Simulated Points
simulatedPoints <- matrix(nrow=length(optimizeData$name), ncol=iterations)
for(i in 1:iterations){
simulatedPoints[,i] <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
}
pb <- txtProgressBar(min = 0, max = length(optimizeData$name), style = 3)
for(i in 1:length(optimizeData$name)){
setTxtProgressBar(pb, i)
listOfPlayers <- rep(optimizeData$name[i],numTotalStarters)
newCost <- optimizeData$inflatedCost
for (k in 1:iterations){
j <- 1
listOfPlayers <- optimizeData$name[i]
while(!is.na(match(optimizeData$name[i],listOfPlayers))){
newCost[i] <- j
listOfPlayers <- optimizeTeam(points=simulatedPoints[,k], playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))$players
bidUpTo[i,k] <- j - 1
j <- j+1
}
}
}
bidUpTo
mapply(function(x) wilcox.test(x, conf.int=TRUE)$estimate, x=bidUpTo)
warnings()
?mapply
lapply
?lapply
vapply(function(x) wilcox.test(x, conf.int=TRUE)$estimate, x=bidUpTo)
vapply(bidUpTo, wilcox.test(x, conf.int=TRUE)$estimate)
vapply(function(x) wilcox.test(X, conf.int=TRUE)$estimate, x=bidUpTo)
vapply(bidUpTo, wilcox.test(X, conf.int=TRUE)$estimate)
vapply(x=bidUpTo, FUN=wilcox.test(X, conf.int=TRUE)$estimate)
vapply(x=bidUpTo, FUN=wilcox.test(x, conf.int=TRUE)$estimate)
vapply(x=bidUpTo, FUN=wilcox.test(x, conf.int=TRUE)$estimate)
vapply(X=bidUpTo, FUN=wilcox.test(X, conf.int=TRUE)$estimate)
?apply
apply(bidUpTo, 1, function(x) wilcox.test(x, conf.int=TRUE)$estimate)
warnings()
test <- apply(bidUpTo, 1, function(x) wilcox.test(x, conf.int=TRUE)$estimate)
test
bidUpTo
dim(bidUpTo)
dim(bidUpTo)[1]
dim(bidUpTo)[2]
dim(bidUpTo)[2]+1
for(i in 1:length(optimizeData$name)){
ifelse(identical(bidUpTo[i,]), bidUpTo[i, dim(bidUpTo)[2] + 1] <- 1, dim(bidUpTo)[2] + 1] <- NA)
}
for(i in 1:length(optimizeData$name)){
ifelse(identical(bidUpTo[i,]), bidUpTo[i, dim(bidUpTo)[2] + 1] <- 1, dim(bidUpTo)[2] + 1] <- NA)
for(i in 1:length(optimizeData$name)){
ifelse(identical(bidUpTo[i,]), bidUpTo[i, dim(bidUpTo)[2] + 1] <- 1, bidUpTo[i, dim(bidUpTo)[2] + 1] <- NA)
}
identical
?identical
?all.equal
i
min(bidUpTo[i,]) == max(bidUpTo[i,])
for(i in 1:length(optimizeData$name)){
ifelse(min(bidUpTo[i,]) == max(bidUpTo[i,]), bidUpTo[i, dim(bidUpTo)[2] + 1] <- 1, bidUpTo[i, dim(bidUpTo)[2] + 1] <- NA)
}
i
bidUpTo[i, dim(bidUpTo)[2] + 1] <- 1
?rep
cbind(bidUpTo, rep(NA, dim(bidUpTo)[1]))
bidUpTo <- cbind(bidUpTo, rep(NA, dim(bidUpTo)[1]))
for(i in 1:dim(bidUpTo)[1]){
ifelse(min(bidUpTo[i,]) == max(bidUpTo[i,]), bidUpTo[i, dim(bidUpTo)[2] + 1] <- 1, bidUpTo[i, dim(bidUpTo)[2] + 1] <- NA)
}
bidUpTo
i <- 325
min(bidUpTo[i,]) == max(bidUpTo[i,])
min(bidUpTo[i,], na.rm=TRUE) == max(bidUpTo[i,], na.rm=TRUE)
for(i in 1:dim(bidUpTo)[1]){
ifelse(min(bidUpTo[i,], na.rm=TRUE) == max(bidUpTo[i,], na.rm=TRUE), bidUpTo[i, dim(bidUpTo)[2] + 1] <- 1, bidUpTo[i, dim(bidUpTo)[2] + 1] <- NA)
}
i
min(bidUpTo[i,], na.rm=TRUE) == max(bidUpTo[i,], na.rm=TRUE)
for(i in 1:dim(bidUpTo)[1]){
ifelse(min(bidUpTo[i,], na.rm=TRUE) == max(bidUpTo[i,], na.rm=TRUE), bidUpTo[i, dim(bidUpTo)[2]] <- 1, bidUpTo[i, dim(bidUpTo)[2]] <- NA)
}
bidUpTo
apply(bidUpTo, 1, function(x) wilcox.test(x, conf.int=TRUE)$estimate)
warnings()
wilcox.test(bidUpTo[1], conf.int=TRUE)$estimate
wilcox.test(bidUpTo[2], conf.int=TRUE)$estimate
suppressWarnings(wilcox.test(bidUpTo[1], conf.int=TRUE)$estimate)
for(i in 1:dim(bidUpTo)[1]){
print(suppressWarnings(wilcox.test(bidUpTo[i], conf.int=TRUE)$estimate))
}
i
bidUpTo[i]
bidUpTo[33,]
for(i in 1:dim(bidUpTo)[1]){
print(suppressWarnings(wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate))
}
i
bidUpTo[i,]
print(suppressWarnings(wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate))
wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate
wilcox.test(bidUpTo[i,], conf.int=TRUE)
wilcox.test(bidUpTo[i,], conf.int=FALSE)
wilcox.test(bidUpTo[i,]
bidUpTo[i,]
?isError
iserror
?iserror
i
error <- try(suppressWarnings(wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate), silent=T)
error
is(error,"try-error")
for (i in 1:dim(bidUpTo)[1]){
error <- try(suppressWarnings(wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate), silent=T)
ifelse(is(error,"try-error"), optimizeData$bidUpTo[i] <- mean(bidUpTo[i,], na.rm=TRUE), optimizeData$bidUpTo[i] <- wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate)
#if(is(error,"try-error")) {next}
#print(cc)
}
warnings()
optimizeData$bidUpTo
?roundup
?round
for (i in 1:dim(bidUpTo)[1]){
error <- try(suppressWarnings(wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate), silent=T)
ifelse(is(error,"try-error"), optimizeData$bidUpTo[i] <- ceiling(mean(bidUpTo[i,], na.rm=TRUE)), optimizeData$bidUpTo[i] <- ceiling(wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate))
#if(is(error,"try-error")) {next}
#print(cc)
}
optimizeData$bidUpTo
for (i in 1:dim(bidUpTo)[1]){
error <- try(suppressWarnings(wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate), silent=T)
ifelse(is(error,"try-error"), optimizeData$bidUpTo[i] <- ceiling(mean(bidUpTo[i,], na.rm=TRUE)), optimizeData$bidUpTo[i] <- ceiling(suppressWarnings(wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate)))
#if(is(error,"try-error")) {next}
#print(cc)
}
optimizeData
cbind(optimizeData, bidUpTo)
cbind(optimizeData, bidUpTo)
iterations <- 100
#Bid Up To (i=player, j=cost, k=iteration)
listOfPlayers <- vector(mode="character", length=numTotalStarters)
#bidUpTo <- vector(mode="numeric", length=length(optimizeData$name))
bidUpTo <- matrix(nrow=length(optimizeData$name), ncol=iterations)
newCost <- optimizeData$inflatedCost
#Simulated Points
simulatedPoints <- matrix(nrow=length(optimizeData$name), ncol=iterations)
for(i in 1:iterations){
simulatedPoints[,i] <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
}
pb <- txtProgressBar(min = 0, max = length(optimizeData$name), style = 3)
for(i in 1:length(optimizeData$name)){
setTxtProgressBar(pb, i)
listOfPlayers <- rep(optimizeData$name[i],numTotalStarters)
newCost <- optimizeData$inflatedCost
for (k in 1:iterations){
j <- 1
listOfPlayers <- optimizeData$name[i]
while(!is.na(match(optimizeData$name[i],listOfPlayers))){
newCost[i] <- j
listOfPlayers <- optimizeTeam(points=simulatedPoints[,k], playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))$players
bidUpTo[i,k] <- j - 1
j <- j+1
}
}
}
i
j
k
optimizeTeam(points=simulatedPoints[,k], playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))
optimizeData$name[i]
optimizeData$name
optimizeData[,c("name","projectedPts")]
optimizeData[,c("name","projections")]
optimizeData[optimizeData$name == "Steve Smith",c("name","projections")]
#Simulated Points
simulatedPoints <- matrix(nrow=length(optimizeData$name), ncol=iterations)
for(i in 1:iterations){
simulatedPoints[,i] <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
}
pb <- txtProgressBar(min = 0, max = length(optimizeData$name), style = 3)
for(i in 1:length(optimizeData$name)){
setTxtProgressBar(pb, i)
listOfPlayers <- rep(optimizeData$name[i],numTotalStarters)
newCost <- optimizeData$inflatedCost
for (k in 1:iterations){
j <- 1
listOfPlayers <- optimizeData$name[i]
while(!is.na(match(optimizeData$name[i],listOfPlayers)) & j < 212){
newCost[i] <- j
listOfPlayers <- optimizeTeam(points=simulatedPoints[,k], playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))$players
bidUpTo[i,k] <- j - 1
j <- j+1
}
}
}
bidUpTo
max(bidUpTo)
table(bidUpTo)
bidUpTo==210
bidUpTo[bidUpTo == 210]
bidUpTo[bidUpTo == (maxCost - 2)] <- NA
bidUpTo[bidUpTo == (maxCost - 1)] <- NA
bidUpTo[bidUpTo == (maxCost)] <- NA
bidUpTo[bidUpTo == (maxCost - 2)]
max(bidUpTo)
max(bidUpTo, na.rm=TRUE)
table(bidUpTo)
for (i in 1:dim(bidUpTo)[1]){
error <- try(suppressWarnings(wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate), silent=T)
ifelse(is(error,"try-error"), optimizeData$bidUpTo[i] <- ceiling(mean(bidUpTo[i,], na.rm=TRUE)), optimizeData$bidUpTo[i] <- ceiling(suppressWarnings(wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate)))
}
optimizeData
optimizeData[optimizeData$optimizeData == 0,c("bidUpTo")]
optimizeData[optimizeData$bidUpTo == 0,"bidUpTo"]
for (i in 1:dim(bidUpTo)[1]){
error <- try(suppressWarnings(wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate), silent=T)
ifelse(is(error,"try-error"), optimizeData$bidUpTo[i] <- max(ceiling(mean(bidUpTo[i,], na.rm=TRUE)), 1, na.rm=TRUE), optimizeData$bidUpTo[i] <- ceiling(suppressWarnings(wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate)))
}
optimizeData
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Data
load(paste(getwd(),"/Data/AvgCost-2013.RData", sep=""))
#Roster Optimization
optimizeData <- na.omit(projections[,c("name","pos","projections","risk","inflatedCost","sdPts")]) #projectedPtsLatent
maxCost <- leagueCap - (numTotalPlayers - numTotalStarters)
#Set iterations
iterations <- 1000
#Bid Up To (i=player, j=cost, k=iteration)
listOfPlayers <- vector(mode="character", length=numTotalStarters)
#bidUpTo <- vector(mode="numeric", length=length(optimizeData$name))
bidUpTo <- matrix(nrow=length(optimizeData$name), ncol=iterations)
newCost <- optimizeData$inflatedCost
#Simulated Points
simulatedPoints <- matrix(nrow=length(optimizeData$name), ncol=iterations)
for(i in 1:iterations){
simulatedPoints[,i] <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
}
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Data
load(paste(getwd(),"/Data/AvgCost-2012.RData", sep=""))
#Roster Optimization
optimizeData <- na.omit(projections[,c("name","pos","projections","risk","inflatedCost","sdPts")]) #projectedPtsLatent
maxCost <- leagueCap - (numTotalPlayers - numTotalStarters)
#Set iterations
iterations <- 1000
#Bid Up To (i=player, j=cost, k=iteration)
listOfPlayers <- vector(mode="character", length=numTotalStarters)
#bidUpTo <- vector(mode="numeric", length=length(optimizeData$name))
bidUpTo <- matrix(nrow=length(optimizeData$name), ncol=iterations)
newCost <- optimizeData$inflatedCost
#Simulated Points
simulatedPoints <- matrix(nrow=length(optimizeData$name), ncol=iterations)
for(i in 1:iterations){
simulatedPoints[,i] <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
}
dim(simulatedPoints)
pb <- txtProgressBar(min = 0, max = length(optimizeData$name), style = 3)
for(i in 1:length(optimizeData$name)){
setTxtProgressBar(pb, i)
listOfPlayers <- rep(optimizeData$name[i],numTotalStarters)
newCost <- optimizeData$inflatedCost
for (k in 1:iterations){
j <- 1
listOfPlayers <- optimizeData$name[i]
while(!is.na(match(optimizeData$name[i],listOfPlayers)) & j < maxCost){
newCost[i] <- j
listOfPlayers <- optimizeTeam(points=simulatedPoints[,k], playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))$players
bidUpTo[i,k] <- j - 1
j <- j+1
}
}
}
bidUpTo[bidUpTo == (maxCost - 2)] <- NA
bidUpTo[bidUpTo == (maxCost - 1)] <- NA
bidUpTo[bidUpTo == (maxCost)] <- NA
#Calculate Robust Measure of Central Tendency: Hodges-Lehmann estimator (pseudo-median)
#optimizeData$bidUpTo <- rowMeans(bidUpTo)
for (i in 1:dim(bidUpTo)[1]){
error <- try(suppressWarnings(wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate), silent=T)
ifelse(is(error,"try-error"), optimizeData$bidUpTo[i] <- max(ceiling(mean(bidUpTo[i,], na.rm=TRUE)), 1, na.rm=TRUE), optimizeData$bidUpTo[i] <- ceiling(suppressWarnings(wilcox.test(bidUpTo[i,], conf.int=TRUE)$estimate)))
}
bidUpTo
optimizeData
