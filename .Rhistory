projections_fp
projections_fp <- projections_fp[-which(projections_fp$name=="Charles Clay" & projections_fp$pos=="RB"),]
projections_fp
projections_fp <- projections_fp[-which(projections_fp$name=="Clay Harbor" & projections_fp$pos=="WR"),]
projections_fp
projections_fp <- projections_fp[-which(projections_fp$name=="David Johnson" & projections_fp$pos=="TE"),]
projections_fp
projections_fp <- projections_fp[-which(projections_fp$name=="Dexter McCluster" & projections_fp$pos=="RB"),]
projections_fp
projections_fp <- projections_fp[-which(projections_fp$name=="Dorin Dickerson" & projections_fp$pos=="WR"),]
projections_fp
projections_fp[-which(projections_fp$name=="Dorin Dickerson" & projections_fp$pos=="RB"),]
projections_fp <- projections_fp[-which(projections_fp$name=="Dorin Dickerson" & projections_fp$pos=="RB"),]
projections_fp
projections_fp <- projections_fp[-which(projections_fp$name=="Evan Rodriguez" & projections_fp$pos=="RB"),]
projections_fp
projections_fp[-which(projections_fp$name=="James Casey" & projections_fp$pos=="RB"),]
projections_fp[-which(projections_fp$name=="James Casey"),]
projections_fp[projections_fp$name %in% projections_fp[duplicated(projections_fp$name),"name"],]
projections_fp <- projections_fp[-which(projections_fp$name=="Niles Paul" & projections_fp$pos=="WR"),]
projections_fp <- projections_fp[-which(projections_fp$name=="Steve Smith" & is.na(projections_fp$team_fp)),]
projections_fp <- projections_fp[-which(projections_fp$name=="Zach Miller" & projections_fp$team_fp=="TB"),]
projections_fp
projections_fp <- projections_fp[apply(projections_fp, 1, function(x) any(!is.na(x))),]
projections_fp
projections_fp[projections_fp$name=="Christopher Ivory", "name"] <- "Chris Ivory"
projections_fp[projections_fp$name=="Ty Hilton", "name"] <- "T.Y. Hilton"
projections_fp[projections_fp$name=="Robert Housler", "name"] <- "Rob Housler"
projections_fp[projections_fp$name=="Reuben Randle", "name"] <- "Rueben Randle"
projections_fp[projections_fp$name=="Joseph Morgan", "name"] <- "Joe Morgan"
#Calculate overall rank
projections_fp$overallRank_fp <- rank(-projections_fp$pts_fp, ties.method="min")
#Order variables in data set
projections_fp <- projections_fp[,c("name","pos","team_fp","overallRank_fp",
"passAtt_fp","passComp_fp","passYds_fp","passTds_fp","passInt_fp",
"rushYds_fp","rushTds_fp","rec_fp","recYds_fp","recTds_fp","twoPts_fp","fumbles_fp","pts_fp")]
#Order players by overall rank
projections_fp <- projections_fp[order(projections_fp$overallRank_fp),]
row.names(projections_fp) <- 1:dim(projections_fp)[1]
#Density Plot
ggplot(projections_fp, aes(x=pts_fp)) + geom_density(fill="orange", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of FantasyPros Projected Points from 2013")
ggsave(paste(getwd(),"/Figures/FantasyPros projections 2013.jpg", sep=""))
dev.off()
#Save file
save(projections_fp, file = paste(getwd(),"/Data/FantasyPros-Projections-2013.RData", sep=""))
write.csv(projections_fp, file=paste(getwd(),"/Data/CSV/FantasyPros-Projections-2013.csv", sep=""), row.names=FALSE)
ggplot(projections_fp, aes(x=pts_fp)) + geom_density(fill="orange", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of FantasyPros Projected Points from 2013")
#Load libraries
library("XML")
library("stringr")
library("ggplot2")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Download fantasy football projections from ESPN.com
qb_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2013&slotCategoryId=0", stringsAsFactors = FALSE)$playertable_0
rb1_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2013&slotCategoryId=2", stringsAsFactors = FALSE)$playertable_0
rb2_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2013&slotCategoryId=2&startIndex=40", stringsAsFactors = FALSE)$playertable_0
rb3_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2013&slotCategoryId=2&startIndex=80", stringsAsFactors = FALSE)$playertable_0
wr1_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2013&slotCategoryId=4", stringsAsFactors = FALSE)$playertable_0
wr2_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2013&slotCategoryId=4&startIndex=40", stringsAsFactors = FALSE)$playertable_0
wr3_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2013&slotCategoryId=4&startIndex=80", stringsAsFactors = FALSE)$playertable_0
te_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2013&slotCategoryId=6", stringsAsFactors = FALSE)$playertable_0
#Add variable names for each object
fileList <- c("qb_espn","rb1_espn","rb2_espn","rb3_espn","wr1_espn","wr2_espn","wr3_espn","te_espn")
for(i in 1:length(fileList)){
assign(fileList[i],get(fileList[i])[2:dim(get(fileList[i]))[1],])
t <- get(fileList[i])
names(t) <-  c("positionRank_espn","player_espn","passCompAtt_espn","passYds_espn","passTds_espn","passInt_espn","rush_espn","rushYds_espn","rushTds_espn","rec_espn","recYds_espn","recTds_espn","pts_espn")
assign(fileList[i], t)
}
#Merge players within position
rb_espn <- rbind(rb1_espn,rb2_espn,rb3_espn)
wr_espn <- rbind(wr1_espn,wr2_espn,wr3_espn)
#Add variable for player position
qb_espn$pos <- as.factor("QB")
rb_espn$pos <- as.factor("RB")
wr_espn$pos <- as.factor("WR")
te_espn$pos <- as.factor("TE")
#Merge players across positions
projections_espn <- rbind(qb_espn,rb_espn,wr_espn,te_espn)
#Replace symbols with value of zero
projections_espn$passCompAtt_espn[projections_espn$passCompAtt_espn == "--/--"] <- "0/0"
projections_espn$passYds_espn[projections_espn$passYds_espn == "--"] <- "0"
projections_espn$passTds_espn[projections_espn$passTds_espn == "--"] <- "0"
projections_espn$passInt_espn[projections_espn$passInt_espn == "--"] <- "0"
projections_espn$rush_espn[projections_espn$rush_espn == "--"] <- "0"
projections_espn$rushYds_espn[projections_espn$rushYds_espn == "--"] <- "0"
projections_espn$rushTds_espn[projections_espn$rushTds_espn == "--"] <- "0"
projections_espn$rec_espn[projections_espn$rec_espn == "--"] <- "0"
projections_espn$recYds_espn[projections_espn$recYds_espn == "--"] <- "0"
projections_espn$recTds_espn[projections_espn$recTds_espn == "--"] <- "0"
projections_espn$pts_espn[projections_espn$pts_espn == "--"] <- "0"
#Separate pass completions from attempts
projections_espn$passComp_espn <- as.numeric(str_sub(string=projections_espn$passCompAtt_espn, end=str_locate(string=projections_espn$passCompAtt_espn, '/')[,1]-1))
projections_espn$passAtt_espn <- as.numeric(str_sub(string=projections_espn$passCompAtt_espn, start=str_locate(string=projections_espn$passCompAtt_espn, '/')[,1]+1))
#Convert variables from character strings to numeric
projections_espn$positionRank_espn <- as.numeric(projections_espn$positionRank_espn)
projections_espn$passYds_espn <- as.numeric(projections_espn$passYds_espn)
projections_espn$passTds_espn <- as.numeric(projections_espn$passTds_espn)
projections_espn$passInt_espn <- as.numeric(projections_espn$passInt_espn)
projections_espn$rush_espn <- as.numeric(projections_espn$rush_espn)
projections_espn$rushYds_espn <- as.numeric(projections_espn$rushYds_espn)
projections_espn$rushTds_espn <- as.numeric(projections_espn$rushTds_espn)
projections_espn$rec_espn <- as.numeric(projections_espn$rec_espn)
projections_espn$recYds_espn <- as.numeric(projections_espn$recYds_espn)
projections_espn$recTds_espn <- as.numeric(projections_espn$recTds_espn)
projections_espn$pts_espn <- as.numeric(projections_espn$pts_espn)
#Add variables from other projection sources
projections_espn$fumbles_espn <- NA
projections_espn$twoPts_espn <- NA
#Player names
projections_espn$name <- str_sub(projections_espn$player_espn, end=str_locate(string=projections_espn$player_espn, ',')[,1]-1)
projections_espn$name <- str_replace_all(projections_espn$name, "\\*", "")
#projections_espn[which(projections_espn$name=="Steve Johnson"),"name"] <- "Stevie Johnson"
#Player teams
projections_espn$team_espn <- str_sub(projections_espn$player_espn, start=str_locate(string=projections_espn$player_espn, ',')[,1]+2, end = str_locate(string=projections_espn$player_espn, ',')[,1]+4)
projections_espn$team_espn <- str_trim(projections_espn$team_espn, side="right")
projections_espn$team_espn <- toupper(projections_espn$team_espn)
projections_espn$team_espn[projections_espn$team_espn=="WSH"] <- "WAS"
#Remove duplicate cases
projections_espn[duplicated(projections_espn$name),]
projections_espn
projections_espn
projections_espn[projections_espn$name=="EJ Manuel", "name"] <- "E.J. Manuel"
#Calculate overall rank
projections_espn$overallRank_espn <- rank(-projections_espn$pts_espn, ties.method="min")
#Order variables in data set
projections_espn <- projections_espn[,c("name","pos","team_espn","positionRank_espn","overallRank_espn",
"passAtt_espn","passComp_espn","passYds_espn","passTds_espn","passInt_espn",
"rushYds_espn","rushTds_espn","recYds_espn","recTds_espn","twoPts_espn","fumbles_espn","pts_espn")]
#Order players by overall rank
projections_espn <- projections_espn[order(projections_espn$overallRank_espn),]
row.names(projections_espn) <- 1:dim(projections_espn)[1]
projections_espn
#Density Plot
ggplot(projections_espn, aes(x=pts_espn)) + geom_density(fill="blue", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of ESPN Projected Points from 2013")
ggsave(paste(getwd(),"/Figures/ESPN projections 2013.jpg", sep=""))
dev.off()
#Save file
save(projections_espn, file = paste(getwd(),"/Data/ESPN-Projections-2013.RData", sep=""))
write.csv(projections_espn, file=paste(getwd(),"/Data/CSV/ESPN-Projections-2013.csv", sep=""), row.names=FALSE)
###########################
# File: CBS Projections.R
# Description: Downloads Fantasy Football Projections from cbssports.com
# Date: 3/3/2013
# Author: Isaac Petersen (isaactpetersen@gmail.com)
# Notes:
# -These projections are from last year (CBS has not yet updated them for the upcoming season)
###########################
#Load libraries
library("XML")
library("stringr")
library("ggplot2")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Download fantasy football projections from cbssports.com
qb_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/QB/season", stringsAsFactors = FALSE)[7]$'NULL'
rb1_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season", stringsAsFactors = FALSE)[7]$'NULL'
rb2_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/RB/season?&start_row=51", stringsAsFactors = FALSE)[7]$'NULL'
wr1_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/WR/season", stringsAsFactors = FALSE)[7]$'NULL'
wr2_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/WR/season?&start_row=51", stringsAsFactors = FALSE)[7]$'NULL'
te_cbs <- readHTMLTable("http://fantasynews.cbssports.com/fantasyfootball/stats/weeklyprojections/TE/season", stringsAsFactors = FALSE)[7]$'NULL'
#Add variable names for each object
names(qb_cbs) <- c("player_cbs","passAtt_cbs","passComp_cbs","passYds_cbs","passTds_cbs","passInt_cbs","passCompPct_cbs","passYdsPerAtt_cbs","rushAtt_cbs","rushYds_cbs","rushYdsPerAtt_cbs","rushTds_cbs","fumbles_cbs","pts_cbs")
names(rb1_cbs) <- names(rb2_cbs) <- c("player_cbs","rushAtt_cbs","rushYds_cbs","rushYdsPerAtt_cbs","rushTds_cbs","rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")
names(wr1_cbs) <- names(wr2_cbs) <- c("player_cbs","rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")
names(te_cbs) <- c("player_cbs","rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","fumbles_cbs","pts_cbs")
#Trim dimensions
qb_cbs <- qb_cbs[3:(dim(qb_cbs)[1]-1),]
rb1_cbs <- rb1_cbs[3:(dim(rb1_cbs)[1]-1),]
rb2_cbs <- rb2_cbs[1:(dim(rb2_cbs)[1]-1),]
wr1_cbs <- wr1_cbs[3:(dim(wr1_cbs)[1]-1),]
wr2_cbs <- wr2_cbs[1:(dim(wr2_cbs)[1]-1),]
te_cbs <- te_cbs[3:(dim(te_cbs)[1]-1),]
#Merge within position
rb_cbs <- rbind(rb1_cbs,rb2_cbs)
wr_cbs <- rbind(wr1_cbs,wr2_cbs)
#Add variable for player position
qb_cbs$pos <- as.factor("QB")
rb_cbs$pos <- as.factor("RB")
wr_cbs$pos <- as.factor("WR")
te_cbs$pos <- as.factor("TE")
#Calculate position rank
qb_cbs$positionRank_cbs <- 1:dim(qb_cbs)[1]
rb_cbs$positionRank_cbs <- 1:dim(rb_cbs)[1]
wr_cbs$positionRank_cbs <- 1:dim(wr_cbs)[1]
te_cbs$positionRank_cbs <- 1:dim(te_cbs)[1]
#Merge across positions
projections_cbs <- merge(qb_cbs,rb_cbs, all=TRUE)
projections_cbs <- merge(projections_cbs,wr_cbs, all=TRUE)
projections_cbs <- merge(projections_cbs,te_cbs, all=TRUE)
#Convert variables from character strings to numeric
projections_cbs$fumbles_cbs <- as.numeric(projections_cbs$fumbles_cbs)
projections_cbs$pts_cbs <- as.numeric(projections_cbs$pts_cbs)
projections_cbs$rec_cbs <- as.numeric(projections_cbs$rec_cbs)
projections_cbs$recYds_cbs <- as.numeric(projections_cbs$recYds_cbs)
projections_cbs$recYdsPerRec_cbs <- as.numeric(projections_cbs$recYdsPerRec_cbs)
projections_cbs$recTds_cbs <- as.numeric(projections_cbs$recTds_cbs)
projections_cbs$rushAtt_cbs <- as.numeric(projections_cbs$rushAtt_cbs)
projections_cbs$rushYds_cbs <- as.numeric(projections_cbs$rushYds_cbs)
projections_cbs$rushYdsPerAtt_cbs <- as.numeric(projections_cbs$rushYdsPerAtt_cbs)
projections_cbs$rushTds_cbs <- as.numeric(projections_cbs$rushTds_cbs)
projections_cbs$passAtt_cbs <- as.numeric(projections_cbs$passAtt_cbs)
projections_cbs$passComp_cbs <- as.numeric(projections_cbs$passComp_cbs)
projections_cbs$passYds_cbs <- as.numeric(projections_cbs$passYds_cbs)
projections_cbs$passTds_cbs <- as.numeric(projections_cbs$passTds_cbs)
projections_cbs$passInt_cbs <- as.numeric(projections_cbs$passInt_cbs)
projections_cbs$passCompPct_cbs <- as.numeric(projections_cbs$passCompPct_cbs)
projections_cbs$passYdsPerAtt_cbs <- as.numeric(projections_cbs$passYdsPerAtt_cbs)
#Add variables from other projection sources
projections_cbs$twoPts_cbs <- NA
#Player names
projections_cbs$name <- str_sub(projections_cbs$player, end=str_locate(string=projections_cbs$player, ',')[,1]-1)
#Remove Duplicates
projections_cbs[duplicated(projections_cbs$name),]
projections_cbs
#Rename Players
projections_cbs[projections_cbs$name=="EJ Manuel", "name"] <- "E.J. Manuel"
#Player teams
projections_cbs$team_cbs <- str_trim(str_sub(projections_cbs$player, start= -3))
#Calculate overall rank
projections_cbs$overallRank_cbs <- rank(-projections_cbs$pts_cbs, ties.method="min")
#Order variables in data set
projections_cbs <- projections_cbs[,c("name","pos","team_cbs","positionRank_cbs","overallRank_cbs",
"passAtt_cbs","passComp_cbs","passYds_cbs","passTds_cbs","passInt_cbs","passCompPct_cbs","passYdsPerAtt_cbs",
"rushAtt_cbs","rushYds_cbs","rushYdsPerAtt_cbs","rushTds_cbs",
"rec_cbs","recYds_cbs","recYdsPerRec_cbs","recTds_cbs","twoPts_cbs","fumbles_cbs","pts_cbs")]
#Order players by overall rank
projections_cbs <- projections_cbs[order(projections_cbs$overallRank_cbs),]
row.names(projections_cbs) <- 1:dim(projections_cbs)[1]
projections_cbs
#Density Plot
ggplot(projections_cbs, aes(x=pts_cbs)) + geom_density(fill="red", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of CBS Projected Points from 2013")
ggsave(paste(getwd(),"/Figures/CBS projections 2013.jpg", sep=""))
dev.off()
#Save file
save(projections_cbs, file = paste(getwd(),"/Data/CBS-Projections-2013.RData", sep=""))
write.csv(projections_cbs, file=paste(getwd(),"/Data/CSV/CBS-Projections-2013.csv", sep=""), row.names=FALSE)
###########################
# File: NFL Projections.R
# Description: Downloads Fantasy Football Projections from NFL.com
# Date: 3/3/2013
# Author: Isaac Petersen (isaactpetersen@gmail.com)
# Notes:
# -These projections are from last year (NFL.com has not yet updated them for the upcoming season)
###########################
#Load libraries
library("XML")
library("stringr")
library("ggplot2")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Download fantasy football projections from NFL.com
qb1_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?position=1&sort=projectedPts&statCategory=projectedStats&statSeason=2013&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
qb2_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=26&position=1&sort=projectedPts&statCategory=projectedStats&statSeason=2013&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
rb1_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?position=2&statCategory=projectedStats&statSeason=2013&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
rb2_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=26&position=2&sort=projectedPts&statCategory=projectedStats&statSeason=2013&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
rb3_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=51&position=2&sort=projectedPts&statCategory=projectedStats&statSeason=2013&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
rb4_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=76&position=2&sort=projectedPts&statCategory=projectedStats&statSeason=2013&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
wr1_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?position=3&sort=projectedPts&statCategory=projectedStats&statSeason=2013&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
wr2_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=26&position=3&sort=projectedPts&statCategory=projectedStats&statSeason=2013&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
wr3_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=51&position=3&sort=projectedPts&statCategory=projectedStats&statSeason=2013&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
wr4_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=76&position=3&sort=projectedPts&statCategory=projectedStats&statSeason=2013&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
wr5_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=101&position=3&sort=projectedPts&statCategory=projectedStats&statSeason=2013&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
wr6_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=126&position=3&sort=projectedPts&statCategory=projectedStats&statSeason=2013&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
te1_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?position=4&statCategory=projectedStats&statSeason=2013&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
te2_nfl <- readHTMLTable("http://fantasy.nfl.com/research/projections?offset=26&position=4&sort=projectedPts&statCategory=projectedStats&statSeason=2013&statType=seasonProjectedStats", stringsAsFactors = FALSE)$`NULL`
#Add variable names for each object
fileList <- c("qb1_nfl","qb2_nfl","rb1_nfl","rb2_nfl","rb3_nfl","rb4_nfl","wr1_nfl","wr2_nfl","wr3_nfl","wr4_nfl","wr5_nfl","wr6_nfl","te1_nfl","te2_nfl")
for(i in 1:length(fileList)){
assign(fileList[i],get(fileList[i])[1:dim(get(fileList[i]))[1],])
t <- get(fileList[i])
names(t) <-  c("player_nfl","opp_nfl","gp_nfl","passYds_nfl","passTds_nfl","passInt_nfl","rushYds_nfl","rushTds_nfl","recYds_nfl","recTds_nfl","fumbleTds_nfl","twoPts_nfl","fumbles_nfl","pts_nfl")
t[t == "-"] <- 0
assign(fileList[i], t)
}
#Merge players within position
qb_nfl <- rbind(qb1_nfl,qb2_nfl)
rb_nfl <- rbind(rb1_nfl,rb2_nfl,rb3_nfl,rb4_nfl)
wr_nfl <- rbind(wr1_nfl,wr2_nfl,wr3_nfl,wr4_nfl,wr5_nfl,wr6_nfl)
te_nfl <- rbind(te1_nfl,te2_nfl)
#Add variable for player position
qb_nfl$pos <- as.factor("QB")
rb_nfl$pos <- as.factor("RB")
wr_nfl$pos <- as.factor("WR")
te_nfl$pos <- as.factor("TE")
#Calculate position rank
qb_nfl$positionRank_nfl <- 1:dim(qb_nfl)[1]
rb_nfl$positionRank_nfl <- 1:dim(rb_nfl)[1]
wr_nfl$positionRank_nfl <- 1:dim(wr_nfl)[1]
te_nfl$positionRank_nfl <- 1:dim(te_nfl)[1]
#Merge players across positions
projections_nfl <- rbind(qb_nfl,rb_nfl,wr_nfl,te_nfl)
#Convert variables from character strings to numeric
projections_nfl$gp_nfl <- as.numeric(projections_nfl$gp_nfl)
projections_nfl$passYds_nfl <- as.numeric(projections_nfl$passYds_nfl)
projections_nfl$passTds_nfl <- as.numeric(projections_nfl$passTds_nfl)
projections_nfl$passInt_nfl <- as.numeric(projections_nfl$passInt_nfl)
projections_nfl$rushYds_nfl <- as.numeric(projections_nfl$rushYds_nfl)
projections_nfl$rushTds_nfl <- as.numeric(projections_nfl$rushTds_nfl)
projections_nfl$recYds_nfl <- as.numeric(projections_nfl$recYds_nfl)
projections_nfl$recTds_nfl <- as.numeric(projections_nfl$recTds_nfl)
projections_nfl$fumbleTds_nfl <- as.numeric(projections_nfl$fumbleTds_nfl)
projections_nfl$twoPts_nfl <- as.numeric(projections_nfl$twoPts_nfl)
projections_nfl$fumbles_nfl <- as.numeric(projections_nfl$fumbles_nfl)
projections_nfl$pts_nfl <- as.numeric(projections_nfl$pts_nfl)
#Player names
qbnames <- str_sub(projections_nfl$player_nfl, end=str_locate(string=projections_nfl$player_nfl, c("QB"))[,1]-2) #"QB -"
rbnames <- str_sub(projections_nfl$player_nfl, end=str_locate(string=projections_nfl$player_nfl, c("RB"))[,1]-2) #"RB -"
wrnames <- str_sub(projections_nfl$player_nfl, end=str_locate(string=projections_nfl$player_nfl, c("WR"))[,1]-2) #"WR -"
tenames <- str_sub(projections_nfl$player_nfl, end=str_locate(string=projections_nfl$player_nfl, c("TE"))[,1]-2) #"TE -"
qbnames <- qbnames[1:length(projections_nfl[which(projections_nfl$pos == "QB"),"pos"])]
rbnames <- rbnames[(length(projections_nfl[which(projections_nfl$pos == "QB"),"pos"]) + 1):(length(projections_nfl[which(projections_nfl$pos == "QB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "RB"),"pos"]))]
wrnames <- wrnames[(length(projections_nfl[which(projections_nfl$pos == "QB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "RB"),"pos"]) + 1):(length(projections_nfl[which(projections_nfl$pos == "QB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "RB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "WR"),"pos"]))]
tenames <- tenames[(length(projections_nfl[which(projections_nfl$pos == "QB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "RB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "WR"),"pos"]) + 1):(length(projections_nfl[which(projections_nfl$pos == "QB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "RB"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "WR"),"pos"]) + length(projections_nfl[which(projections_nfl$pos == "TE"),"pos"]))]
projections_nfl$name <- c(na.omit(qbnames),na.omit(rbnames),na.omit(wrnames),na.omit(tenames))
#Player teams
projections_nfl$team_nfl <- str_trim(str_sub(projections_nfl$player_nfl, start=str_locate(string=projections_nfl$player_nfl, c(" - "))[,1]+3, end=str_locate(string=projections_nfl$player_nfl, c(" - "))[,1]+6)) #, end=str_locate(string=projections_nfl$player_nfl, c("-"))[,1]+5
#Remove duplicate cases
projections_nfl[duplicated(projections_nfl$name),]
projections_nfl
#Rename Players
projections_nfl[projections_nfl$name=="EJ Manuel", "name"] <- "E.J. Manuel"
#Calculate overall rank
projections_nfl$overallRank_nfl <- rank(-projections_nfl$pts_nfl, ties.method="min")
#Order variables in data set
projections_nfl <- projections_nfl[,c("name","pos","team_nfl","positionRank_nfl","overallRank_nfl",
"passYds_nfl","passTds_nfl","passInt_nfl",
"rushYds_nfl","rushTds_nfl","recYds_nfl","recTds_nfl","twoPts_nfl","fumbles_nfl","pts_nfl")]
#Order players by overall rank
projections_nfl <- projections_nfl[order(projections_nfl$overallRank_nfl),]
row.names(projections_nfl) <- 1:dim(projections_nfl)[1]
projections_nfl
#Density Plot
ggplot(projections_nfl, aes(x=pts_nfl), fill=pos) + geom_density(fill="green", alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of NFL.com Projected Points from 2013")
ggsave(paste(getwd(),"/Figures/NFL projections 2013.jpg", sep=""))
dev.off()
#Save file
save(projections_nfl, file = paste(getwd(),"/Data/NFL-Projections-2013.RData", sep=""))
write.csv(projections_nfl, file=paste(getwd(),"/Data/CSV/NFL-Projections-2013.csv", sep=""), row.names=FALSE)
library("stringr")
library("XML")
#Source Files
source(paste(getwd(),"/R Scripts/ESPN Projections.R", sep=""), echo=TRUE) #need for calculating risk (sd)
source(paste(getwd(),"/R Scripts/CBS Projections.R", sep=""), echo=TRUE) #need for calculating risk (sd)
source(paste(getwd(),"/R Scripts/NFL Projections.R", sep=""), echo=TRUE) #need for calculating risk (sd)
source(paste(getwd(),"/R Scripts/FantasyPros Projections.R", sep=""), echo=TRUE)
source(paste(getwd(),"/R Scripts/Calculate League Projections.R", sep=""), echo=TRUE)
projections
source(paste(getwd(),"/R Scripts/Evaluate Projections.R", sep=""), echo=TRUE)
load_or_install("psy")
source(paste(getwd(),"/R Scripts/Evaluate Projections.R", sep=""), echo=TRUE)
load_or_install("forecast")
source(paste(getwd(),"/R Scripts/Evaluate Projections.R", sep=""), echo=TRUE)
source(paste(getwd(),"/R Scripts/Risk.R", sep=""), echo=TRUE)
load(paste(getwd(),"/Data/FantasyPros-Projections-2013.RData", sep=""))
#Risk Data
riskData <- projections[,c("name","risk")]
riskData
#Avg & Projected Cost
avgcost <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
###Fantasy Pros
avgcost$name <- str_sub(avgcost[,c("Player (pos, team, bye)")], end=str_locate(avgcost[,c("Player (pos, team, bye)")], ',')[,1]-1)
avgcost$cost <- as.numeric(sub("\\$","", avgcost$Ave))
avgcost <- avgcost[,c("name","cost")]
#Rename Players
avgcost[grep("Beanie", avgcost[,c("name")]),"name"] <- "Beanie Wells"
avgcost[grep("Ty Hilton", avgcost[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost[grep("Robert Housler", avgcost[,c("name")]),"name"] <- "Rob Housler"
avgcost[grep("Reuben Randle", avgcost[,c("name")]),"name"] <- "Rueben Randle"
avgcost[grep("Joseph Morgan", avgcost[,c("name")]),"name"] <- "Joe Morgan"
avgcost[grep("Christopher Ivory", avgcost[,c("name")]),"name"] <- "Chris Ivory"
#Merge
projections <- merge(projections_fp, riskData, by="name", all.x=TRUE)
projections <- merge(projections, avgcost, by="name", all.x=TRUE)
projections$cost[is.na(projections$cost)==TRUE] <- 0
#Remove duplicate cases
projections[duplicated(projections$name),"name"]
projections[projections$name %in% projections[duplicated(projections$name),"name"],]
#Modify variable names
projections$team <- projections$team_fp
projections$passYds <- projections$passYds_fp
projections$passTds <- projections$passTds_fp
projections$passInt <- projections$passInt_fp
projections$rushYds <- projections$rushYds_fp
projections$rushTds <- projections$rushTds_fp
projections$rec <- projections$rec_fp
projections$recYds <- projections$recYds_fp
projections$recTds <- projections$recTds_fp
projections$twoPts <- projections$twoPts_fp
projections$fumbles <- projections$fumbles_fp
projections$points <- projections$pts_fp
avgcost <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
###Fantasy Pros
avgcost$name <- str_sub(avgcost[,c("Player (pos, team, bye)")], end=str_locate(avgcost[,c("Player (pos, team, bye)")], ',')[,1]-1)
avgcost$cost <- as.numeric(sub("\\$","", avgcost$Ave))
avgcost <- avgcost[,c("name","cost")]
avgcost[grep("Beanie", avgcost[,c("name")]),"name"]
avgcost[grep("Ty Hilton", avgcost[,c("name")]),"name"]
avgcost[grep("Robert Housler", avgcost[,c("name")]),"name"]
avgcost[grep("Reuben Randle", avgcost[,c("name")]),"name"]
avgcost[grep("Randle", avgcost[,c("name")]),"name"]
avgcost[grep("Joseph Morgan", avgcost[,c("name")]),"name"]
avgcost[grep("Morgan", avgcost[,c("name")]),"name"]
avgcost[grep("Christopher Ivory", avgcost[,c("name")]),"name"]
#Rename Players
avgcost[grep("Beanie", avgcost[,c("name")]),"name"] <- "Beanie Wells"
avgcost[grep("Ty Hilton", avgcost[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost[grep("Robert Housler", avgcost[,c("name")]),"name"] <- "Rob Housler"
#avgcost[grep("Reuben Randle", avgcost[,c("name")]),"name"] <- "Rueben Randle"
#avgcost[grep("Joseph Morgan", avgcost[,c("name")]),"name"] <- "Joe Morgan"
avgcost[grep("Christopher Ivory", avgcost[,c("name")]),"name"] <- "Chris Ivory"
#Merge
projections <- merge(projections_fp, riskData, by="name", all.x=TRUE)
projections <- merge(projections, avgcost, by="name", all.x=TRUE)
projections$cost[is.na(projections$cost)==TRUE] <- 0
projections[duplicated(projections$name),"name"]
projections[projections$name %in% projections[duplicated(projections$name),"name"],]
#Modify variable names
projections$team <- projections$team_fp
projections$passYds <- projections$passYds_fp
projections$passTds <- projections$passTds_fp
projections$passInt <- projections$passInt_fp
projections$rushYds <- projections$rushYds_fp
projections$rushTds <- projections$rushTds_fp
projections$rec <- projections$rec_fp
projections$recYds <- projections$recYds_fp
projections$recTds <- projections$recTds_fp
projections$twoPts <- projections$twoPts_fp
projections$fumbles <- projections$fumbles_fp
projections$points <- projections$pts_fp
#Subset data to keep players with no missing values for name/pos/points/risk/cost
shinyData1 <- projections[,c("name","pos","team","passYds","passTds","passInt","rushYds","rushTds","rec","recYds","recTds","twoPts","fumbles","points","cost","risk")]
shinyData2 <- na.omit(projections[,c("name","pos","points","cost","risk")])
shinyData <- shinyData1[shinyData1$name %in% shinyData2$name,]
shinyData
#Calculate Position Rank
shinyData$positionRank[shinyData$pos=="QB"] <- rank(-shinyData$points[shinyData$pos=="QB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="RB"] <- rank(-shinyData$points[shinyData$pos=="RB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="WR"] <- rank(-shinyData$points[shinyData$pos=="WR"], ties.method="min")
shinyData$positionRank[shinyData$pos=="TE"] <- rank(-shinyData$points[shinyData$pos=="TE"], ties.method="min")
#Calculate Overall Rank
shinyData$overallRank <- rank(-shinyData$points, ties.method="min")
#Order Data by Overall Rank
shinyData <- shinyData[order(-shinyData$points),]
row.names(shinyData) <- 1:dim(shinyData)[1]
#Select Variables to Keep
shinyData <- shinyData[,c("name","pos","team","overallRank","positionRank","passYds","passTds","passInt","rushYds","rushTds","rec","recYds","recTds","twoPts","fumbles","cost","risk")] #,"points"
shinyData
#Save file
save(shinyData, file = paste(getwd(),"/Data/shinyData-2013.RData", sep=""))
write.csv(shinyData, file=paste(getwd(),"/Data/CSV/shinyData-2013.csv", sep=""), row.names=FALSE)
write.csv(shinyData, file=paste(getwd(),"/shinyapp/shinyData.csv", sep=""), row.names=FALSE)
avgcost <- readHTMLTable("http://www.fantasypros.com/nfl/auction-values/overall.php", stringsAsFactors = FALSE)$data
avgcost
###Fantasy Pros
avgcost$name <- str_sub(avgcost[,c("Player (pos, team, bye)")], end=str_locate(avgcost[,c("Player (pos, team, bye)")], ',')[,1]-1)
#avgcost$cost <- as.numeric(sub("\\$","", avgcost$Ave)) ###IMPORTANT: Avg cost for FantasyPros is messed up bc they have a source with cost of zeros for all players -- use max instead
avgcost$cost <- as.numeric(sub("\\$","", avgcost$Max))
avgcost <- avgcost[,c("name","cost")]
#Rename Players
avgcost[grep("Beanie", avgcost[,c("name")]),"name"] <- "Beanie Wells"
avgcost[grep("Ty Hilton", avgcost[,c("name")]),"name"] <- "T.Y. Hilton"
avgcost[grep("Robert Housler", avgcost[,c("name")]),"name"] <- "Rob Housler"
#avgcost[grep("Reuben Randle", avgcost[,c("name")]),"name"] <- "Rueben Randle"
#avgcost[grep("Joseph Morgan", avgcost[,c("name")]),"name"] <- "Joe Morgan"
avgcost[grep("Christopher Ivory", avgcost[,c("name")]),"name"] <- "Chris Ivory"
#Merge
projections <- merge(projections_fp, riskData, by="name", all.x=TRUE)
projections <- merge(projections, avgcost, by="name", all.x=TRUE)
projections$cost[is.na(projections$cost)==TRUE] <- 0
#Remove duplicate cases
projections[duplicated(projections$name),"name"]
projections[projections$name %in% projections[duplicated(projections$name),"name"],]
#Modify variable names
projections$team <- projections$team_fp
projections$passYds <- projections$passYds_fp
projections$passTds <- projections$passTds_fp
projections$passInt <- projections$passInt_fp
projections$rushYds <- projections$rushYds_fp
projections$rushTds <- projections$rushTds_fp
projections$rec <- projections$rec_fp
projections$recYds <- projections$recYds_fp
projections$recTds <- projections$recTds_fp
projections$twoPts <- projections$twoPts_fp
projections$fumbles <- projections$fumbles_fp
projections$points <- projections$pts_fp
#Subset data to keep players with no missing values for name/pos/points/risk/cost
shinyData1 <- projections[,c("name","pos","team","passYds","passTds","passInt","rushYds","rushTds","rec","recYds","recTds","twoPts","fumbles","points","cost","risk")]
shinyData2 <- na.omit(projections[,c("name","pos","points","cost","risk")])
shinyData <- shinyData1[shinyData1$name %in% shinyData2$name,]
#Calculate Position Rank
shinyData$positionRank[shinyData$pos=="QB"] <- rank(-shinyData$points[shinyData$pos=="QB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="RB"] <- rank(-shinyData$points[shinyData$pos=="RB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="WR"] <- rank(-shinyData$points[shinyData$pos=="WR"], ties.method="min")
shinyData$positionRank[shinyData$pos=="TE"] <- rank(-shinyData$points[shinyData$pos=="TE"], ties.method="min")
#Calculate Overall Rank
shinyData$overallRank <- rank(-shinyData$points, ties.method="min")
#Order Data by Overall Rank
shinyData <- shinyData[order(-shinyData$points),]
row.names(shinyData) <- 1:dim(shinyData)[1]
#Select Variables to Keep
shinyData <- shinyData[,c("name","pos","team","overallRank","positionRank","passYds","passTds","passInt","rushYds","rushTds","rec","recYds","recTds","twoPts","fumbles","cost","risk")] #,"points"
#Save file
shinyData
#Save file
save(shinyData, file = paste(getwd(),"/Data/shinyData-2013.RData", sep=""))
write.csv(shinyData, file=paste(getwd(),"/Data/CSV/shinyData-2013.csv", sep=""), row.names=FALSE)
write.csv(shinyData, file=paste(getwd(),"/shinyapp/shinyData.csv", sep=""), row.names=FALSE)
