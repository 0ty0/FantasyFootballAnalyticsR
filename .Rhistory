projections$fumblesPts_nfl <- projections$fumbles_nfl*fumlMultiplier
projections$projectedPts_espn <- rowSums(projections[,c("passYdsPts_espn","passTdsPts_espn","passIntPts_espn","rushYdsPts_espn","rushTdsPts_espn","recYdsPts_espn","recTdsPts_espn","twoPts_espn","fumblesPts_espn")], na.rm=T)
projections$projectedPts_cbs <- rowSums(projections[,c("passYdsPts_cbs","passTdsPts_cbs","passIntPts_cbs","rushYdsPts_cbs","rushTdsPts_cbs","recYdsPts_cbs","recTdsPts_cbs","twoPts_cbs","fumblesPts_cbs")], na.rm=T)
projections$projectedPts_nfl <- rowSums(projections[,c("passYdsPts_nfl","passTdsPts_nfl","passIntPts_nfl","rushYdsPts_nfl","rushTdsPts_nfl","recYdsPts_nfl","recTdsPts_nfl","twoPts_nfl","fumblesPts_nfl")], na.rm=T)
#Convert Zeros to NA
#projections$projectedPts_espn[projections$projectedPts_espn == 0] <- NA
#projections$projectedPts_cbs[projections$projectedPts_cbs == 0] <- NA
#projections$projectedPts_nfl[projections$projectedPts_nfl == 0] <- NA
#Calculate average of categories
projections$passYds <- rowMeans(projections[,c("passYds_espn","passYds_cbs","passYds_nfl")], na.rm=TRUE)
projections$passTds <- rowMeans(projections[,c("passTds_espn","passTds_cbs","passTds_nfl")], na.rm=TRUE)
projections$passInt <- rowMeans(projections[,c("passInt_espn","passInt_cbs","passInt_nfl")], na.rm=TRUE)
projections$rushYds <- rowMeans(projections[,c("rushYds_espn","rushYds_cbs","rushYds_nfl")], na.rm=TRUE)
projections$rushTds <- rowMeans(projections[,c("rushTds_espn","rushTds_cbs","rushTds_nfl")], na.rm=TRUE)
projections$recYds <- rowMeans(projections[,c("recYds_espn","recYds_cbs","recYds_nfl")], na.rm=TRUE)
projections$recTds <- rowMeans(projections[,c("recTds_espn","recTds_cbs","recTds_nfl")], na.rm=TRUE)
projections$twoPts <- rowMeans(projections[,c("twoPts_espn","twoPts_cbs","twoPts_nfl")], na.rm=TRUE)
projections$fumbles <- rowMeans(projections[,c("fumbles_espn","fumbles_cbs","fumbles_nfl")], na.rm=TRUE)
#Convert NA to 0
#projections[is.na(projections$passYds)==TRUE,"passYds"] <- 0
#projections[is.na(projections$passTds)==TRUE,"passTds"] <- 0
#projections[is.na(projections$passInt)==TRUE,"passInt"] <- 0
#projections[is.na(projections$rushYds)==TRUE,"rushYds"] <- 0
#projections[is.na(projections$rushTds)==TRUE,"rushTds"] <- 0
#projections[is.na(projections$recYds)==TRUE,"recYds"] <- 0
#projections[is.na(projections$recTds)==TRUE,"recTds"] <- 0
#projections[is.na(projections$twoPts)==TRUE,"twoPts"] <- 0
#projections[is.na(projections$fumbles)==TRUE,"fumbles"] <- 0
#If one site's projection is 0, take max of sites' projections
#for (i in 1:dim(projections)[1]){
#  ifelse(projections$passYds_espn[i]==0 | projections$passYds_cbs[i]==0, projections$passYds[i] <- max(projections$passYds_espn[i], projections$passYds_cbs[i], na.rm=TRUE), projections$passYds[i] <- projections$passYds[i])
#  ifelse(projections$passTds_espn[i]==0 | projections$passTds_cbs[i]==0, projections$passTds[i] <- max(projections$passTds_espn[i], projections$passTds_cbs[i], na.rm=TRUE), projections$passTds[i] <- projections$passTds[i])
#  ifelse(projections$passInt_espn[i]==0 | projections$passInt_cbs[i]==0, projections$passInt[i] <- max(projections$passInt_espn[i], projections$passInt_cbs[i], na.rm=TRUE), projections$passInt[i] <- projections$passInt[i])
#  ifelse(projections$rushYds_espn[i]==0 | projections$rushYds_cbs[i]==0, projections$rushYds[i] <- max(projections$rushYds_espn[i], projections$rushYds_cbs[i], na.rm=TRUE), projections$rushYds[i] <- projections$rushYds[i])
#  ifelse(projections$rushTds_espn[i]==0 | projections$rushTds_cbs[i]==0, projections$rushTds[i] <- max(projections$rushTds_espn[i], projections$rushTds_cbs[i], na.rm=TRUE), projections$rushTds[i] <- projections$rushTds[i])
#  ifelse(projections$recYds_espn[i]==0 | projections$recYds_cbs[i]==0, projections$recYds[i] <- max(projections$recYds_espn[i], projections$recYds_cbs[i], na.rm=TRUE), projections$recYds[i] <- projections$recYds[i])
#  ifelse(projections$recTds_espn[i]==0 | projections$recTds_cbs[i]==0, projections$recTds[i] <- max(projections$recTds_espn[i], projections$recTds_cbs[i], na.rm=TRUE), projections$recTds[i] <- projections$recTds[i])
#  ifelse(projections$fumbles_espn[i]==0 | projections$fumbles_cbs[i]==0, projections$fumbles[i] <- max(projections$fumbles_espn[i], projections$fumbles_cbs[i], na.rm=TRUE), projections$fumbles[i] <- projections$fumbles[i])
#}
#Check projections
#Calculate projected points for your league (avg of ESPN, CBS, and NFL projections)
projections$passYdsPts <- projections$passYds*passYdsMultiplier
projections$passTdsPts <- projections$passTds*passTdsMultiplier
projections$passIntPts <- projections$passInt*passIntMultiplier
projections$rushYdsPts <- projections$rushYds*rushYdsMultiplier
projections$rushTdsPts <- projections$rushTds*rushTdsMultiplier
projections$recYdsPts <- projections$recYds*recYdsMultiplier
projections$recTdsPts <- projections$recTds*recTdsMultiplier
projections$fumblesPts <- projections$fumbles*fumlMultiplier
projections$projectedPts <- rowSums(projections[,c("passYdsPts","passTdsPts","passIntPts","rushYdsPts","rushTdsPts","recYdsPts","recTdsPts","twoPts","fumblesPts")], na.rm=T)
#Calculate latent variable for projected points
cor(projections[,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts")], use="pairwise.complete.obs")
factor.analysis <- factanal(~projectedPts_espn + projectedPts_cbs + projectedPts_nfl, factors = 1, scores = "Bartlett", data=projections) #regression
factor.scores <- factor.analysis$scores
factor.loadings <- factor.analysis$loadings[,1]
factor.loadings
projectedPtsLatent <- factor.scores
#projectedPtsLatent <- vector(mode="numeric")
#for (i in 1:dim(projections)[1]){
#  ifelse(i %in% row.names(factor.scores), projectedPtsLatent[i] <- factor.scores[row.names(factor.scores)==i], projectedPtsLatent[i] <- 0)
#}
#Rescale the factor scores to have the same range as the average projections data
projections$projectedPtsLatent <- as.vector(rescaleRange(variable=projectedPtsLatent, minOutput=0, maxOutput=max(projections$projectedPts)))
projections$projectedPtsLatent
projections[,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts","projectedPtsLatent")]
cor(projections[,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts","projectedPtsLatent")], use="pairwise.complete.obs")
projections$projectedPts_espn[projections$projectedPts_espn == 0] <- NA
projections$projectedPts_cbs[projections$projectedPts_cbs == 0] <- NA
projections$projectedPts_nfl[projections$projectedPts_nfl == 0] <- NA
cor(projections[,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts","projectedPtsLatent")], use="pairwise.complete.obs")
projections$overallRank <- rank(-projections$projectedPtsLatent, ties.method="min")
#Order players by overall rank
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:dim(projections)[1]
#Keep important variables
projections <- projections[,c("name","pos","team","overallRank","projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts","projectedPtsLatent")]
projections
pointDensity <- c(projections$projectedPts_espn,projections$projectedPts_cbs,projections$projectedPts_nfl) #,projections$projectedPtsLatent
sourceDensity <- c(rep("ESPN",dim(projections)[1]),rep("CBS",dim(projections)[1]),rep("NFL",dim(projections)[1])) #,rep("Latent",dim(projections)[1])
densityData <- data.frame(pointDensity,sourceDensity)
ggplot(densityData, aes(x=pointDensity, fill=sourceDensity)) + geom_density(alpha=.3) + xlab("Player's Projected Points") + ggtitle("Density Plot of Projected Points from 2012") + theme(legend.title=element_blank())
save(projections, file = paste(getwd(),"/Data/LeagueProjections-2012.RData", sep=""))
library("psy")
library("psych")
library("ggplot2")
install.packages("psy")
library("psy")
library("psych")
library("ggplot2")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
load(paste(getwd(),"/Data/LeagueProjections-2012.RData", sep=""))
actualPoints <- read.csv(paste(getwd(),"/Data/Yahoo-actualpoints-2012.csv", sep=""))
#Cleanup Yahoo actual points data
actualPoints <- actualPoints[which(actualPoints$Fan.Pts!=""),]
actualPoints$name <- as.character(actualPoints$Player)
actualPoints$actualPts <- actualPoints$Fan.Pts
actualPoints <- actualPoints[,c("name","actualPts")]
row.names(actualPoints) <- 1:dim(actualPoints)[1]
#Change player names
actualPoints[which(actualPoints$name=="Stevie Johnson"),"name"] <- "Steve Johnson"
#Merge projections with Yahoo actual points
projectedWithActualPts <- merge(projections, actualPoints, by="name", all.x=TRUE)
#Remove duplicate cases
projectedWithActualPts[duplicated(projectedWithActualPts$name),]
projectedWithActualPts[projectedWithActualPts$name=="Alex Smith",]
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",]
projectedWithActualPts[projectedWithActualPts$name=="Alex Smith",][2,] <- NA
projectedWithActualPts <- projectedWithActualPts[!is.na(projectedWithActualPts$name),]
projectedWithActualPts[projectedWithActualPts$name=="Steve Smith",][c(1,4),] <- NA
projectedWithActualPts <- projectedWithActualPts[!is.na(projectedWithActualPts$name),]
#Correlation between projections and actual points
cor(projectedWithActualPts[,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts","projectedPtsLatent","actualPts")], use="pairwise.complete.obs")
summary(lm(actualPts ~ projectedPts_espn, data=projectedWithActualPts))$r.squared
summary(lm(actualPts ~ projectedPts_cbs, data=projectedWithActualPts))$r.squared
summary(lm(actualPts ~ projectedPts_nfl, data=projectedWithActualPts))$r.squared
summary(lm(actualPts ~ projectedPts, data=projectedWithActualPts))$r.squared
summary(lm(actualPts ~ projectedPtsLatent, data=projectedWithActualPts))$r.squared
#Absolute agreement
icc(projectedWithActualPts[,c("projectedPts_espn","actualPts")])$icc.agreement
icc(projectedWithActualPts[,c("projectedPts_cbs","actualPts")])$icc.agreement
icc(projectedWithActualPts[,c("projectedPts_nfl","actualPts")])$icc.agreement
icc(projectedWithActualPts[,c("projectedPts","actualPts")])$icc.agreement
icc(projectedWithActualPts[,c("projectedPtsLatent","actualPts")])$icc.agreement
rcorrcens(actualPts ~ projectedPts_espn, data=projectedWithActualPts)
rcorrcens(actualPts ~ projectedPts_cbs, data=projectedWithActualPts)
rcorrcens(actualPts ~ projectedPts_nfl, data=projectedWithActualPts)
rcorrcens(actualPts ~ projectedPts, data=projectedWithActualPts)
rcorrcens(actualPts ~ projectedPtsLatent, data=projectedWithActualPts)
projectedWithActualPtsNoZeros <- projectedWithActualPts[which(projectedWithActualPts$projectedPts!=0),]
#Re-evaluate correlation between projections and actual points when cases with 0 projected points were excluded
cor(projectedWithActualPtsNoZeros[,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts","projectedPtsLatent","actualPts")], use="pairwise.complete.obs")
ggplot(data=projectedWithActualPts, aes(x=projectedPtsLatent, y=actualPts)) + geom_point() + geom_smooth() + xlab("Projected Fantasy Football Points") + ylab("Actual Fantasy Football Points") + ggtitle("Association Between Projected Fantasy Points and Actual Points") +
annotate("text", x = 80, y = max(projectedWithActualPts$projectedPtsLatent), label = paste("R-Squared = ",round(summary(lm(actualPts ~ projectedPtsLatent, data=projectedWithActualPts))$r.squared,2),sep=""))
save(projectedWithActualPts, file = paste(getwd(),"/Data/projectedWithActualPoints-2012.RData", sep=""))
#Load libraries
library("XML")
library("stringr")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Load data
#load(paste(getwd(),"/Data/LeagueProjections-2012.RData", sep=""))
load(paste(getwd(),"/Data/projectedWithActualPoints-2012.RData", sep=""))
projections <- projectedWithActualPts
#Risk - "Experts"
experts <- readHTMLTable("http://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php", stringsAsFactors = FALSE)$data
experts$sdPick_experts <- as.numeric(experts[,"Std Dev"])
experts$pick_experts <- as.numeric(experts$Ave)
experts$name <- str_sub(experts[,c("Player (pos, team)")], end=str_locate(experts[,c("Player (pos, team)")], '\\(')[,1]-2)
experts[grep("Beanie", experts[,c("Player (pos, team)")]),"name"] <- "Beanie Wells"
experts <- experts[c("name","pick_experts","sdPick_experts")]
#Risk - Wisdom of the Crowd
drafts <- readHTMLTable("http://fantasyfootballcalculator.com/adp.php?teams=10", stringsAsFactors = FALSE)$`NULL`
drafts$sdPick_crowd <- as.numeric(drafts$Std.Dev)
drafts$pick_crowd <- as.numeric(drafts$Overall)
drafts$name <- drafts$Name
drafts <- drafts[,c("name","pick_crowd","sdPick_crowd")]
#Change player names
drafts[which(drafts$name=="Robert Griffin"),"name"] <- "Robert Griffin III"
drafts[which(drafts$name=="Stevie Johnson"),"name"] <- "Steve Johnson"
#Merge files
risk <- merge(experts, drafts, by="name", all=TRUE)
projections <- merge(projections, risk, by="name", all.x=TRUE)
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:max(as.numeric(row.names(projections)))
#Calculate risk
projections$pick <- rowMeans(projections[,c("pick_experts","pick_crowd")], na.rm=TRUE)
projections$sdPts <- apply(projections[,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl")],1,sd) #add FantasyPros
projections$sdPick <- rowMeans(projections[,c("sdPick_experts","sdPick_crowd")], na.rm=TRUE)
projections$sdPts[projections$sdPts == 0] <- NA
projections$sdPickZ <- scale(projections$sdPick)
projections$sdPtsZ <- scale(projections$sdPts)
projections$risk <- rowMeans(projections[,c("sdPickZ","sdPtsZ")], na.rm=TRUE)
#Rescale risk with mean~5 and sd~2
projections$risk <- ((projections$risk * 2/(sd(projections$risk, na.rm=TRUE))) + (5-(mean(projections$risk, na.rm=TRUE))))
#Remove duplicate cases
projections[duplicated(projections$name),]
#Drop variables
projections <- projections[,!(names(projections) %in% c("pick_experts","sdPick_experts","pick_crowd","sdPick_crowd","sdPickZ","sdPtsZ"))]
#Compare accuracy of projections while taking into account risk vs when not taking risk into account
summary(lm(actualPts ~ projectedPtsLatent, data=projections))$r.squared #not considering risk
summary(lm(actualPts ~ projectedPtsLatent + risk, data=projections))$r.squared #considering risk
#Players with highest risk levels
projections[rank(projections$risk, na.last="keep") %in% (max(rank(projections$risk, na.last="keep"), na.rm=TRUE)-5):max(rank(projections$risk, na.last="keep"), na.rm=TRUE) ,]
projections
?apply
apply(projections[,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl")],1,sd)
apply(projections[,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl")],1,sd)
projections$sdPts <- NA
projections$sdPts
dim(projections)[1]
projections$sdPts <- NA
for (i in 1:dim(projections)[1]){
projections$sdPts[i] <- sd(projections[i,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl")], na.rm=TRUE)
}
projections$sdPts
sd(1)
sd(1,2)
sd(c(1,2))
projections$sdPick <- rowMeans(projections[,c("sdPick_experts","sdPick_crowd")], na.rm=TRUE)
raries
library("XML")
library("stringr")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Load data
#load(paste(getwd(),"/Data/LeagueProjections-2012.RData", sep=""))
load(paste(getwd(),"/Data/projectedWithActualPoints-2012.RData", sep=""))
projections <- projectedWithActualPts
#Risk - "Experts"
experts <- readHTMLTable("http://www.fantasypros.com/nfl/rankings/consensus-cheatsheets.php", stringsAsFactors = FALSE)$data
experts$sdPick_experts <- as.numeric(experts[,"Std Dev"])
experts$pick_experts <- as.numeric(experts$Ave)
experts$name <- str_sub(experts[,c("Player (pos, team)")], end=str_locate(experts[,c("Player (pos, team)")], '\\(')[,1]-2)
experts[grep("Beanie", experts[,c("Player (pos, team)")]),"name"] <- "Beanie Wells"
experts <- experts[c("name","pick_experts","sdPick_experts")]
#Risk - Wisdom of the Crowd
drafts <- readHTMLTable("http://fantasyfootballcalculator.com/adp.php?teams=10", stringsAsFactors = FALSE)$`NULL`
drafts$sdPick_crowd <- as.numeric(drafts$Std.Dev)
drafts$pick_crowd <- as.numeric(drafts$Overall)
drafts$name <- drafts$Name
drafts <- drafts[,c("name","pick_crowd","sdPick_crowd")]
#Change player names
drafts[which(drafts$name=="Robert Griffin"),"name"] <- "Robert Griffin III"
drafts[which(drafts$name=="Stevie Johnson"),"name"] <- "Steve Johnson"
#Merge files
risk <- merge(experts, drafts, by="name", all=TRUE)
projections <- merge(projections, risk, by="name", all.x=TRUE)
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:max(as.numeric(row.names(projections)))
#Calculate risk
projections$pick <- rowMeans(projections[,c("pick_experts","pick_crowd")], na.rm=TRUE)
projections$sdPts <- NA
for (i in 1:dim(projections)[1]){
projections$sdPts[i] <- sd(projections[i,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl")], na.rm=TRUE) #add FantasyPros
}
projections$sdPick <- rowMeans(projections[,c("sdPick_experts","sdPick_crowd")], na.rm=TRUE)
projections$sdPts
projections$sdPts[projections$sdPts == 0] <- NA
projections$sdPickZ <- scale(projections$sdPick)
projections$sdPtsZ <- scale(projections$sdPts)
projections$risk <- rowMeans(projections[,c("sdPickZ","sdPtsZ")], na.rm=TRUE)
projections$risk <- ((projections$risk * 2/(sd(projections$risk, na.rm=TRUE))) + (5-(mean(projections$risk, na.rm=TRUE))))
#Remove duplicate cases
projections[duplicated(projections$name),]
#Drop variables
projections <- projections[,!(names(projections) %in% c("pick_experts","sdPick_experts","pick_crowd","sdPick_crowd","sdPickZ","sdPtsZ"))]
#Compare accuracy of projections while taking into account risk vs when not taking risk into account
summary(lm(actualPts ~ projectedPtsLatent, data=projections))$r.squared #not considering risk
summary(lm(actualPts ~ projectedPtsLatent + risk, data=projections))$r.squared #considering risk
lm(actualPts ~ projectedPtsLatent + risk, data=projections)
summary(lm(actualPts ~ projectedPtsLatent + risk, data=projections))
summary(lm(actualPts ~ projectedPtsLatent, data=projections))
projections[rank(projections$risk, na.last="keep") %in% (max(rank(projections$risk, na.last="keep"), na.rm=TRUE)-5):max(rank(projections$risk, na.last="keep"), na.rm=TRUE) ,]
projections[rank(projections$risk, na.last="keep") %in% (max(rank(projections$risk, na.last="keep"), na.rm=TRUE)-5):max(rank(projections$risk, na.last="keep"), na.rm=TRUE) ,]
projections
ggplot(projections, aes(x=risk)) + geom_density(fill="red", alpha=.7) + xlab("Player's Risk Level") + ggtitle("Density Plot of Players' Risk Levels")
ggsave(paste(getwd(),"/Figures/Risk.jpg", sep=""))
ggsave(paste(getwd(),"/Figures/Risk.jpg", sep=""))
save(projections, file = paste(getwd(),"/Data/Risk-2012.RData", sep=""))
playerA <- rnorm(1000000, mean=150, sd=5)
playerB <- rnorm(1000000, mean=150, sd=15)
playerC <- rnorm(1000000, mean=150, sd=30)
mydata <- data.frame(playerA, playerB, playerC)
points <- c(mydata$playerA,mydata$playerB,mydata$playerC)
player <- c(rep("Player A",dim(mydata)[1]),rep("Player B",dim(mydata)[1]),rep("Player C",dim(mydata)[1])) #,rep("Latent",dim(projections)[1])
mydata2 <- data.frame(points,player)
ggplot(mydata2, aes(x=points, fill=player)) + geom_density(alpha=.3) + xlab("Players' Projected Points") + ggtitle("Density Plot of Projected Points for 3 Players") + theme(legend.title=element_blank())
ggsave(paste(getwd(),"/Figures/Understanding Risk.jpg", sep=""))
projections[rank(projections$risk, na.last="keep") %in% (max(rank(projections$risk, na.last="keep"), na.rm=TRUE)-5):max(rank(projections$risk, na.last="keep"), na.rm=TRUE) ,]
projections[rank(projections$risk, na.last="keep") %in% (max(rank(projections$risk, na.last="keep"), na.rm=TRUE)-5):max(rank(projections$risk, na.last="keep"), na.rm=TRUE) ,]
projections$risk
projections[rank(projections$risk, na.last="keep") %in% (max(rank(projections$risk, na.last="keep"), na.rm=TRUE)-5):max(rank(projections$risk, na.last="keep"), na.rm=TRUE) ,]
projections[rank(projections$risk, na.last="keep") %in% (max(rank(projections$risk, na.last="keep"), na.rm=TRUE)-5):max(rank(projections$risk, na.last="keep"), na.rm=TRUE) ,]
League settings
numTeams <- 10  #number of teams in league
numQB <- 1      #number of avg QBs in starting lineup
numRB <- 2.5    #number of avg RBs in starting lineup
numWR <- 2.5    #number of avg WRs in starting lineup
numTE <- 1      #number of avg TEs in starting lineup
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Load data
load(paste(getwd(),"/Data/Risk-2012.RData", sep=""))
#Calculate Value over Replacement
qb <- projections[projections$pos=="QB",][order(projections[projections$pos=="QB",]$overallRank),]
rb <- projections[projections$pos=="RB",][order(projections[projections$pos=="RB",]$overallRank),]
wr <- projections[projections$pos=="WR",][order(projections[projections$pos=="WR",]$overallRank),]
te <- projections[projections$pos=="TE",][order(projections[projections$pos=="TE",]$overallRank),]
qb$positionRank <- rank(-qb$projectedPtsLatent, ties.method="min")
rb$positionRank <- rank(-rb$projectedPtsLatent, ties.method="min")
wr$positionRank <- rank(-wr$projectedPtsLatent, ties.method="min")
te$positionRank <- rank(-te$projectedPtsLatent, ties.method="min")
qbReplacements <- print(ceiling(numQB*numTeams*1.5))
rbReplacements <- print(ceiling(numRB*numTeams*1.5))
wrReplacements <- print(ceiling(numWR*numTeams*1.5))
teReplacements <- print(ceiling(numTE*numTeams*1.5))
qbValueOfReplacement <- print(mean(c(qb$projectedPts[qb$positionRank==qbReplacements],qb$projectedPts[qb$positionRank==(qbReplacements-1)],qb$projectedPts[qb$positionRank==(qbReplacements+1)])))
rbValueOfReplacement <- print(mean(c(rb$projectedPts[rb$positionRank==rbReplacements],rb$projectedPts[rb$positionRank==(rbReplacements-1)],rb$projectedPts[rb$positionRank==(rbReplacements+1)])))
wrValueOfReplacement <- print(mean(c(wr$projectedPts[wr$positionRank==wrReplacements],wr$projectedPts[wr$positionRank==(wrReplacements-1)],wr$projectedPts[wr$positionRank==(wrReplacements+1)])))
teValueOfReplacement <- print(mean(c(te$projectedPts[te$positionRank==teReplacements],te$projectedPts[te$positionRank==(teReplacements-1)],te$projectedPts[te$positionRank==(teReplacements+1)])))
qb$vor <- qb$projectedPts - qbValueOfReplacement
rb$vor <- rb$projectedPts - rbValueOfReplacement
wr$vor <- wr$projectedPts - wrValueOfReplacement
te$vor <- te$projectedPts - teValueOfReplacement
#Merge across positions
projections <- rbind(qb,rb,wr,te)
#Calculate overall rank by VOR
projections$overallRank <- rank(-projections$vor, ties.method="min")
#Order players by overall rank
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:dim(projections)[1]
#Reorder variables
projections <- projections[,c("name","pos","team","overallRank","pick","positionRank","projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts","projectedPtsLatent","vor","sdPick","sdPts","risk")]
#Starters (low risk)
projections[which(projections$risk <= 5 & projections$vor >= 0),]
#Sleepers (high risk)
projections[which(projections$risk >=5 & projections$vor >= 0),]
#Density Plot
ggplot(projections, aes(x=vor, fill=pos)) + geom_density(alpha=.3) + xlab("Player's Value Over Replacement") + ggtitle("Density Plot of Projected VOR from 2012") + theme(legend.title=element_blank())
qplot(pos, vor, data=projections, geom=c("boxplot", "jitter"), fill=pos, main="Value Over Replacement By Position", xlab="", ylab="Value Over Replacement")
ggplot(projections, aes(x=vor, fill=pos)) + geom_density(alpha=.3) + xlab("Player's Value Over Replacement") + ggtitle("Density Plot of Projected VOR from 2012") + theme(legend.title=element_blank())
#League settings
numTeams <- 10  #number of teams in league
numQB <- 1      #number of avg QBs in starting lineup
numRB <- 2.5    #number of avg RBs in starting lineup
numWR <- 2.5    #number of avg WRs in starting lineup
numTE <- 1      #number of avg TEs in starting lineup
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Load data
load(paste(getwd(),"/Data/Risk-2012.RData", sep=""))
#Calculate Value over Replacement
qb <- projections[projections$pos=="QB",][order(projections[projections$pos=="QB",]$overallRank),]
rb <- projections[projections$pos=="RB",][order(projections[projections$pos=="RB",]$overallRank),]
wr <- projections[projections$pos=="WR",][order(projections[projections$pos=="WR",]$overallRank),]
te <- projections[projections$pos=="TE",][order(projections[projections$pos=="TE",]$overallRank),]
qb$positionRank <- rank(-qb$projectedPtsLatent, ties.method="min")
rb$positionRank <- rank(-rb$projectedPtsLatent, ties.method="min")
wr$positionRank <- rank(-wr$projectedPtsLatent, ties.method="min")
te$positionRank <- rank(-te$projectedPtsLatent, ties.method="min")
qbReplacements <- print(ceiling(numQB*numTeams*1.5))
rbReplacements <- print(ceiling(numRB*numTeams*1.5))
wrReplacements <- print(ceiling(numWR*numTeams*1.5))
teReplacements <- print(ceiling(numTE*numTeams*1.5))
qbValueOfReplacement <- print(mean(c(qb$projectedPts[qb$positionRank==qbReplacements],qb$projectedPts[qb$positionRank==(qbReplacements-1)],qb$projectedPts[qb$positionRank==(qbReplacements+1)])))
rbValueOfReplacement <- print(mean(c(rb$projectedPts[rb$positionRank==rbReplacements],rb$projectedPts[rb$positionRank==(rbReplacements-1)],rb$projectedPts[rb$positionRank==(rbReplacements+1)])))
wrValueOfReplacement <- print(mean(c(wr$projectedPts[wr$positionRank==wrReplacements],wr$projectedPts[wr$positionRank==(wrReplacements-1)],wr$projectedPts[wr$positionRank==(wrReplacements+1)])))
teValueOfReplacement <- print(mean(c(te$projectedPts[te$positionRank==teReplacements],te$projectedPts[te$positionRank==(teReplacements-1)],te$projectedPts[te$positionRank==(teReplacements+1)])))
qb$vor <- qb$projectedPts - qbValueOfReplacement
rb$vor <- rb$projectedPts - rbValueOfReplacement
wr$vor <- wr$projectedPts - wrValueOfReplacement
te$vor <- te$projectedPts - teValueOfReplacement
#Merge across positions
projections <- rbind(qb,rb,wr,te)
#Calculate overall rank by VOR
projections$overallRank <- rank(-projections$vor, ties.method="min")
#Order players by overall rank
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:dim(projections)[1]
#Reorder variables
projections <- projections[,c("name","pos","team","overallRank","pick","positionRank","projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts","projectedPtsLatent","vor","sdPick","sdPts","risk")]
projections
projections
projections[which(projections$risk <= 5 & projections$vor >= 0),]
projections[which(projections$risk >=5 & projections$vor >= 0),]
ggplot(projections, aes(x=vor, fill=pos)) + geom_density(alpha=.3) + xlab("Player's Value Over Replacement") + ggtitle("Density Plot of Projected VOR from 2012") + theme(legend.title=element_blank())
ggsave(paste(getwd(),"/Figures/VOR-Density 2012.jpg", sep=""))
# Boxplot
qplot(pos, vor, data=projections, geom=c("boxplot", "jitter"), fill=pos, main="Value Over Replacement By Position", xlab="", ylab="Value Over Replacement")
ggsave(paste(getwd(),"/Figures/VOR-Boxplot 2012.jpg", sep=""))
#Save file
save(projections, file = paste(getwd(),"/Data/VOR-2012.RData", sep=""))
#League settings
leagueCap <- 225   #
defaultCap <- 200
#Library
library("stringr")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
path
paste(strsplit(path,"/Indiana/Research/Data")[[1]],"/Fantasy Football/Research/R/avgcost.csv",sep="")
paste(path,"/Fantasy Football/Research/R/avgcost.csv",sep="")
avgcost <- read.csv(paste(path,"/Fantasy Football/Research/R/avgcost.csv",sep=""))
avgcost2 <- avgcost[which(avgcost$Avg.Cost!=""),]
avgcost2$name <- as.character(avgcost2$Player)
avgcost2$avgCost <- as.numeric((str_replace_all(avgcost2$Avg.Cost, "\\$", "")))
avgcost3 <- avgcost2[,c("name","avgCost")]
avgcost3$projectedCost <- ceiling(avgcost3$avgCost * (leagueCap/defaultCap))
#Change names
avgcost3$name[avgcost3$name=="Stevie Johnson"] <- "Steve Johnson"
projections <- merge(projections, avgcost3, by="name", all.x=TRUE)
projections$projectedCost[is.na(projections$projectedCost)==TRUE] <- 1
projections <- projections[order(projections$overallRank),]
#Remove duplicate cases
projections[duplicated(projections$name),]
#Apply 10% price premium to 33 players with highest projected points, apply 10% price premium for players lower than rank 66
projections$inflatedCost <- ceiling(projections$avgCost * (leagueCap/defaultCap) * 1.0)
projections$inflatedCost[projections$overallRank <= 33] <- ceiling(projections$avgCost[projections$overallRank <= 33] * (leagueCap/defaultCap) * 1.1)
projections$inflatedCost[projections$overallRank >= 67] <- ceiling(projections$avgCost[projections$overallRank >= 67] * (leagueCap/defaultCap) * 0.9)
projections$inflatedCost[is.na(projections$inflatedCost)==TRUE] <- 1
ggplot(projections, aes(x=inflatedCost)) + geom_density(fill="green", alpha=.3) + xlab("Player's Intrinsic Value (Cost)") + ggtitle("Density Plot of Players' Values from 2012") + theme(legend.title=element_blank())
ggsave(paste(getwd(),"/Figures/Inflated Cost 2012.jpg", sep=""))
#Save file
save(projections, file = paste(getwd(),"/Data/AvgCost-2012.RData", sep=""))
#League settings
leagueCap <- 225
numQBstarters <- 1
numRBstarters <- 2
numWRstarters <- 2
numTEstarters <- 1
numTotalStarters <- 7
numTotalPlayers <- 20
maxRisk <- 3.8
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Load data
load(paste(getwd(),"/Data/AvgCost-2012.RData", sep=""))
#Roster Optimization
optimizeData <- na.omit(projections[,c("name","pos","projectedPtsLatent","risk","inflatedCost")])
maxCost <- leagueCap - (numTotalPlayers - numTotalStarters)
#Calculate Optimum Roster
optimizeTeam(maxRisk=maxRisk)
optimizeTeam(maxRisk=100)
optimizeTeam(maxRisk=maxRisk)
library("Rglpk")
#Load data
load(paste(getwd(),"/Data/AvgCost-2012.RData", sep=""))
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Optimum Risk
projectedPoints <- vector(mode="numeric", length=length(seq(min(optimizeData$risk), max(optimizeData$risk), 0.1)))
riskLevel <- vector(mode="numeric", length=length(seq(min(optimizeData$risk), max(optimizeData$risk), 0.1)))
j <- 1
pb <- txtProgressBar(min = 0, max = max(optimizeData$risk), style = 3)
for (i in seq(0, max(optimizeData$risk), 0.1)){
setTxtProgressBar(pb, i)
projectedPoints[j] <- optimizeTeam(maxRisk=i)$optimum
riskLevel[j] <- i
j <- j+1
}
riskData <- as.data.frame(cbind(riskLevel,projectedPoints))
riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
optimizeTeam(maxRisk=3.5) #optimal
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point(size=3) + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points") # + geom_smooth()
ggsave(paste(getwd(),"/Figures/Optimum Risk 2012.jpg", sep=""))
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Bid Up To
listOfPlayers <- vector(mode="character", length=numTotalStarters)
bidUpTo <- vector(mode="numeric", length=length(optimizeData$name))
newCost <- optimizeData$inflatedCost
pb <- txtProgressBar(min = 0, max = length(optimizeData$name), style = 3)
for(i in 1:length(optimizeData$name)){
setTxtProgressBar(pb, i)
j <- 1
listOfPlayers <- rep(optimizeData$name[i],numTotalStarters)
newCost <- optimizeData$inflatedCost
while(!is.na(match(optimizeData$name[i],listOfPlayers))){
newCost[i] <- j
listOfPlayers <- optimizeTeam(points=optimizeData$projectedPts, playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))$players  #UPDATE: maxrisk
bidUpTo[i] <- j
j <- j+1
}
}
optimizeData$bidUpTo <- bidUpTo - 1
optimizeData$bidUpTo[optimizeData$bidUpTo==0] <- 1
projections <- merge(projections, optimizeData, all.x=TRUE)
projections <- projections[order(projections$overallRank),]
projections$bidUpTo[is.na(projections$bidUpTo)] <- 1
row.names(projections) <- 1:max(as.numeric(row.names(projections)))
#Save file
save(projections, file = paste(getwd(),"/Data/BidUpTo-2012.RData", sep=""))
projections
#League Settings
leagueCap <- 225
numQBstarters <- 1
numRBstarters <- 2
numWRstarters <- 2
numTEstarters <- 1
numTotalStarters <- 7
numTotalPlayers <- 20
maxRisk <- 3.8
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Load data
load(paste(getwd(),"/Data/BidUpTo-2012.RData", sep=""))
#Subset data
draftData <- projections[,c("name","pos","team","projectedPtsLatent","vor","sdPick","sdPts","risk","avgCost","inflatedCost","bidUpTo")]
maxCost <- leagueCap - (numTotalPlayers - numTotalStarters)
draftData
draftData[,c("projectedPtsLatent","vor","sdPts","risk")]
draftData
options(digits=2)
draftData
options(digits=1)
draftData
draftData
removedPlayers <- na.omit(draftData)
removedPlayers
drafted <- c("Aaron Rodgers","Steven Jackson")
optimizeDraft(maxRisk=3.8)
optimizeDraft(maxRisk=3.8,omit=c("Aaron Rodgers","Steven Jackson"))
optimizeDraft(maxRisk=3.8)
optimizeDraft(maxRisk=3.8,omit=c("Aaron Rodgers","Steven Jackson"))
optimizeDraft(maxRisk=3.8,omit=drafted)
draftData[!(draftData$name %in% drafted),]
