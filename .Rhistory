optimizeTeam(maxRisk=3.5)
optimizeTeam(maxRisk=3.7)
riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
optimizeTeam(maxRisk=4.0)
optimizeTeam(maxRisk=4.1) #optimal
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point(size=3) + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points") # + geom_smooth()
ggsave(paste(getwd(),"/Figures/Optimum Risk 2012.jpg", sep=""))
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point(size=3) + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points") # + geom_smooth()
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Bid Up To
listOfPlayers <- vector(mode="character", length=numTotalStarters)
bidUpTo <- vector(mode="numeric", length=length(optimizeData$name))
newCost <- optimizeData$inflatedCost
optimizeData
listOfPlayers <- vector(mode="character", length=numTotalStarters)
bidUpTo <- vector(mode="numeric", length=length(optimizeData$name))
newCost <- optimizeData$inflatedCost
pb <- txtProgressBar(min = 0, max = length(optimizeData$name), style = 3)
for(i in 1:length(optimizeData$name)){
setTxtProgressBar(pb, i)
j <- 1
listOfPlayers <- rep(optimizeData$name[i],numTotalStarters)
newCost <- optimizeData$inflatedCost
while(!is.na(match(optimizeData$name[i],listOfPlayers))){
newCost[i] <- j
listOfPlayers <- optimizeTeam(points=optimizeData$projections, playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))$players  #UPDATE: maxrisk
bidUpTo[i] <- j
j <- j+1
}
}
optimizeData$bidUpTo <- bidUpTo - 1
optimizeData$bidUpTo[optimizeData$bidUpTo==0] <- 1
projections <- merge(projections, optimizeData, all.x=TRUE)
projections <- projections[order(projections$overallRank),]
projections$bidUpTo[is.na(projections$bidUpTo)] <- 1
row.names(projections) <- 1:max(as.numeric(row.names(projections)))
projections
save(projections, file = paste(getwd(),"/Data/BidUpTo-2012.RData", sep=""))
#League Settings
leagueCap <- 225
numQBstarters <- 1
numRBstarters <- 2
numWRstarters <- 2
numTEstarters <- 1
numTotalStarters <- 7
numTotalPlayers <- 20
maxRisk <- 3.3
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Load data
load(paste(getwd(),"/Data/BidUpTo-2012.RData", sep=""))
draftData <- projections[,c("name","pos","team","projections","vor","sdPick","sdPts","risk","avgCost","inflatedCost","bidUpTo")] #projectedPtsLatent
maxCost <- leagueCap - (numTotalPlayers - numTotalStarters)
options(digits=2)
draftData
removedPlayers <-  draftData[row.names(na.omit(draftData[,c("projections","risk","inflatedCost")])),] #projectedPtsLatent
row.names(removedPlayers) <- 1:dim(removedPlayers)[1]
removedPlayers
myteam <- data.frame(
player = c("Arian Foster", "Tom Brady", "Jacob Tamme"),
pos = c("RB", "QB", "TE"),
cost = c(64, 46, 5)
)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"Aaron Rodgers","Steven Jackson")
optimizeDraft(maxRisk=3.4)
optimizeDraft(maxRisk=3.4, omit=c("Jamaal Charles","Steven Jackson"))
drafted <- c(myteam$player,"Jamaal Charles","Steven Jackson")
optimizeDraft(maxRisk=3.4)
optimizeDraft(maxRisk=3.4, omit=c("Jamaal Charles","Steven Jackson"))
optimizeDraft(maxRisk=3.4, omit=drafted)
optimizeDraft(maxRisk=3.4)
optimizeDraft(maxRisk=3.4)
optimizeDraft(maxRisk=3.4)
optimizeDraft(maxRisk=3.4, omit=NULL)
optimizeDraft(maxRisk=3.4)
optimizeDraft(maxRisk=3.4, omit=c("Jamaal Charles","Steven Jackson"))
optimizeDraft(maxRisk=3.4, omit=c("Jamaal Charles","Steven Jackson"))
optimizeDraft(maxRisk=3.4, omit=drafted)
myteam <- data.frame(
player = c(),
position = c(),
cost = c()
)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"")
###----------###
optimizeDraft(maxRisk=3.4,omit=drafted)
drafted
optimizeDraft(maxRisk=4.1,omit=drafted)
optimizeDraft(maxRisk=4.1)
optimizeDraft(maxRisk=4.1, omit=c("Jamaal Charles","Steven Jackson"))
optimizeDraft(maxRisk=4.1, omit=drafted)
myteam <- data.frame(
player = c("Arian Foster", "Tom Brady", "Jacob Tamme"),
pos = c("RB", "QB", "TE"),
cost = c(64, 46, 5)
)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"Jamaal Charles","Steven Jackson")
optimizeDraft(maxRisk=4.1)
optimizeDraft(maxRisk=4.1, omit=c("Jamaal Charles","Steven Jackson"))
optimizeDraft(maxRisk=4.1)
drafted <- c(myteam$player,"Vincent Jackson","Eric Decker")
optimizeDraft(maxRisk=4.1)
optimizeDraft(maxRisk=4.1, omit=c("Jamaal Charles","Steven Jackson"))
drafted <- c(myteam$player,"Vincent Jackson","Eric Decker")
optimizeDraft(maxRisk=4.1)
optimizeDraft(maxRisk=4.1, omit=c("Vincent Jackson","Eric Decker"))
optimizeDraft(maxRisk=4.1, omit=drafted)
draftData[!(draftData$name %in% drafted),]
###--UPDATE--###
myteam <- data.frame(
player = c(),
position = c(),
cost = c()
)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"")
optimizeDraft(maxRisk=4.1,omit=drafted)
draftData[!(draftData$name %in% drafted),]
#League settings
leagueCap <- 225
numQBstarters <- 1
numRBstarters <- 2
numWRstarters <- 2
numTEstarters <- 1
numTotalStarters <- 7
numTotalPlayers <- 20
maxRisk <- 3.8
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Load data
load(paste(getwd(),"/Data/AvgCost-2012.RData", sep=""))
#Roster Optimization
optimizeData <- na.omit(projections[,c("name","pos","projections","risk","inflatedCost")]) #projectedPtsLatent
maxCost <- leagueCap - (numTotalPlayers - numTotalStarters)
#Calculate Optimum Roster
optimizeTeam(maxRisk=maxRisk)
optimizeTeam(maxRisk=100)
optimizeData
projections
optimizeData
names(projections)
projections$sdPts
optimizeData <- na.omit(projections[,c("name","pos","projections","risk","inflatedCost","sdPtds")]) #projectedPtsLatent
optimizeData <- na.omit(projections[,c("name","pos","projections","risk","inflatedCost","sdPts")]) #projectedPtsLatent
optimizeData
?rnorm
?sapply
sapply(ptimizeData$oprojections, function(x) rnorm(n=1, mean=x, sd=ptimizeData$sdPts))
sapply(optimizeData$oprojections, function(x) rnorm(n=1, mean=x, sd=optimizeData$sdPts))
sapply(optimizeData$projections, function(x) rnorm(n=1, mean=x, sd=optimizeData$sdPts))
optimizeData$projections
optimizeData
?mapply
mapply(function(x) rnorm(n=1, mean=x, sd=optimizeData$sdPts), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=optimizeData$sdPts), x=optimizeData$projections, y=optimizeData$sdPts)
sapply(optimizeData$projections, function(x) rnorm(n=1, mean=x, sd=optimizeData$sdPts))
sapply(crData$Block, function(x) max(0, x-5))
mapply(function(x,y) rnorm(n=1, mean=x, sd=optimizeData$sdPts), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=optimizeData$sdPts), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=optimizeData$sdPts), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=optimizeData$sdPts), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=optimizeData$sdPts), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=optimizeData$sdPts), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=optimizeData$sdPts), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=optimizeData$sdPts), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=optimizeData$sdPts), x=optimizeData$projections, y=optimizeData$sdPts)
optimizeData
mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
for (i in 1:10){
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
optimizeTeam(maxRisk=100)
}
for (i in 1:10){
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
return(optimizeTeam(maxRisk=100))
}
for (i in 1:10){
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
print(optimizeTeam(maxRisk=100))
}
for (i in 1:10){
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
print(optimizeTeam(points=optimizeData$simPts, maxRisk=100))
}
for (i in 1:10){
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
#print(optimizeTeam(points=optimizeData$simPts, maxRisk=100))
solutionList[[i]] <- optimizeTeam(points=optimizeData$simPts, maxRisk=100)$solution
}
solutionList <- list()
for (i in 1:10){
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
#print(optimizeTeam(points=optimizeData$simPts, maxRisk=100))
solutionList[[i]] <- optimizeTeam(points=optimizeData$simPts, maxRisk=100)$solution
}
solutionList
solutionList <- data.frame()
solutionList <- data.frame()
for (i in 1:10){
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
#print(optimizeTeam(points=optimizeData$simPts, maxRisk=100))
solutionList[,i] <- optimizeTeam(points=optimizeData$simPts, maxRisk=100)$solution
}
?data.frame
solutionList <- matrix()
solutionList <- matrix()
for (i in 1:10){
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
#print(optimizeTeam(points=optimizeData$simPts, maxRisk=100))
solutionList[,i] <- optimizeTeam(points=optimizeData$simPts, maxRisk=100)$solution
}
i
solutionList[,i]
?matrix
dim(optimizeData)
iterations <- 10
solutionList <- matrix(nrow=dim(optimizeData)[1], ncol=iterations)
solutionList
for (i in 1:10){
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
#print(optimizeTeam(points=optimizeData$simPts, maxRisk=100))
solutionList[,i] <- optimizeTeam(points=optimizeData$simPts, maxRisk=100)$solution
}
solutionList
?rowSum
?rowSums
rowSums(solutionList)
solutionSum <- rowSums(solutionList)
optimizeData$solutionSum <- solutionSum
optimizeData
iterations <- 100
solutionList <- matrix(nrow=dim(optimizeData)[1], ncol=iterations)
for (i in 1:iterations){
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
#print(optimizeTeam(points=optimizeData$simPts, maxRisk=100))
solutionList[,i] <- optimizeTeam(points=optimizeData$simPts, maxRisk=100)$solution
}
solutionSum <- rowSums(solutionList)
optimizeData$solutionSum <- solutionSum
optimizeData
iterations <- 1000
solutionList <- matrix(nrow=dim(optimizeData)[1], ncol=iterations)
pb <- txtProgressBar(min = 0, max = iterations, style = 3)
for (i in 1:iterations){
setTxtProgressBar(pb, i)
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
solutionList[,i] <- optimizeTeam(points=optimizeData$simPts, maxRisk=100)$solution
}
solutionSum <- rowSums(solutionList)
optimizeData$solutionSum <- solutionSum
optimizeData
solutionList <- matrix(nrow=dim(optimizeData)[1], ncol=iterations)
solutionList
iterations <- 10000
solutionList <- matrix(nrow=dim(optimizeData)[1], ncol=iterations)
pb <- txtProgressBar(min = 0, max = iterations, style = 3)
for (i in 1:iterations){
setTxtProgressBar(pb, i)
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
solutionList[,i] <- optimizeTeam(points=optimizeData$simPts, maxRisk=100)$solution
}
solutionSum <- rowSums(solutionList)
optimizeData$solutionSum <- solutionSum
optimizeData
optimizeData[order(optimizeData$solutionSum),]
?order
?order
optimizeData <- optimizeData[order(-optimizeData$solutionSum),]
optimizeData
maxCost
optimizeData
head(optimizeData[which(optimizeData$pos == "QB"),])
head(optimizeData[which(optimizeData$pos == "QB"),])
#Top RBs
head(optimizeData[which(optimizeData$pos == "RB"),])
#Top WRs
head(optimizeData[which(optimizeData$pos == "WR"),])
#Top TEs
head(optimizeData[which(optimizeData$pos == "TE"),])
head(optimizeData[which(optimizeData$pos == "QB" & optimizeData$risk < 5),])
#Top QBs
head(optimizeData[which(optimizeData$pos == "QB"),])
head(optimizeData[which(optimizeData$pos == "QB" & optimizeData$risk < 5),])
#Top RBs
head(optimizeData[which(optimizeData$pos == "RB"),])
head(optimizeData[which(optimizeData$pos == "RB" & optimizeData$risk < 5),])
#Top WRs
head(optimizeData[which(optimizeData$pos == "WR"),])
head(optimizeData[which(optimizeData$pos == "WR" & optimizeData$risk < 5),])
#Top TEs
head(optimizeData[which(optimizeData$pos == "WR"),])
head(optimizeData[which(optimizeData$pos == "WR" & optimizeData$risk < 5),])
#Top QBs
head(optimizeData[which(optimizeData$pos == "QB"),])
head(optimizeData[which(optimizeData$pos == "QB" & optimizeData$risk < 5),])
#Top RBs
head(optimizeData[which(optimizeData$pos == "RB"),])
head(optimizeData[which(optimizeData$pos == "RB" & optimizeData$risk < 5),])
#Top WRs
head(optimizeData[which(optimizeData$pos == "WR"),])
head(optimizeData[which(optimizeData$pos == "WR" & optimizeData$risk < 5),])
#Top TEs
head(optimizeData[which(optimizeData$pos == "TE"),])
head(optimizeData[which(optimizeData$pos == "TE" & optimizeData$risk < 5),])
optimizeData <- optimizeData[order(-optimizeData$solutionSum),c("name","pos","projections","risk","inflatedCost","sdPts","solutionSum")]
optimizeData
#Top QBs
head(optimizeData[which(optimizeData$pos == "QB"),])
head(optimizeData[which(optimizeData$pos == "QB" & optimizeData$risk < 5),])
#Top RBs
head(optimizeData[which(optimizeData$pos == "RB"),])
head(optimizeData[which(optimizeData$pos == "RB" & optimizeData$risk < 5),])
#Top WRs
head(optimizeData[which(optimizeData$pos == "WR"),])
head(optimizeData[which(optimizeData$pos == "WR" & optimizeData$risk < 5),])
#Top TEs
head(optimizeData[which(optimizeData$pos == "TE"),])
head(optimizeData[which(optimizeData$pos == "TE" & optimizeData$risk < 5),])
iterations <- 100000
solutionList <- matrix(nrow=dim(optimizeData)[1], ncol=iterations)
pb <- txtProgressBar(min = 0, max = iterations, style = 3)
for (i in 1:iterations){
setTxtProgressBar(pb, i)
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
solutionList[,i] <- optimizeTeam(points=optimizeData$simPts, maxRisk=100)$solution
}
solutionSum <- rowSums(solutionList)
optimizeData$solutionSum <- solutionSum
optimizeData <- optimizeData[order(-optimizeData$solutionSum),c("name","pos","projections","risk","inflatedCost","sdPts","solutionSum")]
#View Data
optimizeData
head(optimizeData[which(optimizeData$pos == "QB"),])
actualPoints <- read.csv(paste(getwd(),"/Data/Yahoo-actualpoints-2012.csv", sep=""))
actualPoints
load(paste(getwd(),"/Data/projectedWithActualPoints-2012.RData", sep=""))
projectedWithActualPts
projectedWithActualPts[projectedWithActualPts$name="Shonn Greene",]
projectedWithActualPts[projectedWithActualPts$name=="Shonn Greene",]
head(optimizeData[which(optimizeData$pos == "RB"),])
head(optimizeData[which(optimizeData$pos == "RB" & optimizeData$risk < 5),])
projectedWithActualPts[projectedWithActualPts$name == "Ray Rice",]
projectedWithActualPts[projectedWithActualPts$name == "Steven Jackson",]
projectedWithActualPts[projectedWithActualPts$name == "DeMarco Murray",]
projectedWithActualPts[projectedWithActualPts$name == "Darren McFadden",]
#Top QBs
head(optimizeData[which(optimizeData$pos == "QB"),])
head(optimizeData[which(optimizeData$pos == "QB" & optimizeData$risk < 5),])
#Top RBs
head(optimizeData[which(optimizeData$pos == "RB"),])
head(optimizeData[which(optimizeData$pos == "RB" & optimizeData$risk < 5),])
#Top WRs
head(optimizeData[which(optimizeData$pos == "WR"),])
head(optimizeData[which(optimizeData$pos == "WR" & optimizeData$risk < 5),])
#Top TEs
head(optimizeData[which(optimizeData$pos == "TE"),])
head(optimizeData[which(optimizeData$pos == "TE" & optimizeData$risk < 5),])
projectedWithActualPts[projectedWithActualPts$name == "Jermaine Gresham",]
optimizeData
keepPlayers <- c("Aaron Rodgers", "Matt Ryan", "Cam Newton", "Tom Brady",
"Arian Foster", "Ahmad Bradshaw", "Shonn Greene", "Ray Rice", "Steven Jackson",
"DeMarco Murray","Darren McFadden", "Doug Martin",
"Calvin Johnson", "Vincent Jackson", "Reggie Wayne", "Marques Colston",
"Eric Decker","Jordy Nelson",
"Jimmy Graham", "Rob Gronkowski", "Dustin Keller", "Jason Witten", "Jermaine Gresham")
optimizeData$name %in% keepPlayers
optimizeDataSubset <- optimizeData[optimizeData$name %in% keepPlayers,]
optimizeDataSubset
#Re-analyze on subset
iterations <- 10000
solutionList <- matrix(nrow=dim(optimizeData)[1], ncol=iterations)
pb <- txtProgressBar(min = 0, max = iterations, style = 3)
for (i in 1:iterations){
setTxtProgressBar(pb, i)
optimizeDataSubset$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeDataSubset$projections, y=optimizeDataSubset$sdPts)
solutionList[,i] <- optimizeTeam(points=optimizeDataSubset$simPts, playerCost=optimizeDataSubset$inflatedCost, maxRisk=100)$solution
}
i
optimizeTeam(points=optimizeDataSubset$simPts, playerCost=optimizeDataSubset$inflatedCost, maxRisk=100)
optimizeDataSubset$simPts
optimizeDataSubset$inflatedCost
optimizeDataSubset
solutionList
optimizeTeam(points=optimizeDataSubset$simPts, playerCost=optimizeDataSubset$inflatedCost, maxRisk=100)
#Subset Data Frame
keepPlayers <- c("Aaron Rodgers", "Matt Ryan", "Cam Newton", "Tom Brady",
"Arian Foster", "Ahmad Bradshaw", "Shonn Greene", "Ray Rice", "Steven Jackson",
"DeMarco Murray","Darren McFadden", "Doug Martin",
"Calvin Johnson", "Vincent Jackson", "Reggie Wayne", "Marques Colston",
"Eric Decker","Jordy Nelson",
"Jimmy Graham", "Rob Gronkowski", "Dustin Keller", "Jason Witten", "Jermaine Gresham")
optimizeData <- optimizeData[optimizeData$name %in% keepPlayers,]
optimizeData
#Re-analyze on subset
iterations <- 10000
solutionList <- matrix(nrow=dim(optimizeData)[1], ncol=iterations)
pb <- txtProgressBar(min = 0, max = iterations, style = 3)
for (i in 1:iterations){
setTxtProgressBar(pb, i)
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
solutionList[,i] <- optimizeTeam(points=optimizeData$simPts, maxRisk=100)$solution
}
solutionSum2 <- rowSums(solutionList)
optimizeData$solutionSum2 <- solutionSum2
optimizeData <- optimizeData[order(-optimizeData$solutionSum),c("name","pos","projections","risk","inflatedCost","sdPts","solutionSum","solutionSum2")]
#View Data
solutionSum2 <- rowSums(solutionList)
optimizeData$solutionSum2 <- solutionSum2
optimizeData <- optimizeData[order(-optimizeData$solutionSum),c("name","pos","projections","risk","inflatedCost","sdPts","solutionSum","solutionSum2")]
#View Data
optimizeData
load(paste(getwd(),"/Data/AvgCost-2012.RData", sep=""))
load(paste(getwd(),"/Data/projectedWithActualPoints-2012.RData", sep=""))
#Roster Optimization
optimizeData <- na.omit(projections[,c("name","pos","projections","risk","inflatedCost","sdPts")])
maxCost <- leagueCap - (numTotalPlayers - numTotalStarters)
optimizeData
solutionList <- matrix(nrow=dim(optimizeData)[1], ncol=iterations)
pb <- txtProgressBar(min = 0, max = iterations, style = 3)
for (i in 1:iterations){
setTxtProgressBar(pb, i)
optimizeData$simPts <- mapply(function(x,y) rnorm(n=1, mean=x, sd=y), x=optimizeData$projections, y=optimizeData$sdPts)
solutionList[,i] <- optimizeTeam(points=optimizeData$simPts, maxRisk=100)$solution
}
optimizeTeam(points=optimizeData$solutionSum, maxRisk=100)$solution
optimizeTeam(maxRisk=100)$solution
optimizeTeam(points=optimizeData$solutionSum, maxRisk=100)
optimizeTeam(maxRisk=100)
optimizeTeam(points=optimizeData$solutionSum, maxRisk=100)
points=optimizeData$solutionSum
points
solutionSum <- rowSums(solutionList)
optimizeData$solutionSum <- solutionSum
optimizeData <- optimizeData[order(-optimizeData$solutionSum),c("name","pos","projections","risk","inflatedCost","sdPts","solutionSum")]
optimizeData
optimizeTeam(points=optimizeData$solutionSum, maxRisk=100)
optimizeData
optimizeTeam(points=optimizeData$solutionSum, maxRisk=100)$players #pts:
optimizeData[optimizeData$name %in% optimizeTeam(points=optimizeData$solutionSum, maxRisk=100)$players,"projections"]
sum(optimizeData[optimizeData$name %in% optimizeTeam(points=optimizeData$solutionSum, maxRisk=100)$players,"projections"])
optimizeTeam(points=optimizeData$solutionSum, maxRisk=100)
optimizeTeam(points=optimizeData$solutionSum, maxRisk=5.0)
sum(optimizeData[optimizeData$name %in% optimizeTeam(points=optimizeData$solutionSum, maxRisk=5.0)$players,"projections"]) #pts: 1593
optimizeTeam(points=optimizeData$solutionSum, maxRisk=3.8)
sum(optimizeData[optimizeData$name %in% optimizeTeam(points=optimizeData$solutionSum, maxRisk=3.8)$players,"projections"]) #pts: 1567
projectedPoints <- vector(mode="numeric", length=length(seq(min(optimizeData$risk), max(optimizeData$risk), 0.1)))
projectedPoints
riskLevel <- vector(mode="numeric", length=length(seq(min(optimizeData$risk), max(optimizeData$risk), 0.1)))
riskLevel
j <- 1
pb <- txtProgressBar(min = 0, max = max(optimizeData$risk), style = 3)
projectedPoints <- vector(mode="numeric", length=length(seq(min(optimizeData$risk), max(optimizeData$risk), 0.1)))
riskLevel <- vector(mode="numeric", length=length(seq(min(optimizeData$risk), max(optimizeData$risk), 0.1)))
j <- 1
pb <- txtProgressBar(min = 0, max = max(optimizeData$risk), style = 3)
for (i in seq(0, max(optimizeData$risk), 0.1)){
setTxtProgressBar(pb, i)
#projectedPoints[j] <- optimizeTeam(maxRisk=i)$optimum
projectedPoints[j] <- sum(optimizeData[optimizeData$name %in% optimizeTeam(points=optimizeData$solutionSum, maxRisk=i)$players,"projections"])
riskLevel[j] <- i
j <- j+1
}
riskData <- as.data.frame(cbind(riskLevel,projectedPoints))
riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
seq(0, max(optimizeData$risk), 0.1)
riskData
riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
riskTable <- riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
riskTable[order(riskTable$projectedPoints)]
riskTable <- riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
riskTable[order(riskTable$projectedPoints)]
riskTable$projectedPoints
riskTable[order(riskTable$projectedPoints),]
optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.9) #optimal
projectedWithActualPts[projectedWithActualPts$name == "Reggie Wayne",]
optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.9)
sum(optimizeData[optimizeData$name %in% optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.9)$players,"projections"]) #pts: 1567
optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.9)$players,"projections"]
optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.9)$players,"projections"
optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.9)$players
projectedWithActualPts[projectedWithActualPts$name %in% optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.9)$players,] #actual points from last year
projectedWithActualPts[projectedWithActualPts$name %in% optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.9)$players, "actualPts"] #actual points from last year
sum(projectedWithActualPts[projectedWithActualPts$name %in% optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.9)$players, "actualPts"]) #actual points from last year
optimizeTeam(maxRisk=4.9)
optimizeTeam(points=optimizeData$solutionSum, maxRisk=6.8)
optimizeTeam(points=optimizeData$solutionSum, maxRisk=3.3)
optimizeTeam(points=optimizeData$solutionSum, maxRisk=3.4)
optimizeTeam(points=optimizeData$solutionSum, maxRisk=3.5)
optimizeTeam(points=optimizeData$solutionSum, maxRisk=3.6)
optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.0)
optimizeTeam(points=optimizeData$solutionSum, maxRisk=4.9) #optimal
optimizeTeam(points=optimizeData$solutionSum, maxRisk=6.8)
optimizeTeam(maxRisk=4.9)
