rushYdsMultiplier <- 1/rushYdsMultiplier
recYdsMultiplier <- 1/recYdsMultiplier
shinyData$passYdsPts <- shinyData$passYds*passYdsMultiplier
shinyData$passTdsPts <- shinyData$passTds*passTdsMultiplier
shinyData$passIntPts <- shinyData$passInt*passIntMultiplier
shinyData$rushYdsPts <- shinyData$rushYds*rushYdsMultiplier
shinyData$rushTdsPts <- shinyData$rushTds*rushTdsMultiplier
shinyData$recPts <- shinyData$rec*recMultiplier
shinyData$recYdsPts <- shinyData$recYds*recYdsMultiplier
shinyData$recTdsPts <- shinyData$recTds*recTdsMultiplier
#shinyData$twoPtsPts <- shinyData$twoPts*twoPtsMultiplier
shinyData$fumblesPts <- shinyData$fumbles*fumbleMulitplier
shinyData$projectedPts <- rowSums(shinyData[,c("passYdsPts","passTdsPts","passIntPts","rushYdsPts","rushTdsPts","recPts","recYdsPts","recTdsPts","fumblesPts")], na.rm=T) #,"twoPtsPts"
#merge(projections[,c("name","projections")], shinyData[,c("name","projectedPts")], by="name", all=TRUE)
num.players <- length(shinyData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(shinyData$pos == "QB"),
as.numeric(shinyData$pos == "QB"),
as.numeric(shinyData$pos == "RB"),
as.numeric(shinyData$pos == "RB"),
as.numeric(shinyData$pos == "WR"),
as.numeric(shinyData$pos == "WR"),
as.numeric(shinyData$pos == "TE"),
as.numeric(shinyData$pos == "TE"),
diag(shinyData$risk),                 # player's risk
shinyData$projectedCost,              # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c(">=",
"<=",
">=",
"<=",
">=",
"<=",
">=",
"<=",
rep("<=", num.players),
"<=",
"==")
b <- c(minQBs,
maxQBs,
minRBs,
maxRBs,
minWRs,
maxWRs,
minTEs,
maxTEs,
rep(maxRisk, num.players),
maxAvailable,
numStarters)
sol <- Rglpk_solve_LP(obj = shinyData$projectedPts, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(merge(shinyData[shinyData$name %in% shinyData[sol$solution == 1,"name"],c("name","pos","team")], shinyData[sol$solution == 1,c("name","projectedPts","risk","projectedCost")], by="name"))
sol$playerInfo[,"projectedCost"] <- as.integer(sol$playerInfo[,"projectedCost"])
sol$totalCost <- sum(shinyData$projectedCost * sol$solution)
#sol$totalCost <- sum(sol$playerInfo$cost)
sol$players <- as.character(shinyData$name[sol$solution == 1])
sol
### Calculations
#Default inputs
leagueCap <-225 #200
numTotalPlayers <- 20
passYdsMultiplier <- 25
passTdsMultiplier <- 4
passIntMultiplier <- -3 #-2
rushYdsMultiplier <- 10
rushTdsMultiplier <- 6
recMultiplier <- 0
recYdsMultiplier <- 8 #10
recTdsMultiplier <- 6
#twoPtsMultiplier <- 2
fumbleMulitplier <- -3 #-2
maxRisk <- 5
numQBs <- 1
numRBs <- 2
numWRs <- 2
numTEs <- 1
numWRTEs <- 0
numWRRBs <- 0
numWRRBTEs <- 1
numQBWRRBTEs <- 0
#Apply 10% price premium to 33 players with highest projected points, apply 10% price premium for players lower than rank 66
shinyData$projectedCost[shinyData$overallRank <= 33] <- ceiling(shinyData$cost[shinyData$overallRank <= 33] * (leagueCap/200) * 1.1)
shinyData$projectedCost[shinyData$overallRank >= 34 & shinyData$overallRank <= 66] <- ceiling(shinyData$cost[shinyData$overallRank >= 34 & shinyData$overallRank <= 66] * (leagueCap/200) * 1.0)
shinyData$projectedCost[shinyData$overallRank >= 67] <- ceiling(shinyData$cost[shinyData$overallRank >= 67] * (leagueCap/200) * 0.9)
shinyData$projectedCost[is.na(shinyData$projectedCost)==TRUE] <- 1
shinyData$projectedCost[shinyData$projectedCost==0] <- 1
minQBs <- numQBs
maxQBs <- numQBs + numQBWRRBTEs
minRBs <- numRBs
maxRBs <- numRBs + numWRRBs + numWRRBTEs + numQBWRRBTEs
minWRs <- numWRs
maxWRs <- numWRs + numWRTEs + numWRRBs + numWRRBTEs + numQBWRRBTEs
minTEs <- numTEs
maxTEs <- numTEs + numWRTEs + numWRRBTEs + numQBWRRBTEs
numStarters <- numQBs + numRBs + numWRs + numTEs + numWRRBs + numWRTEs + numWRRBTEs + numQBWRRBTEs
maxAvailable <- leagueCap - (numTotalPlayers - numStarters)
passYdsMultiplier <- 1/passYdsMultiplier
rushYdsMultiplier <- 1/rushYdsMultiplier
recYdsMultiplier <- 1/recYdsMultiplier
shinyData$passYdsPts <- shinyData$passYds*passYdsMultiplier
shinyData$passTdsPts <- shinyData$passTds*passTdsMultiplier
shinyData$passIntPts <- shinyData$passInt*passIntMultiplier
shinyData$rushYdsPts <- shinyData$rushYds*rushYdsMultiplier
shinyData$rushTdsPts <- shinyData$rushTds*rushTdsMultiplier
shinyData$recPts <- shinyData$rec*recMultiplier
shinyData$recYdsPts <- shinyData$recYds*recYdsMultiplier
shinyData$recTdsPts <- shinyData$recTds*recTdsMultiplier
#shinyData$twoPtsPts <- shinyData$twoPts*twoPtsMultiplier
shinyData$fumblesPts <- shinyData$fumbles*fumbleMulitplier
shinyData$projectedPts <- rowSums(shinyData[,c("passYdsPts","passTdsPts","passIntPts","rushYdsPts","rushTdsPts","recPts","recYdsPts","recTdsPts","fumblesPts")], na.rm=T) #,"twoPtsPts"
#merge(projections[,c("name","projections")], shinyData[,c("name","projectedPts")], by="name", all=TRUE)
num.players <- length(shinyData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(shinyData$pos == "QB"),
as.numeric(shinyData$pos == "QB"),
as.numeric(shinyData$pos == "RB"),
as.numeric(shinyData$pos == "RB"),
as.numeric(shinyData$pos == "WR"),
as.numeric(shinyData$pos == "WR"),
as.numeric(shinyData$pos == "TE"),
as.numeric(shinyData$pos == "TE"),
diag(shinyData$risk),                 # player's risk
shinyData$projectedCost,              # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c(">=",
"<=",
">=",
"<=",
">=",
"<=",
">=",
"<=",
rep("<=", num.players),
"<=",
"==")
b <- c(minQBs,
maxQBs,
minRBs,
maxRBs,
minWRs,
maxWRs,
minTEs,
maxTEs,
rep(maxRisk, num.players),
maxAvailable,
numStarters)
sol <- Rglpk_solve_LP(obj = shinyData$projectedPts, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(merge(shinyData[shinyData$name %in% shinyData[sol$solution == 1,"name"],c("name","pos","team")], shinyData[sol$solution == 1,c("name","projectedPts","risk","projectedCost")], by="name"))
sol$playerInfo[,"projectedCost"] <- as.integer(sol$playerInfo[,"projectedCost"])
sol$totalCost <- sum(shinyData$projectedCost * sol$solution)
#sol$totalCost <- sum(sol$playerInfo$cost)
sol$players <- as.character(shinyData$name[sol$solution == 1])
sol
getwd()
runApp()
sol
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?downloadLink
runApp()
runApp()
names(projections)
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/Calculate League Projections.R', echo=TRUE)
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/Calculate League Projections.R', echo=TRUE)
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/Evaluate Projections.R', echo=TRUE)
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/Risk.R', echo=TRUE)
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/Value Over Replacement.R', echo=TRUE)
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/Avg Cost.R', echo=TRUE)
maxRisk <- 5.0
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
source(paste(getwd(),"/R Scripts/League Settings.R", sep=""))
#Load data
load(paste(getwd(),"/Data/AvgCost-2013.RData", sep=""))
#Roster Optimization
optimizeData <- na.omit(projections[,c("name","pos","projections","risk","inflatedCost")]) #projectedPtsLatent
optimizeTeam(maxRisk=maxRisk)
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/Shiny.R', echo=TRUE)
names(projections)
### Calculations
#Default inputs
leagueCap <-225 #200
numTotalPlayers <- 20
passYdsMultiplier <- 25
passTdsMultiplier <- 4
passIntMultiplier <- -3 #-2
rushYdsMultiplier <- 10
rushTdsMultiplier <- 6
recMultiplier <- 0
recYdsMultiplier <- 8 #10
recTdsMultiplier <- 6
#twoPtsMultiplier <- 2
fumbleMulitplier <- -3 #-2
maxRisk <- 5
numQBs <- 1
numRBs <- 2
numWRs <- 2
numTEs <- 1
numWRTEs <- 0
numWRRBs <- 0
numWRRBTEs <- 1
numQBWRRBTEs <- 0
#Apply 10% price premium to 33 players with highest projected points, apply 10% price premium for players lower than rank 66
shinyData$projectedCost[shinyData$overallRank <= 33] <- ceiling(shinyData$cost[shinyData$overallRank <= 33] * (leagueCap/200) * 1.1)
shinyData$projectedCost[shinyData$overallRank >= 34 & shinyData$overallRank <= 66] <- ceiling(shinyData$cost[shinyData$overallRank >= 34 & shinyData$overallRank <= 66] * (leagueCap/200) * 1.0)
shinyData$projectedCost[shinyData$overallRank >= 67] <- ceiling(shinyData$cost[shinyData$overallRank >= 67] * (leagueCap/200) * 0.9)
shinyData$projectedCost[is.na(shinyData$projectedCost)==TRUE] <- 1
shinyData$projectedCost[shinyData$projectedCost==0] <- 1
minQBs <- numQBs
maxQBs <- numQBs + numQBWRRBTEs
minRBs <- numRBs
maxRBs <- numRBs + numWRRBs + numWRRBTEs + numQBWRRBTEs
minWRs <- numWRs
maxWRs <- numWRs + numWRTEs + numWRRBs + numWRRBTEs + numQBWRRBTEs
minTEs <- numTEs
maxTEs <- numTEs + numWRTEs + numWRRBTEs + numQBWRRBTEs
numStarters <- numQBs + numRBs + numWRs + numTEs + numWRRBs + numWRTEs + numWRRBTEs + numQBWRRBTEs
maxAvailable <- leagueCap - (numTotalPlayers - numStarters)
passYdsMultiplier <- 1/passYdsMultiplier
rushYdsMultiplier <- 1/rushYdsMultiplier
recYdsMultiplier <- 1/recYdsMultiplier
shinyData$passYdsPts <- shinyData$passYds*passYdsMultiplier
shinyData$passTdsPts <- shinyData$passTds*passTdsMultiplier
shinyData$passIntPts <- shinyData$passInt*passIntMultiplier
shinyData$rushYdsPts <- shinyData$rushYds*rushYdsMultiplier
shinyData$rushTdsPts <- shinyData$rushTds*rushTdsMultiplier
shinyData$recPts <- shinyData$rec*recMultiplier
shinyData$recYdsPts <- shinyData$recYds*recYdsMultiplier
shinyData$recTdsPts <- shinyData$recTds*recTdsMultiplier
#shinyData$twoPtsPts <- shinyData$twoPts*twoPtsMultiplier
shinyData$fumblesPts <- shinyData$fumbles*fumbleMulitplier
shinyData$projectedPts <- rowSums(shinyData[,c("passYdsPts","passTdsPts","passIntPts","rushYdsPts","rushTdsPts","recPts","recYdsPts","recTdsPts","fumblesPts")], na.rm=T) #,"twoPtsPts"
#merge(projections[,c("name","projections")], shinyData[,c("name","projectedPts")], by="name", all=TRUE)
num.players <- length(shinyData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(shinyData$pos == "QB"),
as.numeric(shinyData$pos == "QB"),
as.numeric(shinyData$pos == "RB"),
as.numeric(shinyData$pos == "RB"),
as.numeric(shinyData$pos == "WR"),
as.numeric(shinyData$pos == "WR"),
as.numeric(shinyData$pos == "TE"),
as.numeric(shinyData$pos == "TE"),
diag(shinyData$risk),                 # player's risk
shinyData$projectedCost,              # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c(">=",
"<=",
">=",
"<=",
">=",
"<=",
">=",
"<=",
rep("<=", num.players),
"<=",
"==")
b <- c(minQBs,
maxQBs,
minRBs,
maxRBs,
minWRs,
maxWRs,
minTEs,
maxTEs,
rep(maxRisk, num.players),
maxAvailable,
numStarters)
sol <- Rglpk_solve_LP(obj = shinyData$projectedPts, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(merge(shinyData[shinyData$name %in% shinyData[sol$solution == 1,"name"],c("name","pos","team")], shinyData[sol$solution == 1,c("name","projectedPts","risk","projectedCost")], by="name"))
sol$playerInfo[,"projectedCost"] <- as.integer(sol$playerInfo[,"projectedCost"])
sol$totalCost <- sum(shinyData$projectedCost * sol$solution)
#sol$totalCost <- sum(sol$playerInfo$cost)
sol$players <- as.character(shinyData$name[sol$solution == 1])
sol
names(projections)
projections[,c("name","points","cost")]
names(shinyData)
shinyData[,c("name","points","cost")]
shinyData
shinyData[,c("name","projectedPts","projectedCost")]
sol
shinyData[,c("name","projectedPts","projectedCost")]
leagueCap
### Calculations
#Default inputs
leagueCap <- 225 #200
numTotalPlayers <- 20
passYdsMultiplier <- 25
passTdsMultiplier <- 4
passIntMultiplier <- -3 #-2
rushYdsMultiplier <- 10
rushTdsMultiplier <- 6
recMultiplier <- 0
recYdsMultiplier <- 8 #10
recTdsMultiplier <- 6
#twoPtsMultiplier <- 2
fumbleMulitplier <- -3 #-2
maxRisk <- 5
numQBs <- 1
numRBs <- 2
numWRs <- 2
numTEs <- 1
numWRTEs <- 0
numWRRBs <- 0
numWRRBTEs <- 1
numQBWRRBTEs <- 0
#Calculate Position Rank
shinyData$positionRank[shinyData$pos=="QB"] <- rank(-shinyData$projectedPts[shinyData$pos=="QB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="RB"] <- rank(-shinyData$projectedPts[shinyData$pos=="RB"], ties.method="min")
shinyData$positionRank[shinyData$pos=="WR"] <- rank(-shinyData$projectedPts[shinyData$pos=="WR"], ties.method="min")
shinyData$positionRank[shinyData$pos=="TE"] <- rank(-shinyData$projectedPts[shinyData$pos=="TE"], ties.method="min")
#Calculate Overall Rank
shinyData$overallRank <- rank(-shinyData$projectedPts, ties.method="min")
#Apply 10% price premium to 33 players with highest projected points, apply 10% price premium for players lower than rank 66
shinyData$projectedCost[shinyData$overallRank <= 33] <- ceiling(shinyData$cost[shinyData$overallRank <= 33] * (leagueCap/200) * 1.1)
shinyData$projectedCost[shinyData$overallRank >= 34 & shinyData$overallRank <= 66] <- ceiling(shinyData$cost[shinyData$overallRank >= 34 & shinyData$overallRank <= 66] * (leagueCap/200) * 1.0)
shinyData$projectedCost[shinyData$overallRank >= 67] <- ceiling(shinyData$cost[shinyData$overallRank >= 67] * (leagueCap/200) * 0.9)
shinyData$projectedCost[is.na(shinyData$projectedCost)==TRUE] <- 1
shinyData$projectedCost[shinyData$projectedCost==0] <- 1
minQBs <- numQBs
maxQBs <- numQBs + numQBWRRBTEs
minRBs <- numRBs
maxRBs <- numRBs + numWRRBs + numWRRBTEs + numQBWRRBTEs
minWRs <- numWRs
maxWRs <- numWRs + numWRTEs + numWRRBs + numWRRBTEs + numQBWRRBTEs
minTEs <- numTEs
maxTEs <- numTEs + numWRTEs + numWRRBTEs + numQBWRRBTEs
numStarters <- numQBs + numRBs + numWRs + numTEs + numWRRBs + numWRTEs + numWRRBTEs + numQBWRRBTEs
maxAvailable <- leagueCap - (numTotalPlayers - numStarters)
passYdsMultiplier <- 1/passYdsMultiplier
rushYdsMultiplier <- 1/rushYdsMultiplier
recYdsMultiplier <- 1/recYdsMultiplier
shinyData$passYdsPts <- shinyData$passYds*passYdsMultiplier
shinyData$passTdsPts <- shinyData$passTds*passTdsMultiplier
shinyData$passIntPts <- shinyData$passInt*passIntMultiplier
shinyData$rushYdsPts <- shinyData$rushYds*rushYdsMultiplier
shinyData$rushTdsPts <- shinyData$rushTds*rushTdsMultiplier
shinyData$recPts <- shinyData$rec*recMultiplier
shinyData$recYdsPts <- shinyData$recYds*recYdsMultiplier
shinyData$recTdsPts <- shinyData$recTds*recTdsMultiplier
#shinyData$twoPtsPts <- shinyData$twoPts*twoPtsMultiplier
shinyData$fumblesPts <- shinyData$fumbles*fumbleMulitplier
shinyData$projectedPts <- rowSums(shinyData[,c("passYdsPts","passTdsPts","passIntPts","rushYdsPts","rushTdsPts","recPts","recYdsPts","recTdsPts","fumblesPts")], na.rm=T) #,"twoPtsPts"
#merge(projections[,c("name","projections")], shinyData[,c("name","projectedPts")], by="name", all=TRUE)
num.players <- length(shinyData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(shinyData$pos == "QB"),
as.numeric(shinyData$pos == "QB"),
as.numeric(shinyData$pos == "RB"),
as.numeric(shinyData$pos == "RB"),
as.numeric(shinyData$pos == "WR"),
as.numeric(shinyData$pos == "WR"),
as.numeric(shinyData$pos == "TE"),
as.numeric(shinyData$pos == "TE"),
diag(shinyData$risk),                 # player's risk
shinyData$projectedCost,              # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c(">=",
"<=",
">=",
"<=",
">=",
"<=",
">=",
"<=",
rep("<=", num.players),
"<=",
"==")
b <- c(minQBs,
maxQBs,
minRBs,
maxRBs,
minWRs,
maxWRs,
minTEs,
maxTEs,
rep(maxRisk, num.players),
maxAvailable,
numStarters)
sol <- Rglpk_solve_LP(obj = shinyData$projectedPts, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(merge(shinyData[shinyData$name %in% shinyData[sol$solution == 1,"name"],c("name","pos","team")], shinyData[sol$solution == 1,c("name","projectedPts","risk","projectedCost")], by="name"))
sol$playerInfo[,"projectedCost"] <- as.integer(sol$playerInfo[,"projectedCost"])
sol$totalCost <- sum(shinyData$projectedCost * sol$solution)
#sol$totalCost <- sum(sol$playerInfo$cost)
sol$players <- as.character(shinyData$name[sol$solution == 1])
sol
runApp()
library(shiny)
runApp()
runApp("~/shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
as.numeric(shinyData$pos == "QB")
diag(shinyData$risk)
minQBs <- numQBs
maxQBs <- numQBs + numQBWRRBTEs
minRBs <- numRBs
maxRBs <- numRBs + numWRRBs + numWRRBTEs + numQBWRRBTEs
minWRs <- numWRs
maxWRs <- numWRs + numWRTEs + numWRRBs + numWRRBTEs + numQBWRRBTEs
minTEs <- numTEs
maxTEs <- numTEs + numWRTEs + numWRRBTEs + numQBWRRBTEs
minQBs
maxQBs
minRBs
maxRBs
minWRs
maxWRs
minTEs
maxTEs
numStarters
maxAvailable
maxRisk
numStarters
shinyData[,c("name","projectedPts","projectedCost")]
test <- read.csv(C:/Users/Isaac/Desktop/projections.csv)
test <- read.csv("C:/Users/Isaac/Desktop/projections.csv")
names(test)
identical(test$name, shinyData$name)
all.equal(test$name, shinyData$name)
duplicated(test$name, shinyData$name)
?duplicated
test$name == shinyDataname
test$name == shinyData$name
identical(test$name, shinyData$name)
test$name == shinyData$name
which(test$name == shinyData$name)
which(test$name == shinyData$name == FALSE)
which((test$name == shinyData$name == FALSE) == FALSE))
(test$name == shinyData$name == FALSE) == FALSE)
(test$name == shinyData$name == FALSE)[0]
test$name == shinyData$name
table(test$name == shinyData$name)
table(test$projectedPts == shinyData$projectedPts)
table(test$projectedCost == shinyData$projectedCost)
test$projectedPts == shinyData$projectedPts
test$projectedPts == shinyData$projectedPts
shinyData$projectedPts
test$projectedPts
runApp("./shinyapp")
runApp("./shinyapp")
sol
sol
library("shiny")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
sort(shinyData$name)
shinyData <- read.csv("./shinyData.csv")
?sort
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
as.vector(c(as.vector(input$yourDrafted), as.vector(input$otherDrafted)))
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
runApp("./shinyapp")
library(fortunes)
load_or_install("fortunes")
fortune("nls")
library("shiny")
runApp("./shinyapp")
load_or_install("lme4")
load_or_install("lme4")
pitch.dat <- read.csv('http://www2.ntupsychology.net/seriousstats/pitch.csv')
head(pitch.dat)
library(lme4)
pitch.me <- lmer(pitch ~ base + attract + (1|Face) + (1|Participant), data=pitch.dat)
pitch.me
load_or_install(c("lme4","pbkrtest"))
load_or_install(c("lme4","pbkrtest"))
pitch.red <- lmer(pitch ~ base + (1|Face) + (1|Participant), data=pitch.dat)
KRmodcomp(pitch.me, pitch.red)
pitch.mcmc <- mcmcsamp(pitch.me, n = 25000)
pitch.mcmc
xyplot(pitch.mcmc)
HPDinterval(pitch.mcmc)
?MCMCglmm
load_or_install(c("lme4","pbkrtest","MCMCglmm"))
load_or_install(c("lme4","pbkrtest","MCMCglmm"))
m2 <- MCMCglmm(pitch ~ base + attract, random = ~ Face + Participant, data=pitch.dat, verbose=F)
summary(m2)
m2 <- MCMCglmm(pitch ~ base + attract, random = ~ Face + Participant, data=pitch.dat, verbose=TRUE)
?MCMCglmm
m2 <- MCMCglmm(pitch ~ base + attract, random = ~ Face + Participant, data=pitch.dat, family = "gaussian", nitt=25000)
summary(m2)
pitch.mcmc <- mcmcsamp(pitch.me, n = 50000)
xyplot(pitch.mcmc)
HPDinterval(pitch.mcmc)
HPDinterval(as.mcmc(as.matrix(pitch)))
HPDinterval(as.mcmc(as.matrix(pitch.mcmc)))
HPDinterval(as.mcmc(as.matrix(pitch.mcmc)))
m2 <- MCMCglmm(pitch ~ base + attract, random = ~ Face + Participant, data=pitch.dat, family = "gaussian", nitt=50000)
summary(m2)
HPDinterval(as.mcmc(as.matrix(pitch.mcmc)))
summary(m2)
plot(m2)
