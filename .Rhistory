numTEsToDraft
numTotalStarters
sum(numQBsToDraft)
sum(myteam$pos == "QB")
sum(myteam$pos)
length(myteam$pos)
numToDraft <- numTotalStarters - length(myteam$pos)
numToDraft
sum(myteam$cost)
myteam$cost
remainingCost <- maxCost - sum(myteam$cost)
remainingCost
optimizeDraft <- function(points=removedPlayers$projectedPtsLatent, playerCost=removedPlayers$inflatedCost, maxRisk=maxRisk, omit=NULL, team=myteam){ #can change points, cost, or risk
#Omit players that have already been drafted
if (length(omit) > 0){
for(i in 1:length(omit)){
removedPlayers <- removedPlayers[-which(removedPlayers$name==omit[i]),]
}
} else {}
#Calculate how many players to draft at each position
numQBsToDraft <- numQBstarters - sum(myteam$pos == "QB")
numRBsToDraft <- numRBstarters - sum(myteam$pos == "RB")
numWRsToDraft <- numWRstarters - sum(myteam$pos == "WR")
numTEsToDraft <- numTEstarters - sum(myteam$pos == "TE")
numToDraft <- numTotalStarters - length(myteam$pos)
#Calculate remaining cost
remainingCost <- maxCost - sum(myteam$cost)
#Set up matrices
num.players <- length(removedPlayers$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(removedPlayers$pos == "QB"), # num QB
as.numeric(removedPlayers$pos == "RB"), # num RB
as.numeric(removedPlayers$pos == "WR"), # num WR
as.numeric(removedPlayers$pos == "TE"), # num TE
diag(removedPlayers$risk),              # player's risk
playerCost,                             # total cost
rep(1,num.players))                     # num of players in starting lineup
dir <- c("==",
">=",
">=",
">=",
rep("<=", num.players),
"<=",
"==")
b <- c(numQBstarters,
numRBstarters,
numWRstarters,
numTEstarters,
rep(maxRisk, num.players),
remainingCost,
numToDraft)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(cbind(removedPlayers[sol$solution == 1,"name"],round(points[sol$solution == 1],2),round(removedPlayers[sol$solution == 1,"risk"],2),removedPlayers[sol$solution == 1,"avgCost"],playerCost[sol$solution == 1],removedPlayers[sol$solution == 1,"bidUpTo"]))
names(sol$playerInfo) <- c("name","points","risk","avgCost","inflatedCost","bidUpTo")
sol$totalCost <- sum(removedPlayers$inflatedCost * sol$solution)
sol$players <- removedPlayers$name[sol$solution == 1]
return(sol)
}
myteam <- data.frame(
player = c("Arian Foster", "Tom Brady"),
pos = c("RB", "QB"),
cost = c(64, 46)
)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"Aaron Rodgers","Steven Jackson")
optimizeDraft(maxRisk=3.5)
optimizeDraft(maxRisk=3.5, omit=drafted)
myteam
points=removedPlayers$projectedPtsLatent
playerCost=removedPlayers$inflatedCost
maxRisk=maxRisk
omit=NULL
team=myteam
#Omit players that have already been drafted
if (length(omit) > 0){
for(i in 1:length(omit)){
removedPlayers <- removedPlayers[-which(removedPlayers$name==omit[i]),]
}
} else {}
#Calculate how many players to draft at each position
numQBsToDraft <- numQBstarters - sum(myteam$pos == "QB")
numRBsToDraft <- numRBstarters - sum(myteam$pos == "RB")
numWRsToDraft <- numWRstarters - sum(myteam$pos == "WR")
numTEsToDraft <- numTEstarters - sum(myteam$pos == "TE")
numToDraft <- numTotalStarters - length(myteam$pos)
#Calculate remaining cost
remainingCost <- maxCost - sum(myteam$cost)
source('~/.active-rstudio-document', echo=TRUE)
optimizeDraft(maxRisk=3.5, omit=drafted)
myteam <- data.frame(
player = c("Arian Foster", "Tom Brady", "Jacob Tamme"),
pos = c("RB", "QB", "TE"),
cost = c(64, 46, 5)
)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"Aaron Rodgers","Steven Jackson")
optimizeDraft(maxRisk=3.5, omit=drafted)
draftData[!(draftData$name %in% drafted),]
optimizeDraft(maxRisk=3.5, omit=drafted)
myteam <- data.frame(
player = c()
position = c()
cost = c()
)
myteam <- data.frame(
player = c(),
position = c(),
cost = c()
)
myteam$player <- as.character(myteam$player)
myteam
drafted <- c(myteam$player,"")
optimizeDraft(maxRisk=3.5,omit=drafted)
optimizeDraft(maxRisk=3.5, omit=drafted)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"Aaron Rodgers","Steven Jackson")
optimizeDraft(maxRisk=3.5, omit=drafted)
myteam <- data.frame(
player = c(),
position = c(),
cost = c()
)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"Aaron Rodgers")
drafted <- c(myteam$player,"")
drafted
drafted <- c(myteam$player,"Aaron Rodgers")
###----------###
optimizeDraft(maxRisk=3.5,omit=drafted)
omit
optimizeDraft(maxRisk=3.5,omit=drafted)
drafted <- c(myteam$player,"")
drafted
length(drafted)
length(omit)
points=removedPlayers$projectedPtsLatent
playerCost=removedPlayers$inflatedCost
traceback()
maxRisk=maxRisk
omit=drafted
omit
team=myteam
if (length(omit) > 0){
for(i in 1:length(omit)){
removedPlayers <- removedPlayers[-which(removedPlayers$name==omit[i]),]
}
} else {}
#Calculate how many players to draft at each position
numQBsToDraft <- numQBstarters - sum(myteam$pos == "QB")
numRBsToDraft <- numRBstarters - sum(myteam$pos == "RB")
numWRsToDraft <- numWRstarters - sum(myteam$pos == "WR")
numTEsToDraft <- numTEstarters - sum(myteam$pos == "TE")
numToDraft <- numTotalStarters - length(myteam$pos)
#Calculate remaining cost
remainingCost <- maxCost - sum(myteam$cost)
#Set up matrices
num.players <- length(removedPlayers$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(removedPlayers$pos == "QB"), # num QB
as.numeric(removedPlayers$pos == "RB"), # num RB
as.numeric(removedPlayers$pos == "WR"), # num WR
as.numeric(removedPlayers$pos == "TE"), # num TE
diag(removedPlayers$risk),              # player's risk
playerCost,                             # total cost
rep(1,num.players))                     # num of players in starting lineup
numQBsToDraft
numRBsToDraft
numWRsToDraft
numTEsToDraft
numToDraft
remainingCost
num.players <- length(removedPlayers$name)
num.players
removedPlayers$name
removedPlayers <-  draftData[row.names(na.omit(draftData[,c("projectedPtsLatent","risk","inflatedCost")])),]
row.names(removedPlayers) <- 1:dim(removedPlayers)[1]
removedPlayers
if (length(omit) > 0){
for(i in 1:length(omit)){
removedPlayers <- removedPlayers[-which(removedPlayers$name==omit[i]),]
}
} else {}
removedPlayers
#Day of Draft
removedPlayers <-  draftData[row.names(na.omit(draftData[,c("projectedPtsLatent","risk","inflatedCost")])),]
row.names(removedPlayers) <- 1:dim(removedPlayers)[1]
removedPlayers
length(omit)
omit
length(omit)
i <- 1
which(removedPlayers$name==omit[i])
removedPlayers
removedPlayers[-which(removedPlayers$name==omit[i]),]
which(removedPlayers$name==omit[i])
omit
omit="TEST"
if (length(omit) > 0){
for(i in 1:length(omit)){
removedPlayers <- removedPlayers[-which(removedPlayers$name==omit[i]),]
}
} else {}
removedPlayers
removedPlayers$name %in omit
removedPlayers$name %in% omit
omit="Arian Foster"
removedPlayers$name %in% omit
removedPlayers$name
omit="TEST"
#Day of Draft
removedPlayers <-  draftData[row.names(na.omit(draftData[,c("projectedPtsLatent","risk","inflatedCost")])),]
row.names(removedPlayers) <- 1:dim(removedPlayers)[1]
removedPlayers
removedPlayers$name %in% omit
removedPlayers[-which(removedPlayers$name %in% omit),]
which(removedPlayers$name %in% omit)
removedPlayers
removedPlayers$name %in% omit
removedPlayers[-removedPlayers$name %in% omit,]
removedPlayers[-which(removedPlayers$name %in% omit)==TRUE,]
which(removedPlayers$name %in% omit)==TRUE
which(removedPlayers$name %in% omit == TRUE)
removedPlayers[! removedPlayers$name %in% omit,]
omit="TEST"
omit
removedPlayers[! removedPlayers$name %in% omit,]
omit="Tom Brady"
removedPlayers[! removedPlayers$name %in% omit,]
omit=c("Arian Foster")
removedPlayers[! removedPlayers$name %in% omit,]
omit=c("Arian Foster", "Ray Rice", "Test")
removedPlayers[! removedPlayers$name %in% omit,]
source('~/.active-rstudio-document', echo=TRUE)
myteam <- data.frame(
player = c(),
position = c(),
cost = c()
)
myteam$player <- as.character(myteam$player)
drafted <- c(myteam$player,"")
optimizeDraft(maxRisk=3.5,omit=drafted)
(max(optimizeData$risk)+1)
source('~/GitHub/FantasyFootballAnalyticsR/R Scripts/Optimum Roster.R', echo=TRUE)
optimizeData
library("Rglpk")
#Load data
load(paste(getwd(),"/Data/AvgCost-2012.RData", sep=""))
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Optimum Risk
projectedPoints <- vector(mode="numeric", length=length(seq(min(optimizeData$risk), max(optimizeData$risk), 0.1)))
riskLevel <- vector(mode="numeric", length=length(seq(min(optimizeData$risk), max(optimizeData$risk), 0.1)))
j <- 1
pb <- txtProgressBar(min = 0, max = max(optimizeData$risk), style = 3)
for (i in seq(0, max(optimizeData$risk), 0.1)){
setTxtProgressBar(pb, i)
projectedPoints[j] <- optimizeTeam(maxRisk=i)$optimum
riskLevel[j] <- i
j <- j+1
}
riskData <- as.data.frame(cbind(riskLevel,projectedPoints))
riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
optimizeTeam(maxRisk=3.3)
optimizeTeam(maxRisk=3.4)
optimizeTeam(maxRisk=3.5) #optimal
optimizeTeam(maxRisk=3.7)
optimizeTeam(maxRisk=4.6)
riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point(size=3) + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points") # + geom_smooth()
#Library
library("Rglpk")
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Bid Up To
listOfPlayers <- vector(mode="character", length=numTotalStarters)
bidUpTo <- vector(mode="numeric", length=length(optimizeData$name))
newCost <- optimizeData$inflatedCost
(max(optimizeData$risk)+1))$players
(max(optimizeData$risk)+1)
optimizeDraft(maxRisk=3.5,omit=drafted)
draftData[!(draftData$name %in% drafted),]
optimizeDraft(maxRisk=3.5,omit=drafted)
optimizeDraft(maxRisk=3.4,omit=drafted)
optimizeDraft(maxRisk=3.3,omit=drafted)
optimizeDraft(maxRisk=3.2,omit=drafted)
optimizeDraft(maxRisk=2,omit=drafted)
optimizeDraft(maxRisk=2.5,omit=drafted)
optimizeDraft(maxRisk=2.6,omit=drafted)
optimizeDraft(maxRisk=2.7,omit=drafted)
optimizeDraft(maxRisk=2.8,omit=drafted)
optimizeDraft(maxRisk=2.9,omit=drafted)
optimizeDraft(maxRisk=3.0,omit=drafted)
optimizeDraft(maxRisk=3.1,omit=drafted)
optimizeDraft(maxRisk=3.2,omit=drafted)
optimizeDraft(omit=drafted)
optimizeDraft(maxRisk=10,omit=drafted)
optimizeDraft(maxRisk=20,omit=drafted)
riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
test <- riskData
test
test <- riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
test
test$pointsToRiskRatio <- test$projectedPoints / test$riskLevel
test
optimizeTeam(maxRisk=3.2)
optimizeTeam(maxRisk=4.6)
#League settings
numTeams <- 10  #number of teams in league
numQB <- 1      #number of avg QBs in starting lineup
numRB <- 2.5    #number of avg RBs in starting lineup
numWR <- 2.5    #number of avg WRs in starting lineup
numTE <- 1      #number of avg TEs in starting lineup
numTeams
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Load data
load(paste(getwd(),"/Data/Risk-2012.RData", sep=""))
#Calculate Value over Replacement
qb <- projections[projections$pos=="QB",][order(projections[projections$pos=="QB",]$overallRank),]
rb <- projections[projections$pos=="RB",][order(projections[projections$pos=="RB",]$overallRank),]
wr <- projections[projections$pos=="WR",][order(projections[projections$pos=="WR",]$overallRank),]
te <- projections[projections$pos=="TE",][order(projections[projections$pos=="TE",]$overallRank),]
qb$positionRank <- rank(-qb$projectedPtsLatent, ties.method="min")
rb$positionRank <- rank(-rb$projectedPtsLatent, ties.method="min")
wr$positionRank <- rank(-wr$projectedPtsLatent, ties.method="min")
te$positionRank <- rank(-te$projectedPtsLatent, ties.method="min")
qbReplacements <- print(ceiling(numQB*numTeams*1.5))
rbReplacements <- print(ceiling(numRB*numTeams*1.5))
wrReplacements <- print(ceiling(numWR*numTeams*1.5))
teReplacements <- print(ceiling(numTE*numTeams*1.5))
15+38+38+15
numQB*numTeams
numQB*numTeams*1.5
qbReplacements
qbReplacements
rbReplacements
wrReplacements
teReplacements
qbReplacements <- print(ceiling(numQB*numTeams*1.8))
rbReplacements <- print(ceiling(numRB*numTeams*1.2))
wrReplacements <- print(ceiling(numWR*numTeams*1.2))
teReplacements <- print(ceiling(numTE*numTeams*1.5))
qbReplacements <- print(ceiling(numQB*numTeams*2.0))
rbReplacements <- print(ceiling(numRB*numTeams*1.2))
wrReplacements <- print(ceiling(numWR*numTeams*1.2))
teReplacements <- print(ceiling(numTE*numTeams*1.5))
qbReplacements <- print(ceiling(numQB*numTeams*2.0))
rbReplacements <- print(ceiling(numRB*numTeams*1.3))
wrReplacements <- print(ceiling(numWR*numTeams*1.3))
teReplacements <- print(ceiling(numTE*numTeams*1.5))
20+33+33+15
numQB*numTeams
qbReplacements <- print(ceiling(numQB*numTeams*2.0))
rbReplacements <- print(ceiling(numRB*numTeams*1.3))
wrReplacements <- print(ceiling(numWR*numTeams*1.3))
teReplacements <- print(ceiling(numTE*numTeams*1.5))
qbReplacements <- print(ceiling(numQB*numTeams*2.0))
qbReplacements <- print(ceiling(numQB*numTeams*1.9))
qbReplacements <- print(ceiling(numQB*numTeams*1.8))
3
rbReplacements <- print(ceiling(numRB*numTeams*1.3))
wrReplacements <- print(ceiling(numWR*numTeams*1.3))
wrReplacements <- print(ceiling(numWR*numTeams*1.4))
teReplacements <- print(ceiling(numTE*numTeams*1.5))
teReplacements <- print(ceiling(numTE*numTeams*1.3))
qbReplacements <- print(ceiling(numQB*numTeams*1.8))
rbReplacements <- print(ceiling(numRB*numTeams*1.3))
wrReplacements <- print(ceiling(numWR*numTeams*1.4))
teReplacements <- print(ceiling(numTE*numTeams*1.3))
qbReplacements <- print(ceiling(numQB*numTeams*1.8))
rbReplacements <- print(ceiling(numRB*numTeams*1.3))
wrReplacements <- print(ceiling(numWR*numTeams*1.4))
teReplacements <- print(ceiling(numTE*numTeams*1.3))
numQB*numTeams
numQB*numTeams*1.7
qbValue <- 17
rbValue <- 35
wrValue <- 35
teValue <- 13
numQB*numTeams
numRB
numRB*numTeams
numQB*numTeams
numRB*numTeams
numWR*numTeams
numTE*numTeams
qbReplacements <- print(ceiling(numQB*numTeams*1.8))
rbReplacements <- print(ceiling(numRB*numTeams*1.3))
rbReplacements <- print(ceiling(numRB*numTeams*1.4))
wrReplacements <- print(ceiling(numWR*numTeams*1.4))
teReplacements <- print(ceiling(numTE*numTeams*1.3))
#Number of players at each position drafted in Top 100 (adjust for your league)
qbReplacements <- 17
rbReplacements <- 35
wrReplacements <- 35
teReplacements <- 13
#Functions
source(paste(getwd(),"/R Scripts/Functions.R", sep=""))
#Load data
load(paste(getwd(),"/Data/Risk-2012.RData", sep=""))
#Calculate Value over Replacement
qb <- projections[projections$pos=="QB",][order(projections[projections$pos=="QB",]$overallRank),]
rb <- projections[projections$pos=="RB",][order(projections[projections$pos=="RB",]$overallRank),]
wr <- projections[projections$pos=="WR",][order(projections[projections$pos=="WR",]$overallRank),]
te <- projections[projections$pos=="TE",][order(projections[projections$pos=="TE",]$overallRank),]
qb$positionRank <- rank(-qb$projectedPtsLatent, ties.method="min")
rb$positionRank <- rank(-rb$projectedPtsLatent, ties.method="min")
wr$positionRank <- rank(-wr$projectedPtsLatent, ties.method="min")
te$positionRank <- rank(-te$projectedPtsLatent, ties.method="min")
qb
qb
rb
wr
te
qbValueOfReplacement <- print(mean(c(qb$projectedPts[qb$positionRank==qbReplacements],qb$projectedPts[qb$positionRank==(qbReplacements-1)],qb$projectedPts[qb$positionRank==(qbReplacements+1)])))
rbValueOfReplacement <- print(mean(c(rb$projectedPts[rb$positionRank==rbReplacements],rb$projectedPts[rb$positionRank==(rbReplacements-1)],rb$projectedPts[rb$positionRank==(rbReplacements+1)])))
wrValueOfReplacement <- print(mean(c(wr$projectedPts[wr$positionRank==wrReplacements],wr$projectedPts[wr$positionRank==(wrReplacements-1)],wr$projectedPts[wr$positionRank==(wrReplacements+1)])))
qb
qb$projectedPts[qb$positionRank==qbReplacements]
qbValueOfReplacement <- print(mean(c(qb$projectedPtsLatent[qb$positionRank==qbReplacements],qb$projectedPtsLatent[qb$positionRank==(qbReplacements-1)],qb$projectedPtsLatent[qb$positionRank==(qbReplacements+1)])))
qbValueOfReplacement <- print(mean(c(qb$projectedPtsLatent[qb$positionRank==qbReplacements],qb$projectedPtsLatent[qb$positionRank==(qbReplacements-1)],qb$projectedPtsLatent[qb$positionRank==(qbReplacements+1)])))
rbValueOfReplacement <- print(mean(c(rb$projectedPtsLatent[rb$positionRank==rbReplacements],rb$projectedPtsLatent[rb$positionRank==(rbReplacements-1)],rb$projectedPtsLatent[rb$positionRank==(rbReplacements+1)])))
wrValueOfReplacement <- print(mean(c(wr$projectedPtsLatent[wr$positionRank==wrReplacements],wr$projectedPtsLatent[wr$positionRank==(wrReplacements-1)],wr$projectedPtsLatent[wr$positionRank==(wrReplacements+1)])))
teValueOfReplacement <- print(mean(c(te$projectedPtsLatent[te$positionRank==teReplacements],te$projectedPtsLatent[te$positionRank==(teReplacements-1)],te$projectedPtsLatent[te$positionRank==(teReplacements+1)])))
qb
rbValueOfReplacement <- print(mean(c(rb$projectedPtsLatent[rb$positionRank==rbReplacements],rb$projectedPtsLatent[rb$positionRank==(rbReplacements-1)],rb$projectedPtsLatent[rb$positionRank==(rbReplacements+1)])))
rb
wrValueOfReplacement <- print(mean(c(wr$projectedPtsLatent[wr$positionRank==wrReplacements],wr$projectedPtsLatent[wr$positionRank==(wrReplacements-1)],wr$projectedPtsLatent[wr$positionRank==(wrReplacements+1)])))
wr
teValueOfReplacement <- print(mean(c(te$projectedPtsLatent[te$positionRank==teReplacements],te$projectedPtsLatent[te$positionRank==(teReplacements-1)],te$projectedPtsLatent[te$positionRank==(teReplacements+1)])))
te
qbValueOfReplacement <- print(mean(c(qb$projectedPtsLatent[qb$positionRank==qbReplacements],qb$projectedPtsLatent[qb$positionRank==(qbReplacements-1)],qb$projectedPtsLatent[qb$positionRank==(qbReplacements+1)])))
rbValueOfReplacement <- print(mean(c(rb$projectedPtsLatent[rb$positionRank==rbReplacements],rb$projectedPtsLatent[rb$positionRank==(rbReplacements-1)],rb$projectedPtsLatent[rb$positionRank==(rbReplacements+1)])))
wrValueOfReplacement <- print(mean(c(wr$projectedPtsLatent[wr$positionRank==wrReplacements],wr$projectedPtsLatent[wr$positionRank==(wrReplacements-1)],wr$projectedPtsLatent[wr$positionRank==(wrReplacements+1)])))
teValueOfReplacement <- print(mean(c(te$projectedPtsLatent[te$positionRank==teReplacements],te$projectedPtsLatent[te$positionRank==(teReplacements-1)],te$projectedPtsLatent[te$positionRank==(teReplacements+1)])))
qb$vor <- qb$projectedPtsLatent - qbValueOfReplacement
rb$vor <- rb$projectedPtsLatent - rbValueOfReplacement
wr$vor <- wr$projectedPtsLatent - wrValueOfReplacement
te$vor <- te$projectedPtsLatent - teValueOfReplacement
projections <- rbind(qb,rb,wr,te)
#Calculate overall rank by VOR
projections$overallRank <- rank(-projections$vor, ties.method="min")
#Order players by overall rank
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:dim(projections)[1]
projections <- projections[,c("name","pos","team","overallRank","pick","positionRank","projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts","projectedPtsLatent","vor","sdPick","sdPts","risk")]
projections
projections[which(projections$risk <= 5 & projections$vor >= 0),]
projections[which(projections$risk >=5 & projections$vor >= 0),]
ggplot(projections, aes(x=vor, fill=pos)) + geom_density(alpha=.3) + xlab("Player's Value Over Replacement") + ggtitle("Density Plot of Projected VOR from 2012") + theme(legend.title=element_blank())
ggplot(projections[which(projections$vor >= 0),], aes(x=vor, fill=pos)) + geom_density(alpha=.3) + xlab("Player's Value Over Replacement") + ggtitle("Density Plot of Projected VOR from 2012") + theme(legend.title=element_blank())
ggsave(paste(getwd(),"/Figures/VOR-Density 2012.jpg", sep=""))
qplot(pos, vor, data=projections, geom=c("boxplot", "jitter"), fill=pos, main="Value Over Replacement By Position", xlab="", ylab="Value Over Replacement")
qplot(pos, vor, data=projections[which(projections$vor >= 0),], geom=c("boxplot", "jitter"), fill=pos, main="Value Over Replacement By Position", xlab="", ylab="Value Over Replacement")
ggsave(paste(getwd(),"/Figures/VOR-Boxplot 2012.jpg", sep=""))
save(projections, file = paste(getwd(),"/Data/VOR-2012.RData", sep=""))
projections
draftData <- projections[,c("name","pos","team","projectedPtsLatent","vor","sdPick","sdPts","risk","avgCost","inflatedCost")]
draftData <- projections[,c("name","pos","team","projectedPtsLatent","vor","sdPick","sdPts","risk")]
options(digits=2)
draftData
draftData
draftData <- projections[,c("name","pos","team","projectedPtsLatent","vor","sdPick","sdPts","risk")]
options(digits=2)
draftData
options(digits=1)
draftData
draftData
drafted <- c("Arian Foster","Ray Rice")
draftData[!(draftData$name %in% drafted),]
draftData[!(draftData$name %in% drafted),]
options(digits=2)
draftData
drafted <- c("Arian Foster","Ray Rice")
draftData[!(draftData$name %in% drafted),]
drafted <- c("")
projections[!(projections$name %in% drafted),]
draftData[!(draftData$name %in% drafted),]
draftData <- projections[,c("name","pos","team","projectedPtsLatent","vor","sdPick","sdPts","risk")]
draftData
projections
draftData
draftData[!(draftData$name %in% drafted),]
draftData[!(draftData$name %in% drafted) & projections$risk >=5,]
draftData[!(draftData$name %in% drafted) & projections$risk <=5,]
draftData[!(draftData$name %in% drafted) & projections$risk <=5,]
draftData
draftData[!(draftData$name %in% drafted) & projections$risk <=5,]
drafted <- c("Arian Foster","Ray Rice")
draftData[!(draftData$name %in% drafted) & projections$risk <=5,]
draftData[!(draftData$name %in% drafted) & projections$risk <=4,]
!(draftData$name %in% drafted) & projections$risk <=4
!(draftData$name %in% drafted)
projections$risk <=4
draftData <- projections[row.names(na.omit(draftData[,c("projectedPtsLatent","risk")])),]
draftData
draftData <- projections[row.names(na.omit(draftData[,c("projectedPtsLatent","risk")])),c("name","pos","team","projectedPtsLatent","vor","sdPick","sdPts","risk")]
draftData
draftData <- projections[,c("name","pos","team","projectedPtsLatent","vor","sdPick","sdPts","risk")]
draftData
draftData <- projections[row.names(na.omit(draftData[,c("projectedPtsLatent","vor","risk")])),c("name","pos","team","projectedPtsLatent","vor","sdPick","sdPts","risk")]
options(digits=2)
draftData
row.names(draftData) <- 1:dim(draftData)[1]
draftData
drafted <- c("Arian Foster","Ray Rice")
draftData[!(draftData$name %in% drafted),]
draftData[!(draftData$name %in% drafted),]
draftData[!(draftData$name %in% drafted) & projections$risk <=4,]
projections$risk <=4
draftData[!(draftData$name %in% drafted) & draftData$risk <=4,]
draftData[!(draftData$name %in% drafted) & draftData$risk >=7,]
draftData[!(draftData$name %in% drafted) & draftData$risk >=6,]
