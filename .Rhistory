projections <- merge(projections, drafts, by="name", all.x=TRUE)
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:max(as.numeric(row.names(projections)))
#Calculate risk
projections$sdPts <- apply(projections[,c("projectedPts_espn","projectedPts_cbs","projectedPts_nfl")],1,sd)
projections$sdPickZ <- scale(projections$sdPick)
projections$sdPtsZ <- scale(projections$sdPts)
projections$risk <- rowMeans(projections[,c("sdPickZ","sdPtsZ")], na.rm=TRUE)
#Rescale risk with mean~5 and sd~2
projections$risk <- ((projections$risk * 2/(sd(projections$risk, na.rm=TRUE))) + (5-(mean(projections$risk, na.rm=TRUE))))
#Remove duplicate cases
projections[duplicated(projections$name),]
#Drop variables
projections <- projections[,!(names(projections) %in% c("sdPickZ","sdPtsZ"))]
#Density plot
ggplot(projections, aes(x=risk)) + geom_density(fill="red", alpha=.7) + xlab("Player's Risk Level") + ggtitle("Density Plot of Players' Risk Levels")
ggsave(paste(getwd(),"/Figures/Risk.jpg", sep=""))
#Save file
save(projections, file = paste(getwd(),"/Data/Risk-2012.RData", sep=""))
numTeams <- 10
numQB <- 1
numRB <- 2.5
numWR <- 2.5
numTE <- 1
#Load data
load(paste(getwd(),"/Data/Risk-2012.RData", sep=""))
qb <- projections[projections$pos=="QB",][order(projections[projections$pos=="QB",]$overallRank),]
rb <- projections[projections$pos=="RB",][order(projections[projections$pos=="RB",]$overallRank),]
wr <- projections[projections$pos=="WR",][order(projections[projections$pos=="WR",]$overallRank),]
te <- projections[projections$pos=="TE",][order(projections[projections$pos=="TE",]$overallRank),]
qb
qbReplacements <- print(ceiling(numQB*numTeams*1.5))
rbReplacements <- print(ceiling(numRB*numTeams*1.5))
wrReplacements <- print(ceiling(numWR*numTeams*1.5))
teReplacements <- print(ceiling(numTE*numTeams*1.5))
qb <- projections[projections$pos=="QB",][order(projections[projections$pos=="QB",]$overallRank),]
rb <- projections[projections$pos=="RB",][order(projections[projections$pos=="RB",]$overallRank),]
wr <- projections[projections$pos=="WR",][order(projections[projections$pos=="WR",]$overallRank),]
te <- projections[projections$pos=="TE",][order(projections[projections$pos=="TE",]$overallRank),]
qb$positionRank <- rank(-qb$projectedPtsLatent, ties.method="min")
qb
qb$positionRank <- rank(-qb$projectedPtsLatent, ties.method="min")
rb$positionRank <- rank(-rb$projectedPtsLatent, ties.method="min")
wr$positionRank <- rank(-wr$projectedPtsLatent, ties.method="min")
te$positionRank <- rank(-te$projectedPtsLatent, ties.method="min")
qbReplacements <- print(ceiling(numQB*numTeams*1.5))
rbReplacements <- print(ceiling(numRB*numTeams*1.5))
wrReplacements <- print(ceiling(numWR*numTeams*1.5))
teReplacements <- print(ceiling(numTE*numTeams*1.5))
qbValueOfReplacement <- print(mean(c(qb$projectedPts[qb$positionRank==qbReplacements],qb$projectedPts[qb$positionRank==(qbReplacements-1)],qb$projectedPts[qb$positionRank==(qbReplacements+1)])))
rbValueOfReplacement <- print(mean(c(rb$projectedPts[rb$positionRank==rbReplacements],rb$projectedPts[rb$positionRank==(rbReplacements-1)],rb$projectedPts[rb$positionRank==(rbReplacements+1)])))
wrValueOfReplacement <- print(mean(c(wr$projectedPts[wr$positionRank==wrReplacements],wr$projectedPts[wr$positionRank==(wrReplacements-1)],wr$projectedPts[wr$positionRank==(wrReplacements+1)])))
teValueOfReplacement <- print(mean(c(te$projectedPts[te$positionRank==teReplacements],te$projectedPts[te$positionRank==(teReplacements-1)],te$projectedPts[te$positionRank==(teReplacements+1)])))
qb$vor <- qb$projectedPts - qbValueOfReplacement
rb$vor <- rb$projectedPts - rbValueOfReplacement
wr$vor <- wr$projectedPts - wrValueOfReplacement
te$vor <- te$projectedPts - teValueOfReplacement
projections <- rbind(qbFinal,rbFinal,wrFinal,teFinal)
projections <- rbind(qb,rb,wr,te)
projections
projections$overallRank <- rank(-projections$vor, ties.method="min")
#Order players by overall rank
projections <- projections[order(projections$overallRank),]
row.names(projections) <- 1:dim(projections)[1]
projections
projections[,c("name","pos","team","overallRank","pick","positionRank","projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts","projectedPtsLatent","vor","sdPick","sdPts","risk")]
projections <- projections[,c("name","pos","team","overallRank","pick","positionRank","projectedPts_espn","projectedPts_cbs","projectedPts_nfl","projectedPts","projectedPtsLatent","vor","sdPick","sdPts","risk")]
projections
ffball[which(ffball$risk <= 5 & ffball$vor >= 0),]
projections[which(projections$risk <= 5 & projections$vor >= 0),]
projections[which(projections$risk >=5),]
projections[which(projections$risk >=5 & projections$vor >= 0),]
ggplot(projections, aes(x=vor, fill=pos)) + geom_density(alpha=.3) + xlab("Player's Value Over Replacement") + ggtitle("Density Plot of Projected VOR from 2012") + theme(legend.title=element_blank())
ggsave(paste(getwd(),"/Figures/VOR 2012.jpg", sep=""))
#Save file
save(projections, file = paste(getwd(),"/Data/VOR-2012.RData", sep=""))
leagueCap <- 225
defaultCap <- 200
numTotalStarters <- 7
numTotalPlayers <- 20
load(paste(getwd(),"/Data/VOR-2012.RData", sep=""))
avgcost <- read.csv(paste(strsplit(path,"/Indiana/Research/Data")[[1]],"/Fantasy Football/Research/R/avgcost.csv",sep=""))
paste(path,"/R/Functions/IsaacFunctions.R",sep="")
avgcost <- read.csv(paste(strsplit(path,"/Indiana/Research/Data")[[1]],"/Fantasy Football/Research/R/avgcost.csv",sep=""))
paste(strsplit(path,"/Indiana/Research/Data")[[1]],"/Fantasy Football/Research/R/avgcost.csv",sep="")
avgcost2 <- avgcost[which(avgcost$Avg.Cost!=""),]
avgcost2$name <- avgcost2$Player
avgcost2$avgCost <- as.numeric((str_replace_all(avgcost2$Avg.Cost, "\\$", "")))
library("stringr")
avgcost <- read.csv(paste(strsplit(path,"/Indiana/Research/Data")[[1]],"/Fantasy Football/Research/R/avgcost.csv",sep=""))
avgcost2 <- avgcost[which(avgcost$Avg.Cost!=""),]
avgcost2$name <- avgcost2$Player
avgcost2$avgCost <- as.numeric((str_replace_all(avgcost2$Avg.Cost, "\\$", "")))
avgcost3 <- avgcost2[,c("name","avgCost")]
avgcost3$projectedCost <- ceiling(avgcost3$avgCost * (leagueCap/defaultCap))
avgcost <- read.csv(paste(strsplit(path,"/Indiana/Research/Data")[[1]],"/Fantasy Football/Research/R/avgcost.csv",sep=""))
avgcost2 <- avgcost[which(avgcost$Avg.Cost!=""),]
avgcost2$name <- avgcost2$Player
avgcost2$avgCost <- as.numeric((str_replace_all(avgcost2$Avg.Cost, "\\$", "")))
avgcost3 <- avgcost2[,c("name","avgCost")]
avgcost3$projectedCost <- ceiling(avgcost3$avgCost * (leagueCap/defaultCap))
#Change names
avgcost3[which(avgcost3$name=="Stevie Johnson"),"name"] <- "Steve Johnson"
avgcost3$name
merge(projections, avgcost3, by="name", all.x=TRUE)
projections <- merge(projections, avgcost3, by="name", all.x=TRUE)
projections$projectedCost[is.na(projections$projectedCost)==TRUE] <- 1
projections <- projections[order(projections$overallRank),]
projections
load(paste(getwd(),"/Data/VOR-2012.RData", sep=""))
#Avg & Projected Cost
#readHTMLTable("http://football.fantasysports.yahoo.com/f1/24155/draftanalysis?tab=AD&pos=ALL&sort=DA_AP", stringsAsFactors = FALSE)
avgcost <- read.csv(paste(strsplit(path,"/Indiana/Research/Data")[[1]],"/Fantasy Football/Research/R/avgcost.csv",sep=""))
avgcost2 <- avgcost[which(avgcost$Avg.Cost!=""),]
avgcost2$name <- avgcost2$Player
avgcost2$avgCost <- as.numeric((str_replace_all(avgcost2$Avg.Cost, "\\$", "")))
avgcost3 <- avgcost2[,c("name","avgCost")]
avgcost3$projectedCost <- ceiling(avgcost3$avgCost * (leagueCap/defaultCap))
#Change names
avgcost3[which(avgcost3$name=="Stevie Johnson"),"name"] <- "Steve Johnson"
projections <- merge(projections, avgcost3, by="name", all.x=TRUE)
projections$projectedCost[is.na(projections$projectedCost)==TRUE] <- 1
projections <- projections[order(projections$overallRank),]
projections[duplicated(projections$name),]
projections$projectedCost
projections$inflatedCost <- ceiling(projections$avgCost * (leagueCap/defaultCap) * 1.0)
projections$inflatedCost[projections$overallRank <= 33] <- ceiling(projections$avgCost[projections$overallRank <= 33] * (leagueCap/defaultCap) * 1.1)
projections$inflatedCost[projections$overallRank >= 67] <- ceiling(projections$avgCost[projections$overallRank >= 67] * (leagueCap/defaultCap) * 0.9)
projections$inflatedCost[is.na(projections$inflatedCost)==TRUE] <- 1
projections$inflatedCost <- ceiling(projections$avgCost * (leagueCap/defaultCap) * 1.0)
projections$inflatedCost[projections$overallRank <= 33] <- ceiling(projections$avgCost[projections$overallRank <= 33] * (leagueCap/defaultCap) * 1.1)
projections$inflatedCost[projections$overallRank >= 67] <- ceiling(projections$avgCost[projections$overallRank >= 67] * (leagueCap/defaultCap) * 0.9)
projections$inflatedCost[is.na(projections$inflatedCost)==TRUE] <- 1
projections$inflatedCost
ggplot(projections, aes(x=vor, fill=pos)) + geom_density(alpha=.3) + xlab("Player's Intrinsic Value (Cost)") + ggtitle("Density Plot of Players' Values from 2012") + theme(legend.title=element_blank())
ggplot(projections, aes(x=inflatedCost)) + geom_density(alpha=.3) + xlab("Player's Intrinsic Value (Cost)") + ggtitle("Density Plot of Players' Values from 2012") + theme(legend.title=element_blank())
ggplot(projections, aes(x=inflatedCost)) + geom_density("green", alpha=.3) + xlab("Player's Intrinsic Value (Cost)") + ggtitle("Density Plot of Players' Values from 2012") + theme(legend.title=element_blank())
ggplot(projections, aes(x=inflatedCost)) + geom_density(fill="green", alpha=.3) + xlab("Player's Intrinsic Value (Cost)") + ggtitle("Density Plot of Players' Values from 2012") + theme(legend.title=element_blank())
ggplot(projections, aes(x=inflatedCost)) + geom_density(fill="green", alpha=.3) + xlab("Player's Intrinsic Value (Cost)") + ggtitle("Density Plot of Players' Values from 2012") + theme(legend.title=element_blank())
ggsave(paste(getwd(),"/Figures/Inflated Cost 2012.jpg", sep=""))
ggplot(projections, aes(x=inflatedCost)) + geom_density(fill="green", alpha=.3) + xlab("Player's Intrinsic Value (Cost)") + ggtitle("Density Plot of Players' Values from 2012") + theme(legend.title=element_blank())
ggsave(paste(getwd(),"/Figures/Inflated Cost 2012.jpg", sep=""))
ggplot(projections, aes(x=inflatedCost)) + geom_density(fill="green", alpha=.3) + xlab("Player's Intrinsic Value (Cost)") + ggtitle("Density Plot of Players' Values from 2012") + theme(legend.title=element_blank())
ggsave(paste(getwd(),"/Figures/Inflated Cost 2012.jpg", sep=""))
save(projections, file = paste(getwd(),"/Data/AvgCost-2012.RData", sep=""))
projections
leagueCap <- 225
numQBstarters <- 1
numRBstarters <- 2
numWRstarters <- 2
numTEstarters <- 1
numTotalStarters <- 7
numTotalPlayers <- 20
maxRisk <- 5
leagueCap - (numTotalPlayers - numTotalStarters)
leagueCap <- 225
numQBstarters <- 1
numRBstarters <- 2
numWRstarters <- 2
numTEstarters <- 1
numTotalStarters <- 7
numTotalPlayers <- 20
maxRisk <- 5
#Library
library("Rglpk")
#Load data
load(paste(getwd(),"/Data/VOR-2012.RData", sep=""))
optimizeData <- na.omit(projections[,c("name","pos","projectedPtsLatent","risk","inflatedCost")])
load(paste(getwd(),"/Data/AvgCost-2012.RData", sep=""))
#Roster Optimization
optimizeData <- na.omit(projections[,c("name","pos","projectedPtsLatent","risk","inflatedCost")])
maxCost <- leagueCap - (numTotalPlayers - numTotalStarters)
optimizeTeam <- function(points=optimizeData$projectedPtsLatent, playerCost=optimizeData$inflatedCost, maxRisk=maxRisk){ #can change points, cost, or risk
num.players <- length(optimizeData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(optimizeData$pos == "QB"), # num QB
as.numeric(optimizeData$pos == "RB"), # num RB
as.numeric(optimizeData$pos == "WR"), # num WR
as.numeric(optimizeData$pos == "TE"), # num TE
diag(optimizeData$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c("==",
">=",
">=",
">=",
rep("<=", num.players),
"<=",
"==")
b <- c(numQBstarters,
numRBstarters,
numWRstarters,
numTEstarters,
rep(maxRisk, num.players),
maxCost,
numTotalstarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
#sol$playerInfo <- optimizeData[sol$solution == 1,c("name","projectedPts","inflatedCost")]
sol$playerInfo <- as.data.frame(cbind(optimizeData[sol$solution == 1,"name"],points[sol$solution == 1],optimizeData[sol$solution == 1,"risk"],playerCost[sol$solution == 1]))
names(sol$playerInfo) <- c("name","points","risk","cost")
sol$totalCost <- sum(optimizeData$inflatedCost * sol$solution)
sol$players <- optimizeData$name[sol$solution == 1]
return(sol)
}
optimizeTeam(maxRisk=maxRisk)
optimizeTeam <- function(points=optimizeData$projectedPtsLatent, playerCost=optimizeData$inflatedCost, maxRisk=maxRisk){ #can change points, cost, or risk
num.players <- length(optimizeData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(optimizeData$pos == "QB"), # num QB
as.numeric(optimizeData$pos == "RB"), # num RB
as.numeric(optimizeData$pos == "WR"), # num WR
as.numeric(optimizeData$pos == "TE"), # num TE
diag(optimizeData$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c("==",
">=",
">=",
">=",
rep("<=", num.players),
"<=",
"==")
b <- c(numQBstarters,
numRBstarters,
numWRstarters,
numTEstarters,
rep(maxRisk, num.players),
maxCost,
numTotalStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
#sol$playerInfo <- optimizeData[sol$solution == 1,c("name","projectedPts","inflatedCost")]
sol$playerInfo <- as.data.frame(cbind(optimizeData[sol$solution == 1,"name"],points[sol$solution == 1],optimizeData[sol$solution == 1,"risk"],playerCost[sol$solution == 1]))
names(sol$playerInfo) <- c("name","points","risk","cost")
sol$totalCost <- sum(optimizeData$inflatedCost * sol$solution)
sol$players <- optimizeData$name[sol$solution == 1]
return(sol)
}
optimizeTeam(maxRisk=maxRisk)
optimizeTeam <- function(points=optimizeData$projectedPtsLatent, playerCost=optimizeData$inflatedCost, maxRisk=maxRisk){ #can change points, cost, or risk
num.players <- length(optimizeData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(optimizeData$pos == "QB"), # num QB
as.numeric(optimizeData$pos == "RB"), # num RB
as.numeric(optimizeData$pos == "WR"), # num WR
as.numeric(optimizeData$pos == "TE"), # num TE
diag(optimizeData$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c("==",
">=",
">=",
">=",
rep("<=", num.players),
"<=",
"==")
b <- c(numQBstarters,
numRBstarters,
numWRstarters,
numTEstarters,
rep(maxRisk, num.players),
maxCost,
numTotalStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(cbind(optimizeData[sol$solution == 1,"name"],points[sol$solution == 1],optimizeData[sol$solution == 1,"risk"],playerCost[sol$solution == 1]))
names(sol$playerInfo) <- c("name","points","risk","cost")
sol$totalCost <- sum(optimizeData$inflatedCost * sol$solution)
sol$players <- optimizeData$name[sol$solution == 1]
return(sol)
}
avgcost <- read.csv(paste(strsplit(path,"/Indiana/Research/Data")[[1]],"/Fantasy Football/Research/R/avgcost.csv",sep=""))
avgcost2 <- avgcost[which(avgcost$Avg.Cost!=""),]
avgcost2$name <- avgcost2$Player
avgcost2$name=="Arian Foster"
avgcost2$name[avgcost2$name=="Arian Foster"]
avgcost2$name[avgcost2$name=="Steve Johnson"]
avgcost2$name[avgcost2$name=="Stevie Johnson"]
projections[projections$name=="Stevie Johnson"]
projections[projections$name=="Steve Johnson"]
projections[projections$name=="Steve Johnson",]
projections[projections$name=="Stevie Johnson",]
load(paste(getwd(),"/Data/VOR-2012.RData", sep=""))
avgcost <- read.csv(paste(strsplit(path,"/Indiana/Research/Data")[[1]],"/Fantasy Football/Research/R/avgcost.csv",sep=""))
avgcost2 <- avgcost[which(avgcost$Avg.Cost!=""),]
avgcost2$name <- avgcost2$Player
avgcost2$avgCost <- as.numeric((str_replace_all(avgcost2$Avg.Cost, "\\$", "")))
avgcost3 <- avgcost2[,c("name","avgCost")]
avgcost3$projectedCost <- ceiling(avgcost3$avgCost * (leagueCap/defaultCap))
avgcost2$name[avgcost2$name=="Stevie Johnson"]
avgcost3$name[avgcost3$name=="Stevie Johnson"] <- "Steve Johnson"
str(avgcost3)
avgcost <- read.csv(paste(strsplit(path,"/Indiana/Research/Data")[[1]],"/Fantasy Football/Research/R/avgcost.csv",sep=""))
avgcost2 <- avgcost[which(avgcost$Avg.Cost!=""),]
avgcost2$name <- as.character(avgcost2$Player)
avgcost2$avgCost <- as.numeric((str_replace_all(avgcost2$Avg.Cost, "\\$", "")))
avgcost3 <- avgcost2[,c("name","avgCost")]
avgcost3$projectedCost <- ceiling(avgcost3$avgCost * (leagueCap/defaultCap))
str(avgcost3)
avgcost3$name[avgcost3$name=="Stevie Johnson"] <- "Steve Johnson"
avgcost3$name[avgcost3$name=="Stevie Johnson"] <- "Steve Johnson"
projections <- merge(projections, avgcost3, by="name", all.x=TRUE)
projections$projectedCost[is.na(projections$projectedCost)==TRUE] <- 1
projections <- projections[order(projections$overallRank),]
#Remove duplicate cases
projections[duplicated(projections$name),]
projections$inflatedCost <- ceiling(projections$avgCost * (leagueCap/defaultCap) * 1.0)
projections$inflatedCost[projections$overallRank <= 33] <- ceiling(projections$avgCost[projections$overallRank <= 33] * (leagueCap/defaultCap) * 1.1)
projections$inflatedCost[projections$overallRank >= 67] <- ceiling(projections$avgCost[projections$overallRank >= 67] * (leagueCap/defaultCap) * 0.9)
projections$inflatedCost[is.na(projections$inflatedCost)==TRUE] <- 1
#Density Plot
ggplot(projections, aes(x=inflatedCost)) + geom_density(fill="green", alpha=.3) + xlab("Player's Intrinsic Value (Cost)") + ggtitle("Density Plot of Players' Values from 2012") + theme(legend.title=element_blank())
ggsave(paste(getwd(),"/Figures/Inflated Cost 2012.jpg", sep=""))
#Save file
save(projections, file = paste(getwd(),"/Data/AvgCost-2012.RData", sep=""))
leagueCap <- 225
numQBstarters <- 1
numRBstarters <- 2
numWRstarters <- 2
numTEstarters <- 1
numTotalStarters <- 7
numTotalPlayers <- 20
maxRisk <- 5
#Library
library("Rglpk")
#Load data
load(paste(getwd(),"/Data/AvgCost-2012.RData", sep=""))
#Roster Optimization
optimizeData <- na.omit(projections[,c("name","pos","projectedPtsLatent","risk","inflatedCost")])
maxCost <- leagueCap - (numTotalPlayers - numTotalStarters)
optimizeTeam <- function(points=optimizeData$projectedPtsLatent, playerCost=optimizeData$inflatedCost, maxRisk=maxRisk){ #can change points, cost, or risk
num.players <- length(optimizeData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(optimizeData$pos == "QB"), # num QB
as.numeric(optimizeData$pos == "RB"), # num RB
as.numeric(optimizeData$pos == "WR"), # num WR
as.numeric(optimizeData$pos == "TE"), # num TE
diag(optimizeData$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c("==",
">=",
">=",
">=",
rep("<=", num.players),
"<=",
"==")
b <- c(numQBstarters,
numRBstarters,
numWRstarters,
numTEstarters,
rep(maxRisk, num.players),
maxCost,
numTotalStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(cbind(optimizeData[sol$solution == 1,"name"],points[sol$solution == 1],optimizeData[sol$solution == 1,"risk"],playerCost[sol$solution == 1]))
names(sol$playerInfo) <- c("name","points","risk","cost")
sol$totalCost <- sum(optimizeData$inflatedCost * sol$solution)
sol$players <- optimizeData$name[sol$solution == 1]
return(sol)
}
optimizeTeam(maxRisk=maxRisk)
optimizeTeam(maxRisk=100)
optimizeTeam <- function(points=optimizeData$projectedPtsLatent, playerCost=optimizeData$inflatedCost, maxRisk=maxRisk){ #can change points, cost, or risk
num.players <- length(optimizeData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(optimizeData$pos == "QB"), # num QB
as.numeric(optimizeData$pos == "RB"), # num RB
as.numeric(optimizeData$pos == "WR"), # num WR
as.numeric(optimizeData$pos == "TE"), # num TE
diag(optimizeData$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c("==",
">=",
">=",
">=",
rep("<=", num.players),
"<=",
"==")
b <- c(numQBstarters,
numRBstarters,
numWRstarters,
numTEstarters,
rep(maxRisk, num.players),
maxCost,
numTotalStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(cbind(optimizeData[sol$solution == 1,"name"],round(points[sol$solution == 1],3),round(optimizeData[sol$solution == 1,"risk"],3),playerCost[sol$solution == 1]))
names(sol$playerInfo) <- c("name","points","risk","cost")
sol$totalCost <- sum(optimizeData$inflatedCost * sol$solution)
sol$players <- optimizeData$name[sol$solution == 1]
return(sol)
}
optimizeTeam(maxRisk=maxRisk)
optimizeTeam(maxRisk=100)
projectedPoints <- vector(mode="numeric", length=length(seq(0, max(optimizeData$risk), 0.1)))
riskLevel <- vector(mode="numeric", length=length(seq(0, max(optimizeData$risk), 0.1)))
j <- 1
pb <- txtProgressBar(min = 0, max = max(optimizeData$risk), style = 3)
for (i in seq(0, max(optimizeData$risk), 0.1)){
setTxtProgressBar(pb, i)
projectedPoints[j] <- optimizeTeam(maxRisk=i)$optimum
riskLevel[j] <- i
j <- j+1
}
plot(riskLevel,projectedPoints)
riskData <- as.data.frame(cbind(riskLevel,projectedPoints))
riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
optimizeTeam(maxRisk=3.8)
ggplot(aes(x=riskLevel, y=projectedPoints)) + geom_point() + geom_smooth() + xlab("Projected Fantasy Football Points") + ylab("Actual Fantasy Football Points") + ggtitle("Associaton Between Projected Fantasy Points and Actual Points")
plot(riskLevel,projectedPoints)
riskLevel
riskData
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point() + geom_smooth() + xlab("Projected Fantasy Football Points") + ylab("Actual Fantasy Football Points") + ggtitle("Associaton Between Projected Fantasy Points and Actual Points")
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point() + geom_smooth() + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points")
?geom_smooth
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point() + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points") +
stat_smooth(method = "glm", family = binomial) # + geom_smooth()
?stat_smooth
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point() + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points") +
stat_smooth(method = "glm") # + geom_smooth()
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point() + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points") +
stat_smooth() # + geom_smooth()
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point() + geom_smooth() + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points")
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point() + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points")
#+ stat_smooth(method = "glm", family = binomial)
+stat_smooth(method="lm", model = log(y) ~ x)
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point() + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points")
#+ stat_smooth(method = "glm", family = binomial)
+stat_smooth(method="lm", model = log(projectedPoints) ~ riskLevel)
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point(2) + geom_smooth() + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points")
?geom_point
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point(size=2) + geom_smooth() + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points")
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point(size=2) + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points")
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point(size=5) + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points")
ggplot(data=riskData, aes(x=riskLevel, y=projectedPoints)) + geom_point(size=3) + xlab("Max Risk Level") + ylab("Total Projected Points") + ggtitle("Association Between Max Risk Level and Total Projected Points")
optimizeTeam(maxRisk=3.8)
riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
optimizeTeam(maxRisk=3.8)
riskData[match(unique(riskData$projectedPoints),riskData$projectedPoints),c("riskLevel","projectedPoints")]
optimizeTeam(maxRisk=3.8) #optimal
optimizeTeam <- function(points=optimizeData$projectedPtsLatent, playerCost=optimizeData$inflatedCost, maxRisk=maxRisk){ #can change points, cost, or risk
num.players <- length(optimizeData$name)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(optimizeData$pos == "QB"), # num QB
as.numeric(optimizeData$pos == "RB"), # num RB
as.numeric(optimizeData$pos == "WR"), # num WR
as.numeric(optimizeData$pos == "TE"), # num TE
diag(optimizeData$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c("==",
">=",
">=",
">=",
rep("<=", num.players),
"<=",
"==")
b <- c(numQBstarters,
numRBstarters,
numWRstarters,
numTEstarters,
rep(maxRisk, num.players),
maxCost,
numTotalStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b,types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(cbind(optimizeData[sol$solution == 1,"name"],round(points[sol$solution == 1],2),round(optimizeData[sol$solution == 1,"risk"],2),playerCost[sol$solution == 1]))
names(sol$playerInfo) <- c("name","points","risk","cost")
sol$totalCost <- sum(optimizeData$inflatedCost * sol$solution)
sol$players <- optimizeData$name[sol$solution == 1]
return(sol)
}
optimizeTeam(maxRisk=maxRisk)
optimizeTeam(maxRisk=100)
optimizeTeam(maxRisk=maxRisk)
optimizeTeam(maxRisk=100)
listOfPlayers <- vector(mode="character", length=numTotalStarters)
bidUpTo <- vector(mode="numeric", length=length(optimizeData$name))
newCost <- optimizeData$inflatedCost
pb <- txtProgressBar(min = 0, max = length(optimizeData$name), style = 3)
for(i in 1:length(optimizeData$name)){
setTxtProgressBar(pb, i)
j <- 1
listOfPlayers <- rep(optimizeData$name[i],numTotalStarters)
newCost <- optimizeData$inflatedCost
while(!is.na(match(optimizeData$name[i],listOfPlayers))){
newCost[i] <- j
listOfPlayers <- optimizeTeam(points=optimizeData$projectedPts, playerCost=newCost, maxRisk=(max(optimizeData$risk)+1)$players  #UPDATE: maxrisk
bidUpTo[i] <- j
j <- j+1
}
pb <- txtProgressBar(min = 0, max = length(optimizeData$name), style = 3)
for(i in 1:length(optimizeData$name)){
setTxtProgressBar(pb, i)
j <- 1
listOfPlayers <- rep(optimizeData$name[i],numTotalStarters)
newCost <- optimizeData$inflatedCost
while(!is.na(match(optimizeData$name[i],listOfPlayers))){
newCost[i] <- j
listOfPlayers <- optimizeTeam(points=optimizeData$projectedPts, playerCost=newCost, maxRisk=(max(optimizeData$risk)+1))$players  #UPDATE: maxrisk
bidUpTo[i] <- j
j <- j+1
}
}
optimizeData$bidUpTo <- bidUpTo - 1
optimizeData$bidUpTo[optimizeData$bidUpTo==0] <- 1
projections <- merge(projections, optimizeData, all.x=TRUE)
projections <- projections[order(projections$overallRank),]
projections$bidUpTo[is.na(projections$bidUpTo)] <- 1
row.names(projections) <- 1:max(as.numeric(row.names(projections)))
projections
save(projections, file = paste(getwd(),"/Data/BidUpTo-2012.RData", sep=""))
projections
